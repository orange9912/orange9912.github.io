{
    "version": "https://jsonfeed.org/version/1",
    "title": "orange's blog",
    "subtitle": "橙子的博客",
    "icon": "http://zyczxq.com/images/favicon.ico",
    "description": "博客",
    "home_page_url": "http://zyczxq.com",
    "items": [
        {
            "id": "http://zyczxq.com/2024/06/15/work/webview-performance/",
            "url": "http://zyczxq.com/2024/06/15/work/webview-performance/",
            "title": "H5体验优化的实践与总结",
            "date_published": "2024-06-15T10:38:52.000Z",
            "content_html": "<h1 id=\"版权赛事详情页的体验优化\"><a class=\"anchor\" href=\"#版权赛事详情页的体验优化\">#</a> 版权赛事详情页的体验优化</h1>\n<p>优化时间：<strong>2024.3.20</strong></p>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>目前在职主要负责的内容是抖音等宿主的<strong>端内 H5/Lynx</strong>（字节内部的高效跨平台框架）页面的编写</p>\n<p>其中我负责的一个页面：<strong>赛事详情页</strong>，是抖音游戏（游戏赛事直播间、赛事搜索）赛事的重要信息呈现页面。</p>\n<p><img data-src=\"live_scene.jpg\" alt=\"live_scene\" /></p>\n<p><img data-src=\"search_scene.jpg\" alt=\"search_scene\" /></p>\n<p><img data-src=\"example_shot.jpg\" alt=\"example_shot\" /></p>\n<p>不同的版权赛事厂商会提供接口返回我们指定的数据结构，实现赛事信息的呈现。</p>\n<p>以 PEL 春季赛为例，在 2.29-3.3 的四天比赛中，日均看播 UV 超 1xx 万，而页面的峰值 PV 也达 1xx 万</p>\n<p>但是页面的首屏性能颇为不佳（尤其是在 Android 机型下）</p>\n<h2 id=\"性能现状\"><a class=\"anchor\" href=\"#性能现状\">#</a> 性能现状</h2>\n<p>我取了一段比赛进行时（访问高峰期的时间范围）的性能数据作为基准样本，分析 ActualFMP、Load 事件、秒开绿</p>\n<blockquote>\n<p>ActualFMP 定义：<strong>接口返回时间 - window.performance.timing.navigationStart</strong>。</p>\n<p>这个性能指标接近于 LCP，在此页面中接近于真实的用户看到有意义内容的时间。</p>\n</blockquote>\n<h3 id=\"线上统计\"><a class=\"anchor\" href=\"#线上统计\">#</a> 线上统计</h3>\n<table>\n<thead>\n<tr>\n<th>指标类别</th>\n<th>统计分位</th>\n<th>表现</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Load</td>\n<td>90 分位</td>\n<td>iOS：700ms-800ms 左右，Android：1.3s</td>\n<td></td>\n</tr>\n<tr>\n<td>ActualFMp</td>\n<td>50 分位</td>\n<td>iOS：450ms 左右，Android：900ms 左右</td>\n<td></td>\n</tr>\n<tr>\n<td>ActualFMP</td>\n<td>90 分位</td>\n<td>iOS：900ms 左右，Android：1.5s～1.7s</td>\n<td></td>\n</tr>\n<tr>\n<td>TotalActualFMP（ActualFMP + 容器启动时间）</td>\n<td><strong>50 分位</strong></td>\n<td>iOS：800ms 左右，Android：1.3s</td>\n<td></td>\n</tr>\n<tr>\n<td>秒开率（取 TotalActualFMP≤1s 占总量的比值）</td>\n<td>-</td>\n<td>iOS：81.41%，Android：24.53%。整体：<strong>54.84</strong>%</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"线下具体分析\"><a class=\"anchor\" href=\"#线下具体分析\">#</a> 线下具体分析</h3>\n<p>以我手上的 Android 测试机为例，将网络限制至条件下述进行测试：</p>\n<ul>\n<li>8Mb/s 的上传 &amp; 下载</li>\n<li>50ms 响应时间</li>\n</ul>\n<p>得到 <strong>window.performance.timing</strong>（解读见最后） 以及下述的监控数据：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"connectStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088842</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"navigationStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088839</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"secureConnectionStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"fetchStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088842</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"domContentLoadedEventStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898090267</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"responseStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898089287</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"domInteractive\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898089442</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"domainLookupEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088842</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"responseEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898089295</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"redirectStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"requestStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088925</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"unloadEventEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"unloadEventStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"domLoading\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898089313</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"domComplete\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898090301</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"domainLookupStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088842</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">\"loadEventStart\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898090302</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token property\">\"domContentLoadedEventEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898090268</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token property\">\"loadEventEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898090302</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token property\">\"redirectEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token property\">\"connectEnd\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1719898088842</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>指标</th>\n<th>定义</th>\n<th>timestamp</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TTFB</td>\n<td>发出页面请求到接收到应答数据第一个字节的时间总和</td>\n<td><strong>448ms</strong></td>\n</tr>\n<tr>\n<td>DOMReady</td>\n<td>页面 DOM 树创建完成</td>\n<td>1426ms</td>\n</tr>\n<tr>\n<td>DCL</td>\n<td>（DOM Content Loaded）HTML 加载与解析完成</td>\n<td>1627ms</td>\n</tr>\n<tr>\n<td>FCP</td>\n<td>（First Contentful Paint）首次内容绘制时间</td>\n<td>1668ms</td>\n</tr>\n<tr>\n<td>Load</td>\n<td>资源加载完毕 loadEventEnd - navigationStart</td>\n<td>1675.9ms</td>\n</tr>\n<tr>\n<td>LCP</td>\n<td>（Largest Contentful Paint）最大内容绘制</td>\n<td>2080ms</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"perf_analyze.jpg\" alt=\"分析\" /></p>\n<h3 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h3>\n<p>从图内可以看到，浏览器先是加载 HTML，然后并行加载 js 模块以及页面样式表</p>\n<p>这些模块的大小共计 <strong>203KB</strong>（编码），其中最有优化空间的主 js 模块花了 773.34 ms（762.772ms 网络 + 10.568ms 资源加载）加载，接着长达一个 160ms 的<strong> long task</strong> 去解析并执行 js</p>\n<p>直到 1428ms 时刻处理完成并触发 DCL。</p>\n<h2 id=\"优化思路\"><a class=\"anchor\" href=\"#优化思路\">#</a> 优化思路</h2>\n<p><img data-src=\"first_paint.png\" alt=\"first_paint\" /></p>\n<p>这些流程一般来说都是串行的，<strong>只要我们能把一些串行的环节改造成并行，或者降低该环节的耗时</strong>，就可以达到优化首屏的效果</p>\n<p>针对这个页面的一些特点，我定制了如下的思路：</p>\n<p><img data-src=\"think.png\" alt=\"think\" /></p>\n<ul>\n<li><strong>前置</strong>\n<ul>\n<li>将首屏的接口进行 prefetch，使页面初始化与请求数据并行，少了一个环节，预计优化<strong> 100ms-200ms</strong></li>\n<li>主 HTML 资源使用内部框架的能力进行 Preload。</li>\n</ul>\n</li>\n<li><strong>简化</strong>\n<ul>\n<li>首屏时把非首屏可见内容延迟渲染</li>\n<li>干掉类似功能的依赖，降低包体积</li>\n<li>Treeshaking。例如 Lodash 替换为 Loadsh-es，才能配合 Treeshaking 按需引入</li>\n<li>版本相近的间接依赖，尽可能锁同一版本</li>\n</ul>\n</li>\n<li><strong>拆分</strong>\n<ul>\n<li>使用直播的插件方案，将一些高频使用的库外置拆分出去，有效减少主包大小并利用并行加载。</li>\n<li>将一些非首屏必须的依赖进行动态导入</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优化效果\"><a class=\"anchor\" href=\"#优化效果\">#</a> 优化效果</h3>\n<p>在线包、离线包体积均降了 10%（374K -&gt; 339K）</p>\n<p>数据预取下首屏直出效果更强、几乎看不见 loading</p>\n<p>以下为<strong>三月底统计数据</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>图</th>\n<th>效果</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>普通搜索入口 (ActualFMP 90 分位)</td>\n<td></td>\n<td>Android：1.29s =&gt; 1.03s (<strong>-20%</strong>)。iOS：838ms =&gt; 529ms（<strong>-36.9%</strong>）。整体：1145ms =&gt; 879.8ms (<strong>-23.1%</strong>)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>秒开率（整体）：54.84% =&gt; 73.43%（优化上线一天后）=&gt; 85.48%（上线三月后离线率较高时）</p>\n<h1 id=\"附windowperformance采集性能数据的解读\"><a class=\"anchor\" href=\"#附windowperformance采集性能数据的解读\">#</a> 附：window.performance 采集性能数据的解读</h1>\n<p><img data-src=\"performance-exam.jpg\" alt=\"performance-exam\" /></p>\n<h3 id=\"时间节点\"><a class=\"anchor\" href=\"#时间节点\">#</a> 时间节点</h3>\n<ul>\n<li>初始化\n<ul>\n<li><code>navigationStart</code> ：完成卸载前一个文档的时间点</li>\n<li><code>redirectStart</code> ：若有重定向，则为重定向开始时间，否则为 0</li>\n<li><code>redirectEnd</code> ：若有重定向，则为重定向结束时间，否则 0</li>\n<li><code>unloadStart</code> 、 <code>unloadEnd</code> ：若当前文档和上一个文档来自不同的源（origins），设置这两为 0，否则记录实际时间。</li>\n</ul>\n</li>\n<li>请求\n<ul>\n<li><code>fetchStart</code> ：浏览器发起资源请求，或者读取缓存（如果有）的开始时间</li>\n<li><code>domainLookupStart</code> ：查询 DNS（若有）的开始时间。如果没有发起查询，那就保持与 <code>fetchStart</code>  一致</li>\n<li><code>domainLookupEnd</code> ：同上，只不过表示结束时间</li>\n<li><code>connectStart</code> ：建立 <code>TCP</code>  连接的开始时间（如果需要建立连接），否则和 <code>domainLookupEnd</code>  相同</li>\n<li>connectEnd：同上，只不过表示结束时间</li>\n<li>secureConnectionStart：HTTPS 的安全连接握手过程时间前，如果没有使用 HTTPS 则为 0。或者不可用时返回 undefined</li>\n<li>requestStart：客户端发送请求的时刻。</li>\n<li>responseStart：客户端收到<strong>应答首个字节</strong>的时刻</li>\n<li>responseEnd：客户端收到<strong>应答最后一个字节</strong>的时刻</li>\n</ul>\n</li>\n<li>解析渲染阶段\n<ul>\n<li>domLoading：用户代理设置当前文档为 loading 状态，一般为浏览器<strong>即将开始解析第一批收到的 HTML 文档字节时</strong>。</li>\n<li>domInteractive：用户代理设置当前文档为可交互，一般为浏览器完成对<strong>所有 HTML 解析并且 DOM 构建完成的时间点</strong>（DOM 准备就绪的时间点</li>\n<li>domContentLoaded：用户代理触发 DCL 的时间，一般为 DOM 准备就绪且没有样式表阻止 JS 执行的时刻（可以开始构建渲染树），DOM、CSSOM 均准备就绪</li>\n<li>domComplete：用户代理设置文档为 complete，即所有处理完成，并且网页上的所有资源（图片）都下载完毕。</li>\n<li>loadEventStart：用户代理触发 Load 事件之前</li>\n<li>loadEventEnd：用户代理完成 Load 事件</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"performance_time.jpg\" alt=\"performance-exam\" /></p>\n<h3 id=\"时刻范围耗时-意义\"><a class=\"anchor\" href=\"#时刻范围耗时-意义\">#</a> 时刻范围 / 耗时、意义</h3>\n<p>这些指标基本都是仅在双方非 0 值时计算有意义。</p>\n<ul>\n<li>Redirect（重定向时间）：<strong>rediectEnd - redirectStart</strong>，</li>\n<li>AppCache（缓存）： <strong>domainLookupStart - fetchStart</strong></li>\n<li>DNS：<strong>domainLookupEnd - domainLookupStart</strong></li>\n<li>TCP：<strong>connectEnd - connectStart</strong></li>\n<li>SSL：<strong>connectEnd - secureConnectionStart</strong></li>\n<li>Request：<strong>reponseStart - requestStart</strong></li>\n<li>Response: <strong>responseEnd - responseStart</strong></li>\n<li>Load（页面完全加载总时间）: <strong>LoadEventEnd - navigationStart</strong></li>\n<li>DOMReady：<strong>domContentLoadedEventStart - fetchStart</strong></li>\n<li>DOMParse：<strong>domInteractive - responseEnd</strong></li>\n<li>ResourceLoad: <strong>LoadEventStart - domContentLoadedEventEnd</strong></li>\n<li>TTFB（发出页面请求到接收到应答数据第一个字节的时间总和）: <strong>responseStart - navigationStart</strong></li>\n</ul>\n<h3 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL1RSL25hdmlnYXRpb24tdGltaW5nLyNwcm9jZXNzaW5nLW1vZGVs\">Navigation Timing (w3.org)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzMub3JnL1RSL25hdmlnYXRpb24tdGltaW5nLTIv\">Navigation Timing Level 2 (w3.org)</span></p>\n",
            "tags": [
                "工作沉淀"
            ]
        },
        {
            "id": "http://zyczxq.com/2024/04/16/Node/node-trial/",
            "url": "http://zyczxq.com/2024/04/16/Node/node-trial/",
            "title": "Node实践1",
            "date_published": "2024-04-15T16:00:00.000Z",
            "content_html": "<h1 id=\"用node帮女朋友生成报告单\"><a class=\"anchor\" href=\"#用node帮女朋友生成报告单\">#</a> 用 node 帮女朋友生成报告单</h1>\n<h2 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h2>\n<p>女朋友是医学生， 平时需要在医院里实习。最近老师给了她一个任务：从一个调查问卷里导出结果表（一个 excel 文件），并且把每个人的结果填写到特定的一个模版报告单。</p>\n<p>但是这个结果有几百个人（意味着要复制黏贴上千次），重复无意义且繁琐的工作，严重影响了与男朋友聊天的时间。</p>\n<p>身为男朋友的我怎能袖手旁观，重复工作就应该交给机器！</p>\n<p>花费了大概一个下午的时间，完成了一个 node 小脚本，我女朋友只需要编辑好模版插值的位置，导入结果 excel，每个人的结果文件就会在数秒内自动生成，已完成交付。</p>\n<h2 id=\"需求点\"><a class=\"anchor\" href=\"#需求点\">#</a> 需求点</h2>\n<ul>\n<li>表格的识别</li>\n<li>word 模板的识别</li>\n<li>特定列的结果要加以计算判断并输出最终医嘱</li>\n<li>文件名称要根据每个人的名字生成</li>\n</ul>\n<h2 id=\"分析\"><a class=\"anchor\" href=\"#分析\">#</a> 分析</h2>\n<h3 id=\"表格的解析\"><a class=\"anchor\" href=\"#表格的解析\">#</a> 表格的解析</h3>\n<p>使用 <code>exceljs</code>  这个库进行 excel 的解析。这个库挺强大，可以读取、操作并写入数据和样式到 xlsx 文件，号称一个一个 Excel 电子表格文件逆向工程项目。</p>\n<h3 id=\"模板word文件的识别\"><a class=\"anchor\" href=\"#模板word文件的识别\">#</a> 模板 word 文件的识别</h3>\n<p>这里文件的识别说难也不难，快速调研之后发现，其实 Word 文件基本都遵循一个标准进行存储： <code>Microsoft Office Open XML标准</code> ，</p>\n<p>这个标准是用于描述和存储电子文档，由 <code>Ecma International</code> （欧洲计算机制造商协会）管理和维护的</p>\n<p>而 XML 和 HTML 一样都是常用的标记语言，XML 更多用于数据交换。</p>\n<p>而 docx 文件其实本质上就是一个压缩包，只要把后缀改成 zip 并解压缩，就可以看到这些文件</p>\n<p><img data-src=\"node-trial.png\" alt=\"lifecycle\" /></p>\n<p>其中 <code>word/document.xml</code>  中存放了该 docx 文档的具体内容，我们只要修改这一部分，最终再写回成 <code>zip</code>  文件并改扩展名为 <code>docx</code> ，即可实现根据模版文件输出对应例子。</p>\n<h2 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h2>\n<p>搞定了以上问题，就可以开始编写代码了，代码的工作流程如下：</p>\n<ol>\n<li>准备一个 excel 表，以及 word 模版</li>\n<li>将 word 模版中需要将数据插值的地方，填写上约定内容，用于正则匹配识别。\n<ol>\n<li>这里我写了 %${X}%（其中 X 为 Excel 表格对应的列）</li>\n</ol>\n</li>\n<li>读取模版 excel，解析表头与内容</li>\n<li>使用 admzip，把模版当作 zip 处理，并读取 <code>document.xml</code>  的内容</li>\n<li>使用正则匹配模版内容，读取所有需要插值的地方。</li>\n<li>针对 excel 内容的每一行，遍历：\n<ol>\n<li>复制一份模版文件</li>\n<li>根据需要插值的地方，读取对应的列</li>\n<li>（可选）针对特定的列做一些计算转化，例如回答人的生日计算成年龄填入</li>\n<li>批量替换，原地修改。</li>\n<li>写入到目标文件夹，并将扩展名更改成 <code>docx</code></li>\n</ol>\n</li>\n<li>结束。</li>\n</ol>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<p>读取 excel：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">parseExcel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> workbook <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exceljs<span class=\"token punctuation\">.</span>Workbook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 此处省略使用 inquirer 命令行交互的指定文件路径录取。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> inputFile <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> workbook<span class=\"token punctuation\">.</span>xlsx<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">get__dirname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> destFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> basicSheet <span class=\"token operator\">=</span> inputFile<span class=\"token punctuation\">.</span><span class=\"token function\">getWorksheet</span><span class=\"token punctuation\">(</span><span class=\"token string\">'指定sheet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 读取表内容，首行为表头</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> basicSheetContent <span class=\"token operator\">=</span> basicSheet<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> basicSheet<span class=\"token punctuation\">.</span>rowCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> basicSheetContent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>读取模版并解析：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">readTemplateAndParse</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> templateZip <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdmZip</span><span class=\"token punctuation\">(</span><span class=\"token string\">'目标文件路径'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> templateContentXML <span class=\"token operator\">=</span> templateZip<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word/document.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> originColArr <span class=\"token operator\">=</span> templateContentXML<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%[A-Z]+%</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> colArr <span class=\"token operator\">=</span> originColArr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replate</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">%</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> colArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>遍历写入：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">generateResult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">sheetContent<span class=\"token punctuation\">,</span> col</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 先 copy 一份</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      templateFileName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      destFileName</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先拷贝一份，然后在这一份上作修改</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> zip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    zip <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdmZip</span><span class=\"token punctuation\">(</span>destFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解析文件错误'</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> basicSheetContent <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">parseExcel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> \tbasicSheetContent<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">row</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">contentXML</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> zip<span class=\"token punctuation\">.</span><span class=\"token function\">readAsText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word/document.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t  <span class=\"token keyword\">const</span> cols <span class=\"token operator\">=</span> <span class=\"token function\">readTemplateAndParse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  \t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    \t<span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> row<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t    <span class=\"token comment\">// 计算属性取值过程省略</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  \t  contentXML <span class=\"token operator\">=</span> contentXML<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">%</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>cols<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> computeValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">await</span> zip<span class=\"token punctuation\">.</span><span class=\"token function\">addFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"word/document.xml\"</span><span class=\"token punctuation\">,</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>contentXML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">await</span> zip<span class=\"token punctuation\">.</span><span class=\"token function\">writeZip</span><span class=\"token punctuation\">(</span>destFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">await</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span>descFileName<span class=\"token punctuation\">,</span> descDocx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"问题点卡点\"><a class=\"anchor\" href=\"#问题点卡点\">#</a> 问题点 / 卡点</h2>\n<h3 id=\"esmts的选用\"><a class=\"anchor\" href=\"#esmts的选用\">#</a> ESM+TS 的选用</h3>\n<p>一开始在选择是使用 esm 还是 cjs 规范写时，选择了写的更顺手的 esm 规范。</p>\n<p>但是很快就遇到一些问题</p>\n<ol>\n<li>\n<p>esm 加载 cjs 只能整体加载，使用 <code>import m from 'xxx.cjs'</code> ，然后再内部解构。</p>\n</li>\n<li>\n<p>esm 加载 cjs 的库时也有问题。</p>\n<ol>\n<li>引入构建工具，例如 rollup，然后用对应插件去处理 <code>@rollup/plugin-commonjs</code></li>\n</ol>\n</li>\n<li>\n<p>esm 缺乏 <code>__filename</code>  和  <code>__dirname</code>  等变量</p>\n<ol>\n<li>可以使用 import.meta.url 重建</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>仅仅是写一个脚本，为了追求快速，直接一通操作……：</p>\n<ol>\n<li><code>npm init</code>  初始化</li>\n<li>设置 package.json， <code>type</code>  为 <code>module</code></li>\n<li>添加一波需要的依赖并安装： <code>adm-zip</code> 、 <code>chalk</code> 、 <code>dayjs</code> 、 <code>exceljs</code> 、 <code>inquirer</code> ...</li>\n<li>上 <code>rollup</code>  构建工具，引入必须的插件并配置： <code>@rollup/plugin-typescript</code> 、 <code>@rollup/plugin-node-resolve</code> 、 <code>@rollup/plugin-commonjs</code> 、 <code>@rollup/plugin-json</code></li>\n<li>配置 <code>tsconfig.json</code> ，指定 <code>compilerOptions.module</code>  与 <code>compilerOptions.moduleResolution</code>  为 <code>NodeNext</code>\n<ol>\n<li>这里的作用为指定让 ts 使用什么模块规范，及使用什么路径查找方案。</li>\n</ol>\n</li>\n<li>涉及 <code>__dirname</code>  与 <code>__filename</code>  全局变量的地方，利用 <code>import.meta.url</code>  替代。</li>\n<li>编码测试</li>\n</ol>\n<h2 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V4Y2VsanMvZXhjZWxqcy9ibG9iL21hc3Rlci9SRUFETUVfemgubWQ=\">exceljs/README_zh.md at master · exceljs/exceljs (github.com)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N0aGFja2Vycy9hZG0temlwL3dpa2kvQURNLVpJUA==\">ADM 邮编・cthackers/adm-zip 维基 (github.com)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MzEzMDQ4MTcxNzk3NTQ0OTk3P3NlYXJjaElkPTIwMjQwNDExMTMzMzU2MjE3RjA2ODY0QzJBRkUwQkRGQTUjaGVhZGluZy02\">前端是怎么解析 Excel、PDF、Word、PPT 等文件的？ - 掘金 (juejin.cn)</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjU1OTg5MDUxMzk5P3NlYXJjaElkPTIwMjQwNDExMTEwNTU4MjNCNjZFNDlFMUVENjIwMEQwN0Q=\">nodejs 实现一个 word 文档解析器 - 掘金 (juejin.cn)</span></li>\n</ul>\n",
            "tags": [
                "Node"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/11/08/Vue/VueNote4/",
            "url": "http://zyczxq.com/2021/11/08/Vue/VueNote4/",
            "title": "深入浅出Vue笔记————生命周期篇",
            "date_published": "2021-11-08T06:36:31.000Z",
            "content_html": "<h1 id=\"开头\"><a class=\"anchor\" href=\"#开头\">#</a> 开头</h1>\n<p>开头，我们问自己几个问题：</p>\n<ul>\n<li>Vue 实例初始化阶段都经历了些什么？</li>\n<li>beforeCreate 钩子调用之前都干了些什么？</li>\n<li>Vue 实例的事件系统是如何初始化的？</li>\n<li>inject 的原理？</li>\n<li>访问 Vue 实例的 props 和 data，我们实际上访问的是什么？</li>\n</ul>\n<p>带着问题去看文章。</p>\n<p>每个 Vue 实例在创建的时候都要经过一系列初始化，从创建到销毁，Vue 的生命周期可以分为四个阶段：<strong>初始化、模板编译、挂载、卸载阶段</strong>。</p>\n<p><img src=\"lifecycle.png\" alt=\"lifecycle\" title=\"官方图\" /></p>\n<p>接下来，<strong>我们从 Vue 的构造函数深入了解 Vue 的生命周期，看看 Vue 是怎么建立并初始化的</strong>。不知道的可以再看看前面的博客，我们前面说到，Vue 有个构造函数，在某个文件内，会引入不同的 Mixin，往 Vue 的原型上挂载方法，其中 Vue 构造函数就引用了 initMixin 的方法用于初始化。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vue is a constructor and should be called with the `new` keyword'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 就是这里</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"this_init\"><a class=\"anchor\" href=\"#this_init\">#</a> this._init</h1>\n<p>这个方法是通过 initMixin 挂载到 Vue 原型上的，接下来我们来看看他的细节。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token function\">resolveConstructorOptions</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    options <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    vm</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里会根据用户传递、父级实例的 options 进行合并</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">initEvents</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">initRender</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span><span class=\"token string\">'beforeCreate'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 触发对应的生命周期事件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">initInjections</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">initState</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">initProvide</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span><span class=\"token string\">'created'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span>vm<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>el<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不得不说，大佬写的代码就是逻辑清晰和易读，基本上函数名已经是解释了它做了什么。</p>\n<p>在初始化流程很明显，先是初始化实例属性、事件、渲染，然后触发 beforeCreate 生命周期，然后继续下去。</p>\n<h2 id=\"初始化实例属性\"><a class=\"anchor\" href=\"#初始化实例属性\">#</a> 初始化实例属性</h2>\n<p>Vue 通过<strong> initLifecycle</strong> 函数向实例中挂载属性，局部代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initLifecycle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 找出第一个非抽象父类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> parent <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>parent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//options 中有一个属性为 abstarct，表示当前组件是否为抽象组件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 找到第一个非抽象父组件，然后添加自身给父组件，并设置 $parent</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>options<span class=\"token punctuation\">.</span>abstract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>abstract <span class=\"token operator\">&amp;&amp;</span> parent<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span>$parent</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    parent<span class=\"token punctuation\">.</span>$children<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$parent <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$root <span class=\"token operator\">=</span> parent <span class=\"token operator\">?</span> parent<span class=\"token punctuation\">.</span>$root <span class=\"token operator\">:</span> vm<span class=\"token comment\">// 表示当前组件树的根 Vue 实例</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$children <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$refs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_watcher <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_isDestroyed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_isBeingDestroyed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是局部的代码，其实就是给一些属性赋一个默认值。</p>\n<h2 id=\"初始化事件\"><a class=\"anchor\" href=\"#初始化事件\">#</a> 初始化事件</h2>\n<p>初始化事件即将父组件在模板中使用的 v-on 注册的事件添加到子组件的事件系统中。我们都知道，Vue 中父组件可以在使用子组件的地方用 v-on 来监听子组件触发的事件。</p>\n<div class=\"note primary\">\n<p>如果 v-on 写在组件标签上，事件就会被注册到子组件的事件系统中。如果写在平台标签（如 div），就会把事件注册到浏览器系统中。</p>\n</div>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initEvents</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_events <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 初始化父组件附加事件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>_parentListeners</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">)</span><span class=\"token function\">updateComponentListeners</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> listeners<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先初始化_events 属性为空对象，用来存储事件。所有使用 vm.$on 注册的事件监听器都会保存到这个属性中</p>\n<p>然后在模板编译阶段，如果解析到组件标签，就会实例化子组件，同时将标签上注册的事件解析并传递给子组件的 $options._parentListeners 中。</p>\n<p>那如果是这样，存在 listeners，就将它（父组件向子组件注册的事件）注册到子组件实例中。<strong>调用 updateComponentListeners</strong>。</p>\n<h3 id=\"updatecomponentlisteners\"><a class=\"anchor\" href=\"#updatecomponentlisteners\">#</a> updateComponentListeners</h3>\n<p>组件通过该方法将父组件中向子组件注册的事件注册，初始化的时候其实只要循环 vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi><msub><mi mathvariant=\"normal\">.</mi><mi>p</mi></msub><mi>a</mi><mi>r</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>L</mi><mi>i</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mi>s</mi><mtext>并使用</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">options._parentListeners并使用vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord\"><span class=\"mord\">.</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">并</span><span class=\"mord cjk_fallback\">使</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>on 方法注册即可</p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> target</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">,</span> once</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    target<span class=\"token punctuation\">.</span><span class=\"token function\">$once</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    target<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  target<span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateComponentListeners</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span>listeners<span class=\"token punctuation\">,</span>oldListeners</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\ttarget <span class=\"token operator\">=</span> vm</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">updateListener</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">,</span>oldListeners <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">,</span> add <span class=\"token punctuation\">,</span>remove<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里还封装了两个函数，用于新增和删除事件。</p>\n<h3 id=\"updatelisteners\"><a class=\"anchor\" href=\"#updatelisteners\">#</a> updateListeners</h3>\n<p>这个函数思路其实比较简单，如果 listeners 对象存在某个事件而 oldListeners 不存在，则说明需要新增，反之则移除。</p>\n<p>它的功能其实就是比对 listeners 和 oldListeners 来分辨哪些事件需要 add 注册，哪些需要 remove 移除。</p>\n<div class=\"note primary\">\n<p>读到这里的时候，我就感觉这个函数应该不止是在初始化时可以调用，在重新渲染 / 更新时也可以调用来更新事件</p>\n</div>\n<p>代码就懒得贴了，简单说一下这个函数的内部过程吧：</p>\n<p>主要分为两个循环，第一部分循环 listeners，判断哪些事件不在 oldListeners 中，调用 add 注册这些事件。第二部分循环 oldListeners，造出哪些事件不在 listeners，调用 remove 移除这些事件。</p>\n<h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h3>\n<p>这里还要注意的是，实际上我们使用 Vue 在模板中注册事件的时候还可能会有一些事件修饰符，如 capture、once 之类的，写成像：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>child</span> <span class=\"token attr-name\">@increment.once</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>在 Vue 中有个函数叫<strong> normalizeEvent</strong>，它就是用来将这些修饰符解析出来的函数。</p>\n<h2 id=\"初始化render\"><a class=\"anchor\" href=\"#初始化render\">#</a> 初始化 render</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initRender</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_vnode <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// the root of the child tree</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_staticTrees <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// v-once cached trees</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> parentVnode <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$vnode <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>_parentVnode <span class=\"token comment\">// the placeholder node in parent tree</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> renderContext <span class=\"token operator\">=</span> parentVnode <span class=\"token operator\">&amp;&amp;</span> parentVnode<span class=\"token punctuation\">.</span>context</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$slots <span class=\"token operator\">=</span> <span class=\"token function\">resolveSlots</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>_renderChildren<span class=\"token punctuation\">,</span> renderContext<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>$scopedSlots <span class=\"token operator\">=</span> emptyObject</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// bind the createElement fn to this instance</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// so that we get proper render context inside it.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// args order: tag, data, children, normalizationType, alwaysNormalize</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// internal version is used by render functions compiled from templates</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  vm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_c</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// normalization is always applied for the public version, used in</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// user-written render functions.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  vm<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$createElement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// $attrs &amp; $listeners are exposed for easier HOC creation.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// they need to be reactive so that HOCs using them are always updated</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">const</span> parentData <span class=\"token operator\">=</span> parentVnode <span class=\"token operator\">&amp;&amp;</span> parentVnode<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">/* istanbul ignore else */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$attrs'</span><span class=\"token punctuation\">,</span> parentData <span class=\"token operator\">&amp;&amp;</span> parentData<span class=\"token punctuation\">.</span>attrs <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token operator\">!</span>isUpdatingChildComponent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$attrs is readonly.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$listeners'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>_parentListeners <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token operator\">!</span>isUpdatingChildComponent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">$listeners is readonly.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$attrs'</span><span class=\"token punctuation\">,</span> parentData <span class=\"token operator\">&amp;&amp;</span> parentData<span class=\"token punctuation\">.</span>attrs <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'$listeners'</span><span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">.</span>_parentListeners <span class=\"token operator\">||</span> emptyObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"触发生命周期钩子\"><a class=\"anchor\" href=\"#触发生命周期钩子\">#</a> 触发生命周期钩子</h2>\n<p>我们可以看得到，Vue 中通过 callHook 函数来触发生命周期钩子。</p>\n<p>我们先说说 Vue 所有的生命周期钩子：</p>\n<ul>\n<li>beforeCreate</li>\n<li>created</li>\n<li>beforeMount</li>\n<li>mounted</li>\n<li>beforeUpdate</li>\n<li>updated</li>\n<li>beforeDestroy</li>\n<li>destroyed</li>\n<li>activated</li>\n<li>deactivated</li>\n<li>errorCaptured</li>\n</ul>\n<p>其中前八个是比较正常的生命周期，倒数第二第三个按我自己的经验在 keepalive 中用的比较多。</p>\n<p>接下来我们说说 callHook 的功能，callHook 的作用是触发用户设置的生命周期钩子。</p>\n<p>这个函数有一个需要注意的点，我们可以在 vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi><mi>p</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mi>s</mi><mtext>获得用户设置的生命周期函数（如</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">options获得用户设置的生命周期函数（如vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mord cjk_fallback\">获</span><span class=\"mord cjk_fallback\">得</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">户</span><span class=\"mord cjk_fallback\">设</span><span class=\"mord cjk_fallback\">置</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">生</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">周</span><span class=\"mord cjk_fallback\">期</span><span class=\"mord cjk_fallback\">函</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">如</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>options.created），<strong>但是这里获取到的是一个数组</strong>。（如果你看过 Vue 官方文档中的混入，应该会知道这个玩意）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span>hook</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">[</span>hook<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>handlers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        handlers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>vm<span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hook<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> hook</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>callHook 会遍历对应生命周期钩子名称所有的函数，逐个执行。</p>\n<h2 id=\"初始化inject\"><a class=\"anchor\" href=\"#初始化inject\">#</a> 初始化 inject</h2>\n<h3 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h3>\n<p>很多人可能包括我自己没怎么经常用过 inject/provide，所以先说说这玩意干什么用吧。</p>\n<p>inject/provide，也就是依赖注入，有时候某些深层子组件都需要使用一个方法，但我们很难将其传入，就可以使用依赖注入。</p>\n<p>在 Vue 实例中，使用 provide 选项，指定我们想要提供给后代的数据 / 方法，例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">provide</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">getMap</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getMap</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后在任何后代组件中，使用 inject 选项来接收指定的属性：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'getMap'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>有点像 React 中的 Context 吧。</p>\n<h3 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h3>\n<p>这两个玩意一般是成对出现的，但是在初始化中，我们看的到，先初始化 inject，然后初始化状态，最后才到 provide。</p>\n<p>这样做也是有深意的，后初始化的可以依赖先初始化的，即在 Vue 实例中，<strong>用户可以在 data/props 中使用 inject 注入的内容</strong>。</p>\n<p>我们知道通过 provide 注入的内容可以被所有子孙组件通过 inject 的得到。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initInjections</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">resolveInject</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>inject<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回一个对象，每一项属性都是 inject 的值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 这里其实是通知 defineReactive 函数不要将内容转换成响应式的，保存后再调回来</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Avoid mutating an injected value directly since the changes will be </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">overwritten whenever the provided component re-renders. </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">injection being mutated: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            vm</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们可以看到，在初始化 inject 的过程中，调用了 resolveInject 来获取实例中需要 inject 的值，然后遍历这些值，定义为当前实例的非响应式属性。</p>\n<div class=\"note primary\">\n<p>上面那个警告的意思大体是不要直接改变注入的值，当提供这个值的组件重渲染时，这个值会被更改。</p>\n</div>\n<p>好吧，那我们想知道它的实现原理，就得深入到 resolveInject 这个函数中去找它的代码了。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">resolveInject</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">inject</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Object <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// inject is :any because flow is not smart enough to figure out cached</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> hasSymbol</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">?</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">:</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>inject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// #6574 in case the inject object is observed...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token string\">'__ob__'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">const</span> provideKey <span class=\"token operator\">=</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>from</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">let</span> source <span class=\"token operator\">=</span> vm</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>_provided <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>_provided<span class=\"token punctuation\">,</span> provideKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>_provided<span class=\"token punctuation\">[</span>provideKey<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        source <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span>$parent</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span> <span class=\"token keyword\">in</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token keyword\">const</span> provideDefault <span class=\"token operator\">=</span> inject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>default</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          result<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> provideDefault <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token operator\">?</span> <span class=\"token function\">provideDefault</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token operator\">:</span> provideDefault</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Injection \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" not found</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这代码有一点点长哈，我们一个部分一个部分的来读。首先我先说一下它的基本思想，<strong>它实际上就是使用 inject 配置的 key 从当前组件读取内容，读不到就找他的父组件，然后一层层往上找直到找到内容，x 中（保存为非响应式的属性)</strong>。我感觉有点像作用域链，或者说有点像原型链的查找方式。</p>\n<h2 id=\"初始化状态\"><a class=\"anchor\" href=\"#初始化状态\">#</a> 初始化状态</h2>\n<p>初始化状态呢，自然就是初始化一些我们平时用到的，例如 props、data、methods、computed、watch 之类的东西。</p>\n<p>我们来看代码：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initState</span> <span class=\"token punctuation\">(</span>vm<span class=\"token operator\">:</span> Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  vm<span class=\"token punctuation\">.</span>_watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\">// 用来保存当前组件的所有 watcher</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> opts <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span> <span class=\"token function\">initProps</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">)</span> <span class=\"token function\">initMethods</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>methods<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">initData</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 否则直接观察空对象。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">/* asRootData */</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>computed<span class=\"token punctuation\">)</span> <span class=\"token function\">initComputed</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>computed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>watch <span class=\"token operator\">&amp;&amp;</span> opts<span class=\"token punctuation\">.</span>watch <span class=\"token operator\">!==</span> nativeWatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">initWatch</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>watch<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还是比较易读的，我们可以看到，配置中有什么，他就初始化什么，并且调用对应的初始化函数，代码非常精简。</p>\n<p>初始化顺序为：</p>\n<ol>\n<li>props</li>\n<li>methods</li>\n<li>data</li>\n<li>computed</li>\n<li>watch</li>\n</ol>\n<p><strong>后初始化的可以操作前初始化的</strong>。这个初始化顺序非常符合逻辑，例如我们就可以在 data 中使用 props 了，在 computed 中使用 data。</p>\n<p>接下来我们看一下各个初始化的代码。</p>\n<h3 id=\"初始化props\"><a class=\"anchor\" href=\"#初始化props\">#</a> 初始化 props</h3>\n<p>props 呢，其实就是<strong>父组件提供数据</strong>，子组件在内部通过 props 字段选择自己需要哪些数据，然后 Vue 内部通过子组件的 props 选项将数据筛选出来、再添加到<strong>子组件的上下文</strong>之中。</p>\n<p>像我们常常用数组来指定 props，但其实最后我们需要<strong>将它规格化成为对象</strong>的形式。</p>\n<h4 id=\"规格化props\"><a class=\"anchor\" href=\"#规格化props\">#</a> 规格化 props</h4>\n<p>在初始化 props 之前，实际上在 this._init 里面，在传递配置的时候，Vue 中使用了：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//init.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vm<span class=\"token punctuation\">.</span>$options <span class=\"token operator\">=</span> <span class=\"token function\">mergeOptions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而在 mergeOptions 函数中，有这么一行代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//options.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">normalizeProps</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所以，实际上我们在 initProps 之前，是先做了一步规格化 props 的操作的，我们需要先了解这个函数到底做了什么事情。</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Ensure all props option syntax are normalized into the</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * Object-based format.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">normalizeProps</span> <span class=\"token punctuation\">(</span>options<span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">:</span> <span class=\"token operator\">?</span>Component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> i<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> name</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    i <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      val <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        name <span class=\"token operator\">=</span> <span class=\"token function\">camelize</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        res<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'props must be strings when using array syntax.'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      val <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      name <span class=\"token operator\">=</span> <span class=\"token function\">camelize</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      res<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">isPlainObject</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">?</span> val</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> val <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Invalid value for option \"props\": expected an Array or an Object, </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">but got </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">toRawType</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      vm</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  options<span class=\"token punctuation\">.</span>props <span class=\"token operator\">=</span> res</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码其实干了以下的事情：</p>\n<ol>\n<li>\n<p>首先判断是否有 props 属性，没有就<strong>提前返回</strong>，不用规格化，很好理解。</p>\n</li>\n<li>\n<p>声明一些用到的变量，如 res 用来<strong>保存规格化后的结果</strong>。</p>\n</li>\n<li>\n<p>接下来就是主要逻辑了。检查 props 是否为一个数组，是的话转步骤 4，否则检查是否为对象类型，如果是则转步骤 5，都不是则在非生产环境下的控制台打印警告。</p>\n</li>\n<li>\n<p>是数组，那就遍历数组每一项，检查是否为 string 类型，是的话就将这个 key<strong> 从蛇形命名法转换为驼峰命名法</strong>。并且转化为对象赋值给 res。</p>\n<p>这里为什么要转呢？这是因为我们在模板中父组件向子组件传递数据的时候，在标签中用的是蛇形命名法。</p>\n<p>即 &lt;child user-name={name}/&gt;。</p>\n</li>\n<li>\n<p>如果是对象，那就用 for-in 循环 props，也进行 key 的命名转换、但对值的处理稍有不同。</p>\n</li>\n<li>\n<p>最后将结果覆盖 options.props。</p>\n</li>\n</ol>\n<p>总的来说，它就是将 props 字段规格化为 Object 类型。</p>\n<h4 id=\"本体\"><a class=\"anchor\" href=\"#本体\">#</a> 本体</h4>\n<p>现在才来到我们的初始化 props 的本体。</p>\n<p><strong>通过规格化后的 props 从其父组件传入的 props 数据中</strong>或者<strong>从 new 创建实例时传入的 propsdata 参数中</strong>，筛选出需要的数据存入 vm._props，再在 vm 实例上设置一个代理，实现通过 vm.x 访问 vm._props.x。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">initProps</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span> propsOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> propsData <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>propsData <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_props <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 缓存 props 的 key</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>_propKeys <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> isRoot <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>$parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isRoot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里是让下面的 defineReactive 不用转换成响应式数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> propsOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    keys<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 获取父组件传下来实际的值，进行边界条件的判断和处理</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">validateProp</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> propsOptions<span class=\"token punctuation\">,</span> propsData<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">_props</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置代理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">toggleObserving</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里顺带一提一下 proxy，其实它就是通过定义对应 key 的 getter/setter 来使得它获取到实际上是另外一个地方的值，代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sharedPropertyDefinition <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">get</span><span class=\"token operator\">:</span> noop<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">set</span><span class=\"token operator\">:</span> noop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">proxy</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> Object<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sourceKey</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  sharedPropertyDefinition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">proxyGetter</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>sourceKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  sharedPropertyDefinition<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">proxySetter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>sourceKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> sharedPropertyDefinition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"初始化methods\"><a class=\"anchor\" href=\"#初始化methods\">#</a> 初始化 methods</h3>\n<p>初始化 method 比较简单，主要有两步：<strong>校验方法是否合法和将方法挂载到 vm 中</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">initMethods</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>props</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> methods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Method \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" has type \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">typeof</span> methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" in the component definition. </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Did you reference the function correctly?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          vm</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 如果 props 中已存在这个 key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>props <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">hasOwn</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Method \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" has already been defined as a prop.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          vm</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 如果是内部已经有的实例方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> vm<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isReserved</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Method \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\" conflicts with an existing Vue instance method. </span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Avoid defining component methods that start with _ or $.</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    vm<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">?</span> noop <span class=\"token operator\">:</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>methods<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p>isReserved 是用来检测字符串是否以<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mtext>或</mtext><mtext>开</mtext></msub><mtext>头。在</mtext><mi>V</mi><mi>u</mi><mi>e</mi><mtext>中，</mtext></mrow><annotation encoding=\"application/x-tex\">或_开头。在Vue中，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">或</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord cjk_fallback mtight\">开</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">头</span><span class=\"mord cjk_fallback\">。</span><span class=\"mord cjk_fallback\">在</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">，</span></span></span></span>开头的是对外放出的，_开头一般只在内部使用。</p>\n</div>\n<h3 id=\"初始化data\"><a class=\"anchor\" href=\"#初始化data\">#</a> 初始化 data</h3>\n<p>data 的逻辑其实相对来说还是比较简单的，就是执行 data 所指向的函数，从而得到一个对象，并且检测是否有重名 prop 和 method，没有的话就设置代理并转换成响应式数据。</p>\n<h3 id=\"初始化computed\"><a class=\"anchor\" href=\"#初始化computed\">#</a> 初始化 computed</h3>\n<p>computed 相对复杂一点，首先先说说它的特性。</p>\n<p>我们都知道，计算属性的特点就是有缓存，在依赖的数据没有发生变化的情况下，反复读计算属性，而计算属性函数<strong>并不会反复执行</strong>。</p>\n<p>computed 其实是定义在 vm 上的一个特殊的 getter，它结合了 Watcher 来实现缓存和依赖收集的功能。</p>\n<p>那计算属性是怎么知道自己的依赖值改变了呢？</p>\n<p>它自己有一个 Watcher，当依赖值发生改变，自己的 Watcher 会收到信息，并且将 dirty 属性设为 true，下次读取的时候就重新计算。</p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<p>先说计算属性的原理吧，</p>\n<ol>\n<li>使用 watcher 读取计算属性。</li>\n<li>读取计算属性中的数据、并且使用 Watcher 观察。如果在模板中，就是组件级的 watcher 负责观察，如果在用户自定义 watch 中，就是自定义生成的 watcher 观察。</li>\n<li>当数据发生了变化，则通知计算属性的 watcher 观察数据的变化，同时通知组件的 Watcher 数据发生了变化，准备重新渲染</li>\n<li>计算属性的 Watcher 把自己的 dirty 属性设为 true。</li>\n<li>当重新读区计算属性的值时，如果 dirty 为 true，则重新计算一次。</li>\n</ol>\n<p>计算属性其实是一个 getter，对应有一个 watcher，读取别的数据的时候就会被别的数据收集依赖进 Dep。</p>\n<ul>\n<li>在 SSR (Server Side Render) 下，计算属性只是一个普通的 getter，没有缓存效果。</li>\n</ul>\n<h3 id=\"初始化watch\"><a class=\"anchor\" href=\"#初始化watch\">#</a> 初始化 watch</h3>\n<h3 id=\"初始化provide\"><a class=\"anchor\" href=\"#初始化provide\">#</a> 初始化 provide</h3>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/11/08/Vue/VueNote3/",
            "url": "http://zyczxq.com/2021/11/08/Vue/VueNote3/",
            "title": "深入浅出Vue笔记————实例方法篇",
            "date_published": "2021-11-08T06:28:00.000Z",
            "content_html": "<p>感觉一章节让我对 Vue 内部的原理更加深入的了解了，如果说前面的响应式系统、虚拟 DOM 的实现是 Vue 的精髓之一的话，这部分实例代码的实现让我对 Vue 组件实例的理解更为深刻，深入 Vue 的代码骨架之中。</p>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>Vue 实例中有许多方法，本博客记录这些实例方法的实现原理</p>\n<p>在 Vue 源码中的 src/core/instance/index.js 中，有这么一段代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> initMixin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./init'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> stateMixin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./state'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> renderMixin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./render'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> eventsMixin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./events'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> lifecycleMixin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./lifecycle'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> warn <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../util/index'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Vue</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'production'</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vue is a constructor and should be called with the `new` keyword'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_init</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">initMixin</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span><span class=\"token comment\">// 初始化相关</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">stateMixin</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span><span class=\"token comment\">// 数据相关</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">eventsMixin</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span><span class=\"token comment\">// 事件相关</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">lifecycleMixin</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span><span class=\"token comment\">// 生命周期相关</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">renderMixin</span><span class=\"token punctuation\">(</span>Vue<span class=\"token punctuation\">)</span><span class=\"token comment\">// 渲染相关</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Vue</pre></td></tr></table></figure><p>这里其实是定义了 Vue 的构造函数，然后分别调用 initMixin、stateMixin、eventsMixin 等函数，实际上就是向 Vue 的原型中挂载方法。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initMixin</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"与事件相关的实例方法\"><a class=\"anchor\" href=\"#与事件相关的实例方法\">#</a> 与事件相关的实例方法</h1>\n<p>在上面我们说到，在上面我们调用了 eventsMixin (Vue) 来在 Vue 的原型上挂载方法。使得每个 Vue 实例都能够调用这些方法：</p>\n<p>vm 为某 Vue 实例</p>\n<ul>\n<li>vm.$on</li>\n<li>vm.$off</li>\n<li>vm.$once</li>\n<li>vm.$emit</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eventsMixin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$on</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>想了下，还是不放实现代码了，只说说我读到的一些想法。</p>\n<p>这四个方法的实现实际上有点类似于 Node 中的 EventEmitter，实现方法也有点点类似，但是细节上有些许出入。</p>\n<p>思路大概是这样的，在新建 Vue 实例的时候，会初始化一个对象用来存放事件相关的东西：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vm<span class=\"token punctuation\">.</span>_events <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"vmon\"><a class=\"anchor\" href=\"#vmon\">#</a> vm.$on</h2>\n<p>这个方法用于监听当前实例上的自定义事件，实现代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param &#123;string | Array&lt;string>&#125; event </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param &#123;Function&#125; fn callback</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @description 给传入的 event 注册事件回调</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span>event<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>j<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 防止中途长度改变了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实就是，以事件名为_events 的属性名，将函数注册进去。$on 方法也支持多个事件注册回调。</p>\n<h2 id=\"vmoff\"><a class=\"anchor\" href=\"#vmoff\">#</a> vm.$off</h2>\n<p>这个方法用于移除自定义事件监听器。</p>\n<ul>\n<li>如果没有提供参数，移除所有事件监听器</li>\n<li>只提供了事件参数，移除该事件所有监听器</li>\n<li>同时提供两个参数，则移除对应的</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param &#123;string | Array&lt;string>&#125; event </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param &#123;Function&#125; fn </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @description 移除自定义事件监听器</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">$off</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 第一种情况</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>l <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 第二种情况</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">const</span> cbs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 第三种情况</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">const</span> cbs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">let</span> cb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> cbs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                cb <span class=\"token operator\">=</span> cbs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb <span class=\"token operator\">===</span> fn <span class=\"token operator\">||</span> cb<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">===</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token comment\">//fn 属性，用来下面 once 特殊执行 off，因为 once 注册的事件监听器并不是原来的函数</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    cbs<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里为什么我们还要检测注册的回调的 fn 属性呢？</p>\n<p>因为下面我们就要讲到，once 的实现方式其实是在外<strong>包装</strong>了一下原来传入的回调函数，我们通过将 fn 函数设置为包装后的回调函数的 fn 属性，用来对比是否是对应的监听器。</p>\n<h2 id=\"vmonce\"><a class=\"anchor\" href=\"#vmonce\">#</a> vm.$once</h2>\n<p>和 on 方法的效果差不多，但是只触发一次，触发之后移除。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param &#123;string | Array&lt;string>&#125; event </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param &#123;Function&#125; fn </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @description 监听一个自定义事件，但是只触发一次后就移除</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">$once</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span>fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 解除后执行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        on<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>on<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实我们就是使用了一个函数来包装原回调监听器，执行后移除，并且设置该包装函数的 fn 属性为原回调监听器，和上面 off 的实现原理相呼应。</p>\n<h2 id=\"vmemit\"><a class=\"anchor\" href=\"#vmemit\">#</a> vm.$emit</h2>\n<p>这个函数触发当前实例上的事件。附加参数都会传给监听器回调。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param &#123;string&#125; event </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param &#123;...args&#125; </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @description 触发当前实例上的某个事件，附加参数都会传给监听器回调</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">let</span> cbs <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cbs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i <span class=\"token operator\">=</span> cbs<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    cbs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">handleError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">event handler for </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>event<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"生命周期相关的实例方法\"><a class=\"anchor\" href=\"#生命周期相关的实例方法\">#</a> 生命周期相关的实例方法</h1>\n<p>主要是四个方法：vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi><mtext>、</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">mount、vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>forceUpdate、vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>、</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">nextTick、vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">、</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>destroy。</p>\n<p>其中 vm.<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mi>o</mi><mi>r</mi><mi>c</mi><mi>e</mi><mi>U</mi><mi>p</mi><mi>d</mi><mi>a</mi><mi>t</mi><mi>e</mi><mtext>和</mtext><mi>v</mi><mi>m</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">forceUpdate和vm.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">m</span><span class=\"mord\">.</span></span></span></span>destroy 是在 lifecycleMixin 中挂载到 Vue 构造函数的原型上的。</p>\n<h2 id=\"vmforceupdate\"><a class=\"anchor\" href=\"#vmforceupdate\">#</a> vm.$forceUpdate</h2>\n<p>这个方法的作用是迫使 Vue 实例重新渲染。前面我们也说过 Vue2 的响应式系统，在 Vue2 之中，更新粒度为组件级别，一个组件实例对应一个组件级别 Watcher 实例，实际上，只要调用组件对应的 watcher 的 update 方法即可。</p>\n<h2 id=\"vmdestroy\"><a class=\"anchor\" href=\"#vmdestroy\">#</a> vm.$destroy</h2>\n<p>这个方法的作用很明显，就是完全销毁一个实例。</p>\n<p>它做的事情大概有以下几个：</p>\n<ol>\n<li>先判断是否已经销毁，已经销毁不需重复销毁</li>\n<li>触发 Vue 实例的生命周期 beforeDestroy 钩子。</li>\n<li>清理当前组件实例和父组件之间的联系（Vue 实例的 $children 属性存储了所有子组件）</li>\n<li>销毁实例上的所有 watcher（包括组件级别的 watcher 和用户通过 $watch 方法创建的 watcher）</li>\n<li>给 Vue 实例添加_isDestroyed 属性来表示已经被销毁</li>\n<li>触发 Vue 实例的生命周期 destroyed 钩子。</li>\n<li>移除实例上的所有事件监听器。</li>\n</ol>\n<p>具体就是这七步，然后我们结合源代码来看：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$destroy</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">vm</span><span class=\"token operator\">:</span> Component <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1. 判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_isBeingDestroyed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token comment\">//2. 触发</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'beforeDestroy'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    vm<span class=\"token punctuation\">.</span>_isBeingDestroyed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//3. 清理自己和父组件的联系</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> parent <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>$parent</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>parent<span class=\"token punctuation\">.</span>_isBeingDestroyed <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vm<span class=\"token punctuation\">.</span>$options<span class=\"token punctuation\">.</span>abstract<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>$children<span class=\"token punctuation\">,</span> vm<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//4. 清理组件级别的 watcher（存在_watcher)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_watcher<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>_watcher<span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  \t<span class=\"token comment\">// 清理用户创建的 watcher</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">.</span>_watchers<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>_watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">teardown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// remove reference from data ob</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// frozen object may not have observer.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>__ob__<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>__ob__<span class=\"token punctuation\">.</span>vmCount<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 表示已经被销毁</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    vm<span class=\"token punctuation\">.</span>_isDestroyed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 触发 destroy 钩子函数解绑指令</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    vm<span class=\"token punctuation\">.</span><span class=\"token function\">__patch__</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>_vnode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// fire destroyed hook</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">callHook</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroyed'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 移除所有事件监听器</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    vm<span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// remove __vue__ reference</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span>__vue__ <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">// release circular reference (#6759)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      vm<span class=\"token punctuation\">.</span>$vnode<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"vmnexttick\"><a class=\"anchor\" href=\"#vmnexttick\">#</a> vm.$nextTick</h2>\n<p>它接收一个回调函数作为参数，然后在下次 DOM 更新周期之后执行。</p>\n<p>面向场景：更新了状态后有时需要对新 DOM 做一些操作时。</p>\n<h3 id=\"前置知识\"><a class=\"anchor\" href=\"#前置知识\">#</a> 前置知识</h3>\n<p>在说这个 API 的原理之前，需要先说说 Vue 的一些特性。</p>\n<p>在 Vue 之中，当状态发生变化，会通知依赖这个状态的所有 watcher，然后触发虚拟 DOM 渲染流程。在 watcher 触发渲染这个操作并不是同步的，它是<strong>异步的</strong>。Vue 在内部有一个队列 —— 异步更新队列，每当需要渲染时，就将要渲染的 watcher 推送到这个队列，下一次事件循环再统一清空队列。</p>\n<p>好处就是能够减少重复，组件的 watcher 要是再一轮事件循环中多次收到通知需要渲染，实际上只需一次渲染。</p>\n<p>事件循环的话这里不再仔细说了，前面其他博客也讲过很多次，可以参考我之前的博客。</p>\n<h3 id=\"api本身\"><a class=\"anchor\" href=\"#api本身\">#</a> API 本身</h3>\n<p>这个 API 有几个特性：</p>\n<ul>\n<li>回调执行前反复调用，也只会添加一个任务</li>\n<li>当任务触发，依次执行</li>\n</ul>\n<p>vm.$nextTick 和 Vue.nextTick 是一样的，所以我们直接说 Vue.nextTick 的原理</p>\n<h3 id=\"vue24之前\"><a class=\"anchor\" href=\"#vue24之前\">#</a> Vue2.4 之前</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> callbacks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> pending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">flushCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tpending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> copies <span class=\"token operator\">=</span> callbacks<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  callbacks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>copies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcopies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> microTimerFunc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function-variable function\">microTimerFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>flushCallbacks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextTick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cb<span class=\"token punctuation\">,</span>ctx</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 回调函数和执行环境</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tcallbacks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tpending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">microTimerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码有几个要点：</p>\n<ul>\n<li>pending 变量用于防止反复添加任务到微任务队列中，一轮事件循环只会添加一次。</li>\n<li>Vue2.4 版本之前，nextTick 方法使用微任务，因为微任务优先级较高，可能会出现一些问题</li>\n</ul>\n<h3 id=\"vue24之后\"><a class=\"anchor\" href=\"#vue24之后\">#</a> Vue2.4 之后</h3>\n<p>正所谓在 2.4 之前都使用微任务，后来 Vue 提供了强制使用宏任务的方法。</p>\n<p>具体代码就不贴了，和之前有几个区别：</p>\n<ul>\n<li>利用了一个变量来判断是否使用宏任务</li>\n<li>新增了一个函数 withMacroTask，给回调函数做了一层包装，让更新 DOM 操作推到宏任务队列中。</li>\n<li>优先使用 setImmediate，然后 MessageChannel、setTimeout</li>\n<li>如果浏览器不支持 Promise，则降级成宏任务添加</li>\n</ul>\n<h1 id=\"全局api\"><a class=\"anchor\" href=\"#全局api\">#</a> 全局 API</h1>\n<p>全局 API 和实例方法不太一样，后者是在 Vue 的原型上挂载方法，而前者是直接在 Vue 上挂载方法。</p>\n<p>如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">extend</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/10/20/Vue/VueNote2/",
            "url": "http://zyczxq.com/2021/10/20/Vue/VueNote2/",
            "title": "深入浅出Vue笔记————虚拟DOM篇",
            "date_published": "2021-10-20T06:24:45.000Z",
            "content_html": "<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>Vue 自从 2.0 版本开始引入了虚拟 DOM 技术，而虚拟 DOM 技术也是 React 的核心技术之一，引入了虚拟 DOM 之后，Vue 的初始渲染速度提升了 2～4 倍。</p>\n<p>虚拟 DOM 之所以称为虚拟 DOM，是因为他不是真实的 DOM，而是用 JavaScript 数据结构表示成的<strong>虚拟节点树</strong>，然后使用虚拟节点树进行渲染。</p>\n<p>就是，先生成一个虚拟节点树，然后用它和上一次生成的虚拟节点树进行对比，只渲染不同的部分。</p>\n<p>简单来说，就是<strong>生成 -&gt; 对比 -&gt; 渲染</strong>。</p>\n<h1 id=\"为什么引入虚拟dom\"><a class=\"anchor\" href=\"#为什么引入虚拟dom\">#</a> 为什么引入虚拟 DOM？</h1>\n<p>在前面一篇讲 Vue 的变化侦测的博客里，也提到过。React 的变化侦测是比较暴力的，它不知道哪些地方需要变化，就只能通过虚拟 DOM 的比对，然后销毁、重建。</p>\n<p>但其实在 Vue 中，Vue 是知道哪些状态发生了变化的。Vue 可以通过更细粒度的感知来更新视图，不需要进行比对。并且，Vue 在更新 DOM 的时候是异步执行的：当侦听到数据变化，<strong>Vue 会开启一个队列，并且缓冲同一事件循环中发生的所有变更</strong>。（当数据变化，会通知对应的所有依赖 Watcher 实例更新）当一个 watcher 被多次触发，只会被推入到队列一次，能够减少不必要的计算和 DOM 操作。在下一个的事件循环 tick 中，Vue 刷新队列且执行实际（<strong>已去重</strong>）工作。</p>\n<p>看起来并没有什么引入虚拟 DOM 的必要，性能上似乎也还好。但是这么设计有个代价，每个状态对应一个 Watcher 实例来观察，内存开销以及依赖追踪开销在大型项目之中非常的大。</p>\n<p>于是，Vue2.0 就选择了一个中等粒度的折中方案：<strong>引入虚拟 DOM</strong>。把 Watcher 实例观察的级别从状态改成组件级别，也就是说当状态发生变化的时候，只能通知到组件级别。然后组件内部通过虚拟 DOM 去进行比对和渲染。</p>\n<p>而且这个改动似乎也不大，因为前面的博客我们讲到，Watcher 只是一个中介，调整外界到 Watcher 的粒度，应该是对响应式核心的改动不大。</p>\n<h1 id=\"vue中的虚拟dom\"><a class=\"anchor\" href=\"#vue中的虚拟dom\">#</a> Vue 中的虚拟 DOM</h1>\n<p>在 Vue 之中，使用模板来描述状态和 DOM 的映射。Vue 会通过模板编译，将模板转换成渲染函数，通过执行这个函数就能够得到一个虚拟节点树。</p>\n<p>每次属性发生变化，会调用组件渲染函数<strong>生成</strong>新的虚拟节点树，然后将新生成的虚拟节点树与上一次渲染视图使用的旧虚拟节点树进行<strong>对比</strong>（<strong>diff</strong>），再把要更新的地方进行 DOM 操作（<strong>patch</strong>）。最后缓存这一次渲染视图使用的虚拟节点树的 VNode</p>\n<p><img src=\"%E6%B5%81%E7%A8%8B.png\" alt=\"流程\" title=\"VNode，即Virtual Node\" /></p>\n<h2 id=\"vnode\"><a class=\"anchor\" href=\"#vnode\">#</a> VNode</h2>\n<p>在虚拟 DOM 中，VNode 即虚拟节点，在 Vue 中存在一个 VNode 类，用来实例化不同类型的 vnode 实例来表示不同类型的 DOM 节点。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tag<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> elm<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> componentOptions<span class=\"token punctuation\">,</span> asyncFactory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>VNode 实际上就是一个 JavaScript 对象。在渲染视图之中，Vue 会先创建 VNode，然后再使用它去生成真实 DOM，然后插入到页面渲染视图。</p>\n<p>VNode 的类型有以下几种：</p>\n<ul>\n<li>注释节点</li>\n<li>文本节点</li>\n<li>元素节点</li>\n<li>组件节点</li>\n<li>函数式组件</li>\n<li>克隆节点</li>\n</ul>\n<h2 id=\"patch\"><a class=\"anchor\" href=\"#patch\">#</a> patch</h2>\n<p>patch 算法又叫 patching 算法，它主要是通过对比新旧 vnode 找到需要更新的节点进行更新。本质上其实就是用 JavaScript 的运算速度换 DOM 操作的执行成本。</p>\n<p>主要是两个算法：<strong>patchVnode</strong> 和<strong> updateChildren</strong>。</p>\n<p>patch 算法的运行流程如下：</p>\n<ol>\n<li>检测 oldVnode 是否存在。若不存在，则使用 vnode 创建节点插入视图。存在则进入下一步</li>\n<li>检测 oldVnode 和 vnode 是否是同一个节点。如果是则使用 patchVnode 进行更详细的对比与更新操作。</li>\n<li>若第二步不是，则使用 vnode 创建真实节点并插入到视图中旧节点的旁边，并将视图中的旧节点删除</li>\n</ol>\n<h2 id=\"patchvnode\"><a class=\"anchor\" href=\"#patchvnode\">#</a> patchVnode</h2>\n<p>是同一个节点的情况下，会进入该算法进行更详细的对比和更新，patchVnode 的算法流程大致如下：</p>\n<ol>\n<li>检测 vnode 与 oldVnode 是否完全一样？一样则退出，否则 2</li>\n<li>vnode 和 oldVnode 是静态节点？是则退出，否则 3</li>\n<li>vnode 有 text 属性？没有则代表是元素节点，有则检查 oldVnode 和 vnode 文本是否相同，不同就用 vnode 的文本替换真实 DOM 节点的内容否则 4</li>\n<li>如果 vnode 和 oldVnode 都存在子节点，且子节点不相同，就进入 updateChildren。否则进入 567 步逐个检测</li>\n<li>如果只有 vnode 子节点存在，则清空 DOM 中的文本并将 vnode 的子节点添加到 DOM 中。</li>\n<li>如果只有 oldVnode 存在子节点，则清空 DOM 中的子节点</li>\n<li>如果 oldVnode 中有文本，则清空 DOM 中的文本</li>\n</ol>\n<p>总而言之，尽量 vnode 为准来更新视图。</p>\n<h2 id=\"updatechildren\"><a class=\"anchor\" href=\"#updatechildren\">#</a> updateChildren</h2>\n<p>更新子节点，也是 diff 的核心。主要是 4 种操作：更新节点、新增节点、删除节点、移动节点。并且在循环中进行比对</p>\n<ol>\n<li>\n<p>新增子节点。</p>\n<p>这个好理解，当没有在 oldChildren 中找到本次循环所指向的新子节点的节点，就新建一个节点插入到所有未处理节点的前面</p>\n</li>\n<li>\n<p>更新子节点。同一个节点且同一位置</p>\n</li>\n<li>\n<p>移动子节点。同一个节点，但是位置不同，则把需要移动的节点移动到所有未处理节点的前面。</p>\n</li>\n<li>\n<p>删除子节点。本质上是删除哪些 oldChildren 存在但 newChildren 不存在的节点。</p>\n</li>\n</ol>\n<p>为了实现两端向中间遍历（即分辨出哪些节点被处理过 or 未处理过），这里 vue 用了四个变量来计算已处理和未处理的节点，oldStartIdx、oldEndIdx、newStartIdx、newEndIdx。分别表示 oldChildren 开始位置的下标和结束位置的下标、newChildren 开始位置的下标和结束位置的下标。</p>\n<p>因为查找对应节点这个过程是通过循环，比较耗时，因此 vue 对这个过程做了个优化策略，<strong>也就是双端对比</strong>。同时从新旧 children 的两端开始比较，借助 key 值找到可复用的节点，再进行相关操作。</p>\n<p>大概有四个快捷查找方式：</p>\n<ul>\n<li>新前与旧前</li>\n<li>新后与旧后</li>\n<li>新后与旧前</li>\n<li>新前与旧后</li>\n</ul>\n<div class=\"note primary\">\n<p>新前指的是 newChildren 中所有未处理节点的第一个节点，新后指的是 newChildren 中所有未处理节点的最后一个节点。旧前与旧后以此类推</p>\n</div>\n<p>其实就是顾名思义，先通过这四个快捷查找试探，如果找到了就不必循环查找，如果没找到才循环查找。</p>\n<p>即通过对比新前 / 后与旧前 / 后位置的节点，看看是不是同一个节点，是则不用循环查找。这样可以减少移动节点的次数和减少不必要的性能损耗。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>虚拟 DOM 中最关键的部分就是 patch。通过 patch 可以对比新旧两个虚拟 DOM，并只针对发生了变化的节点进行更新视图的操作。</p>\n<p>虚拟 DOM 也是 React 的核心技术之一。自从 Vue2.0 引入虚拟 DOM 后，初始渲染速度比 Vue1.0 提升了 2～4 倍，且大大降低了内存消耗。</p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<p>刘博文著的《深入浅出 Vue.js》</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/401340016\">diff 算法深入一下？ - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/149972619\">聊一聊 Diff 算法（React、Vue2.x、Vue3.x） - 知乎 (zhihu.com)</a></p>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/10/15/Vue/VueNote/",
            "url": "http://zyczxq.com/2021/10/15/Vue/VueNote/",
            "title": "深入浅出Vue笔记————响应式系统篇",
            "date_published": "2021-10-15T09:30:54.000Z",
            "content_html": "<p>参考资料 ——《深入浅出 Vue.js》刘博文著</p>\n<p>前四章，讲述变化侦测的笔记。</p>\n<h1 id=\"概述\"><a class=\"anchor\" href=\"#概述\">#</a> 概述</h1>\n<p>Vue 的变化侦测属于 “推”，当状态变化时，Vue 可以知道是哪些状态变化了。当状态变化了，它会向所有依赖这个状态的视图（或者说组件 / DOM 节点）发出更新通知</p>\n<p>在 Vue1.x 之中，Vue 对每个状态都进行依赖追踪，更新粒度相当的细，但是也带来了比较大的内存开销。</p>\n<p>在 Vue2.x 之中，引入了虚拟 DOM 并且把更新粒度调整到了组件级别（比状态级别要粗），但是也大大降低了依赖数量及依赖追踪所消耗的内存。</p>\n<div class=\"note primary\">\n<p>尽管 Vue 调整到了组件级别，也仍然要比 React 更细：React 的做法是粗放的，它使用虚拟 DOM，若检查到该组件类型变化或数据变化，它会把以该组件为根的整个子树销毁重建或更新渲染。由于更新过程是同步的，于此同时也带来了性能问题，后来 React16 便引入了 React fiber 来解决这个问题。</p>\n<p>至于为什么 Vue 不用，因为 Vue 更新 DOM 是走的异步更新队列（与 React 的 this.setState 异曲同工），暂时还没有出现严重的性能问题。</p>\n</div>\n<h1 id=\"具体追踪\"><a class=\"anchor\" href=\"#具体追踪\">#</a> 具体追踪</h1>\n<p>追踪对象变化的方式有二：</p>\n<ul>\n<li>Object.defineProperty</li>\n<li>Proxy（ES6）</li>\n</ul>\n<p>在 Vue1.x 及 Vue2.x 之中，用的是前者。而在 Vue3.x 之中，用的是后者。</p>\n<p><strong>在 getter 中收集依赖，在 setter 中触发依赖</strong>。就是说，先收集依赖，知道某个属性都在哪些地方被用上，然后当属性发生变化时，通知这些地方进行更新。</p>\n<h2 id=\"dep存储依赖的地方\"><a class=\"anchor\" href=\"#dep存储依赖的地方\">#</a> Dep—— 存储依赖的地方</h2>\n<p>既然说到依赖收集，那么我们就需要一个地方用来管理依赖。</p>\n<p><strong>Vue 之中封装了一个 Dep 类，专门用于管理依赖</strong>。这个类可以用来收集、删除依赖、或者向依赖发出通知。</p>\n<h2 id=\"watcher依赖类型\"><a class=\"anchor\" href=\"#watcher依赖类型\">#</a> Watcher—— 依赖类型</h2>\n<p>依赖收集好了，当属性发生变化时，就要向对应的依赖发出通知。但是依赖有很多种，他们不是统一的，可能是开发者写的一个 watch，也可能是在模板里面用，为了统一这个依赖，我们抽象出一个处理这个问题的类，这个类就叫做<mark> watcher</mark></p>\n<p>依赖收集阶段，我们只收集这个封装好的类的实例，通知也只通知这个实例，然后它再负责通知具体依赖。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm<span class=\"token punctuation\">,</span>expOrFn<span class=\"token punctuation\">,</span>cb</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm <span class=\"token operator\">=</span> vm<span class=\"token punctuation\">;</span><span class=\"token comment\">// 对应的 vue 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getter <span class=\"token operator\">=</span> <span class=\"token function\">parsePath</span><span class=\"token punctuation\">(</span>expOrFn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行 this.getter ()，可以读取 data.a.b.c 的内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cb <span class=\"token operator\">=</span> cb<span class=\"token punctuation\">;</span><span class=\"token comment\">// 更新时要调用的方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 利用 window.target 作中转，触发对象属性的 getter，getter 中自然会将 window.target 收集到对应的 dep 实例</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    window<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    window<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> oldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vm<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 更新，传入新值和旧值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当某个属性的 getter 被触发时，会执行 Watcher 实例的 get 方法进行依赖收集。</p>\n<p>当某个属性改变（触发 setter 时），会将对应的 Dep 实例中收集到的依赖逐个通知，即通知 Watch 实例触发 update 方法。</p>\n<h2 id=\"observer定义响应式对象\"><a class=\"anchor\" href=\"#observer定义响应式对象\">#</a> Observer—— 定义响应式对象</h2>\n<p>通过前面的 API，可以侦测到数据的变化，不过有时候会存在对象嵌套的现象，于是 Vue 封装一个 Observer 类。</p>\n<p><strong>这个类的作用是将一个对象内所有属性都转换成 getter/setter 的形式，然后追踪他们的变化</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 传入一个对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 数组的监听解决方案下面会说</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  * 当参数为 object 时被调用</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">defineReactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> val <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 递归对象子属性</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">let</span> dep <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      dep<span class=\"token punctuation\">.</span><span class=\"token function\">depend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">===</span> newVal<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      val <span class=\"token operator\">=</span> newVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      dep<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当 data 中的属性发生变化时，这个属性对应的依赖就会收到通知。</p>\n<p>而由于 Object.defineProperty 这个 API 本身的问题，<strong>无法追踪新增的属性和删除的属性，也无法追踪到数组的修改</strong>，而且它对于深层对象需要递归进行遍历，性能上不是那么的好。因此后续便使用的 ES6 的 Proxy 来进行替代。</p>\n<h1 id=\"vue2中响应式的缺点及解决方案\"><a class=\"anchor\" href=\"#vue2中响应式的缺点及解决方案\">#</a> Vue2 中响应式的缺点及解决方案</h1>\n<h3 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<p>Vue2 使用的是 Object.defineProperty 来进行数据劫持，也就是说，<strong>变化侦测的方式是通过 getter/setter 实现的</strong>。</p>\n<p>那么就会存在以下两个问题（刚刚也提到了）：</p>\n<ul>\n<li>\n<p>无法检测属性的添加与移除</p>\n<p>因为在初始化时 Vue 对每个属性进行 getter/setter 转化，初始化时不存在的话就无法转化，自然也不是响应式的。</p>\n</li>\n<li>\n<p>无法检测数组的变动，如使用 push/pop 方法改变，或者利用索引直接设置、修改数组长度之类的变动。</p>\n<p>因为这些方法并不会触发 setter，自然也就无从监听了。</p>\n</li>\n</ul>\n<h3 id=\"解决方案\"><a class=\"anchor\" href=\"#解决方案\">#</a> 解决方案</h3>\n<p>前者的解决方案较简单：<strong>Vue 提供了一个 Vue.set (object,propertyName,value) 方法用于向嵌套对象添加响应式属性</strong>。</p>\n<p>后者的解决方案就稍微复杂一点。Vue2 的解决办法是：<strong>将常用的数组方法进行重写，从而覆盖原生的数组方法 (push,pop,shift,unshift,splice,sort,reverse)</strong>。</p>\n<h3 id=\"侦测数组的解决方案细节\"><a class=\"anchor\" href=\"#侦测数组的解决方案细节\">#</a> 侦测数组的解决方案细节</h3>\n<p>像上面所说的一样，<strong>首先新建一个以 Array.prototype 为原型的对象（伪数组原型，下面我们称之为拦截器），然后将其覆盖到要定义为响应式数组的原型上</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arrayProto <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> arrayMethods <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>arrayProto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token string\">'push'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'pop'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'shift'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'unshift'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'splice'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'sort'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'reverse'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">method</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 缓存原始方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> arrayProto<span class=\"token punctuation\">[</span>method<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>arrayMethods<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">value</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span> <span class=\"token function\">mutator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">original</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">enumerable</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>arrayMethods<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./array'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> hasProto <span class=\"token operator\">=</span> <span class=\"token string\">'__proto__'</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> arrayKeys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>arrayMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">const</span> augment <span class=\"token operator\">=</span> hasProto <span class=\"token operator\">?</span> protoAugment <span class=\"token operator\">:</span> copyAugment<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">augment</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> arrayMethods<span class=\"token punctuation\">,</span> arrayKeys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">protoAugment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> keys</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\ttarget<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">copyAugment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> keys</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>l <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">def</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key <span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note primary\">\n<p>这里为什么不直接覆盖 Array.prototype 呢？因为我们不希望直接覆盖全局，尽可能的不向外污染内部的设计，所以使用覆盖响应式对象的原型来代替。</p>\n</div>\n<p>顺带一提，如果浏览器不支持_ _proto__来访问对象的原型，就<strong>直接将这些重写方法设置到被侦测的数组上</strong>（因为原型屏蔽的原因，只有对象自身不存在该方法才按照原型链向上查找）。</p>\n<p><strong>然后，还需要进行依赖收集。Array 在 getter 中收集依赖，在拦截器中触发依赖</strong>（当你调用方法修改数组时，实际上是调用拦截器的方法）。</p>\n<p>在 Vue.js 中，Array 的依赖存放在 Observer 中（对象是存在定义响应式对象的那个函数中，即 defineReactive），然后将 Observer 实例挂载到对应数组实例上，拦截器就能够访问 Observer 实例中的 dep 了。</p>\n<div class=\"note primary\">\n<p>之所以存在那里，是为了让 getter 和拦截器都可以访问到依赖。</p>\n</div>\n<p>通过覆盖，我们就也能知道数组自身的变化了，不过光是这样还不够，对于数组之中的元素我们也需要进行侦测。于是 Vue 中还会进行一次循环，将数组的每个元素通过 Observer 进行转化。同时对新增的元素也进行转化。</p>\n<h1 id=\"vue3中的更改\"><a class=\"anchor\" href=\"#vue3中的更改\">#</a> Vue3 中的更改</h1>\n<p>后来 Vue3 使用了 ES6 的 Proxy 进行重写响应式系统，不仅能够监听到对象属性的增加与删除，同时也能够监听数组的变化。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>总的来说，分为几个关键词：<strong>数据劫持（Vue3 是数据代理）、依赖收集、发布 / 订阅</strong>。</p>\n<ul>\n<li>\n<p>数据劫持。Vue 之中使用 Observer 类，把一个对象的所有属性转换成 getter/setter。</p>\n</li>\n<li>\n<p>依赖收集。</p>\n<p>简单来说，<strong>对象和数组都是在 getter 中进行依赖收集，但是对象在 setter 中触发依赖，而数组在拦截器中触发依赖</strong>。因此，对象将依赖保存在 defineReactive 中，而数组将其保存在 Observer 实例中，并且将该 Observer 实例存放到数组上。</p>\n<p>依赖收集在 Dep 之中，依赖的类型则是 Watcher 实例。当外界某个地方依赖某个数据，通过 Watcher 读取数据时。新建的时候触发对应数据的 getter，通过<strong> window.target</strong> 作为中转，在触发数据 getter 时收集到 Dep 实例中。</p>\n</li>\n<li>\n<p>发布 / 订阅模式。依赖收集的时候建立<strong>数据 - Watcher</strong> 的对应关系其实就是订阅，当数据发生变化（数据的 setter 方法被调用），则会通过 dep.notify 通知对应的所有依赖（对应的所有 Watcher 实例），然后 Watcher 实例再通过自己的 update 方法通知外界进行更新。</p>\n</li>\n</ul>\n<p>前面说过，在 Vue1.x 之中，更新粒度是属性级别的，即一个属性对应一个 Watcher 实例。</p>\n<p>但在 Vue2.x 之中，更新粒度是组件级别的，<strong>即一个组件实例对应一个组件级的 Watcher 实例 (实际上在组件内部用户可以通过 $watch 方法创建 watcher)</strong>。一个组件可能依赖很多数据，这些数据对应的 Dep 都收集了这个 Watcher 实例，在数据变化的过程中，只要一个数据变化，都会引起这个组件的重新渲染。</p>\n<div class=\"note primary\">\n<p>不同数据的 Dep 可能收录同一个 Watcher 实例，数据的 Dep 可收录多个 Watcher 实例。（多对多）</p>\n</div>\n<p><img src=\"Vue%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E5%85%B3%E7%B3%BB%E5%9B%BE.jpg\" alt=\"Vue变化侦测关系图\" title=\"如图所示\" /></p>\n<h1 id=\"qa\"><a class=\"anchor\" href=\"#qa\">#</a> Q&amp;A</h1>\n<h2 id=\"简述vue的响应式原理\"><a class=\"anchor\" href=\"#简述vue的响应式原理\">#</a> 简述 Vue 的响应式原理？</h2>\n<p>主要是三个关键词，数据劫持、依赖收集、发布订阅模式。Vue 通过 Observer 类将对象转化成 getter/setter，将数组的原型用拦截器覆盖，都在 getter 中收集依赖存放到 Dep 实例中。对象在 setter 中通知依赖更新，而数组在拦截器中通知依赖。依赖就是 Watcher 实例，外界通过依赖读取数据，当数据发生变化时通知依赖，依赖再通知外界进行更新。</p>\n<h2 id=\"vue2响应式原理的缺点\"><a class=\"anchor\" href=\"#vue2响应式原理的缺点\">#</a> Vue2 响应式原理的缺点？</h2>\n<p>Vue2 中使用的是 Object.defineProperty 进行数据劫持，这个 API 对对象的每个属性进行遍历转化，因此 Vue2 无法监听新增 / 删除的属性。同时该响应式基于数据改变触发 setter 的基础，而数组的修改方法不触发 setter，需要进行重写覆盖。</p>\n",
            "tags": [
                "Vue"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/29/diary/",
            "url": "http://zyczxq.com/2021/09/29/diary/",
            "title": "一点碎碎念",
            "date_published": "2021-09-29T09:54:31.000Z",
            "content_html": "<p>2021.9.29</p>\n<p>洗澡的的时候发呆，突然想起来，今年还发生了挺多事情的。</p>\n<p>先是年初的时候，大病一场，住院住了十多天，每天躺在病床上输液，当时跨年那一晚，我还在住院（因为身体太难受，当晚我还吐了），女朋友来照顾我（不得不说，有个伴侣就是好啊～）。好像是 1 月 5 号出院的吧，又面临着期末考试，当时最近的一场考试是 1 月 10 日。</p>\n<p><img src=\"%E8%80%83%E8%AF%95%E5%AE%89%E6%8E%92.png\" alt=\"考试安排\" title=\"当时的考试安排\" /></p>\n<p>因为生病，大三上整个学期的下半学期几乎是没有听课。整门课程有一半的东西还没学，而且前半部分学的也不是特别牢，我又不想申请缓考，这就导致了：<strong>出院的时候我只有三天的时间去应付最近的一门考试《编译原理》，还是最难的那一门，而且后面还有很多门一半没学的课程在等着我</strong>。</p>\n<p>因为住院养成的生物钟（早上六点半醒），让我 1.6-1.19 那段时间几乎是早上六点多醒，七点多起准备去图书馆学习，晚上学到十点多再回宿舍，丝毫不敢松懈，学到脑子觉得疲劳了也还在不断的提自己的效率。</p>\n<p>那两周真的是煎熬，我也不知道怎么熬过来的。仔细想想，那段时间几乎是我最拼的时候了：心无旁骛、满脑子只有知识点，不断的从书本、ppt 汲取知识，转化成自己的知识结构，再输出到试卷上。</p>\n<p><img src=\"%E6%88%90%E7%BB%A9.png\" alt=\"成绩\" title=\"最终的考试成绩\" /></p>\n<p>最终的结果其实还挺出乎我的意料的，准备时间最少、最难的课程编译原理我卷面分竟然考了 96，其他课程的成绩也还不错，当然比起大二的时候绩点就差了很多。</p>\n<p>考完试之后，我整个人也放松了许多。</p>\n<hr />\n<p>今年第二个阶段自然是春招了。3 月份的时候春招被挂麻了（自尊心受挫）。</p>\n<p>然后知耻而后勇，3 月 - 7 月那段时间一直在努力，强度虽然没有一月份准备考试那么强，但是也有一月份那时候的一半强度左右吧，每天下午学习学习，都说学习是个螺旋式上升的过程，那段时间我算是体会到了。理论看不懂，实践不会，也不知道该如何调整方向，不断撞瓶颈，突破，然后继续遇到新的瓶颈，迷茫，循环往复。</p>\n<p>所幸的是，我热爱编程，虽然学习的过程很苦，很枯燥，我还是坚持下来了。</p>\n<p>我还记得，当时的我因为春招（暑假实习）失利，一直处于一个非常卑微的状态。直到突然脉脉上某个字节 hr 找我，让我试试抖音部门（一开始本来她是找社招 3-5 年的，我说我是校招，然后她说加个微信，迟些校招岗位通知我）。我有点害怕，当时对这个部门里的人都抱着一种憧憬的感情，我觉得自己的能力还没有达到，很犹豫，但是我想想，还是决定拼一把。</p>\n<p>后来她最快的速度帮我安排了面试，也最快告诉我结果，本来我是抱着积攒面试经验的心态来面的，但是随着一轮轮面试的通过，我开始期待，我是不是有机会拿到字节抖音的 offer，后来 7.15 的时候知道自己面试过了，我简直是激动的无以复加，当时我和我女朋友在一起，直接拉着她一起激动了一整天。</p>\n<p>看到意向书的那一刻更是觉得整个世界的色彩都明媚了许多。仔细想想，如果不是她的话，我也许也不敢投字节抖音，我本来是打算投一些没那么核心的部门的，也就不会在秋招刚开始就给自己下了一剂猛药了，现在想起来还是特别的感谢那个字节 hr。</p>\n<hr />\n<p>直到今天（9.29），回想起之前的经历已经没有当初的悸动了，心情也趋于平淡，这些经历当初有多苦我已经不太记得了，我不希望自己忘记，希望我能够继续坚持学习下去，明年这个时候再来看看对比现在的自己又进步了多少，共勉！</p>\n",
            "tags": []
        },
        {
            "id": "http://zyczxq.com/2021/09/28/medical/waike52/",
            "url": "http://zyczxq.com/2021/09/28/medical/waike52/",
            "title": "第五十二篇 尿路结石",
            "date_published": "2021-09-28T13:30:54.000Z",
            "content_html": "<h1 id=\"第五十二篇-尿路结石\"><a class=\"anchor\" href=\"#第五十二篇-尿路结石\">#</a> 第五十二篇 尿路结石</h1>\n<h2 id=\"一-概述\"><a class=\"anchor\" href=\"#一-概述\">#</a> 一、概述</h2>\n<h3 id=\"一-尿路结石的形成机制\"><a class=\"anchor\" href=\"#一-尿路结石的形成机制\">#</a> (一)  尿路结石的形成机制：</h3>\n<p>肾钙化斑、过饱和结晶、结石基质、晶体抑制物质、异质促进成核学说是结石形成的基本学说</p>\n<h3 id=\"二-结石的病因\"><a class=\"anchor\" href=\"#二-结石的病因\">#</a> (二)  结石的病因：</h3>\n<p>\\1.    代谢异常：</p>\n<p>①　形成尿结石的物质排出增加；</p>\n<p>②　尿 pH 改变；</p>\n<p>③　尿中抑制晶体形成和聚集的物质减少</p>\n<p>\\2.    局部病因：</p>\n<p>尿路梗阻、感染和尿路存在异物均是诱发结石形成的局部因素</p>\n<p>\\3.    药物相关因素：</p>\n<p>一类为尿液的浓度高而溶解度比较低的药物；另一类为能够诱发结石形成的药物</p>\n<h3 id=\"三-尿结石成分及性质\"><a class=\"anchor\" href=\"#三-尿结石成分及性质\">#</a> (三)  尿结石成分及性质</h3>\n<p>\\1.    草酸钙：硬，粗糙，不规则，棕褐色；X 线阳性</p>\n<p>\\2.    磷酸钙：脆，粗糙，不规则，灰白色；X 线阳性</p>\n<p>\\3.    尿酸：硬，光滑，类圆，黄色；X 线阴性</p>\n<p>\\4.    胱氨酸：光滑，淡黄色，蜡样外观；X 线阴性</p>\n<h3 id=\"四-病理生理\"><a class=\"anchor\" href=\"#四-病理生理\">#</a> (四)  病理生理</h3>\n<p>\\1.    尿路结石在肾和膀胱内形成</p>\n<p>\\2.    肾结石常先发生在肾盏，由于结石使肾盏颈部梗阻，会引起肾盏积液或积脓</p>\n<p>\\3.    鹿角形结石</p>\n<p>\\4.    结石常停留或嵌顿于输尿管三个生理狭窄处</p>\n<h2 id=\"二-上尿路结石\"><a class=\"anchor\" href=\"#二-上尿路结石\">#</a> 二、上尿路结石</h2>\n<h3 id=\"一-临床表现\"><a class=\"anchor\" href=\"#一-临床表现\">#</a> (一)  临床表现</h3>\n<table>\n<thead>\n<tr>\n<th>疼痛</th>\n<th>1)     肾绞痛  ①　 肾区剧烈绞痛伴大汗   ②　 辗转不安，恶心，呕吐   ③　 沿输尿管走行放射  2)     腰部钝痛：见于肾盂不活动大结石</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>血尿</td>\n<td>肉眼血尿  镜下血尿</td>\n</tr>\n<tr>\n<td>恶心、呕吐</td>\n<td></td>\n</tr>\n<tr>\n<td>膀胱刺激症状</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二-诊断\"><a class=\"anchor\" href=\"#二-诊断\">#</a> (二)  诊断</h3>\n<p>\\1.    病史和体检</p>\n<p>\\2.    实验室检查</p>\n<p>①　尿：尿常规，24 小时尿钙和尿酸</p>\n<p>②　血：肾功能检查，血钙，磷，尿酸</p>\n<p>\\3.    影像学检查</p>\n<p>①　B 超</p>\n<p>②　KUB、IVP</p>\n<p>③　CT：对 X 线不显影结石 / 难以确定的结石</p>\n<p>\\4.    内镜检查： 膀胱镜 / 输尿管镜</p>\n<h3 id=\"三-治疗\"><a class=\"anchor\" href=\"#三-治疗\">#</a> (三)  治疗</h3>\n<p>对尿石症的治疗必须实施病人个体化治疗，有时需要综合各种治疗方法</p>\n<h4 id=\"1-病因治疗\"><a class=\"anchor\" href=\"#1-病因治疗\">#</a> \\1.    病因治疗</h4>\n<p>①　甲状旁腺瘤：手术切除</p>\n<p>②　解除尿路梗阻</p>\n<h4 id=\"2-药物治疗\"><a class=\"anchor\" href=\"#2-药物治疗\">#</a> \\2.    药物治疗</h4>\n<p>①　药物排石：结石 &lt; 0.6 cm、表面光滑、结石以下尿路无梗阻</p>\n<p>②　药物溶石：尿酸结石用枸橼酸氢钾钠、碳酸氢钠碱化尿液，口服别嘌呤醇；胱氨酸结石治疗需碱化尿液，使 pH&gt;7.8，摄入大量液体</p>\n<p>③　控制感染：感染性结石需控制感染，口服氯化铵酸化尿液，应用脲酶抑制剂</p>\n<p>④　大量喝水</p>\n<p>⑤　肾绞痛：解痉、止痛。非甾体类镇痛抗炎药物及阿片类镇痛药；M 型胆碱受体阻断剂、钙通道阻滞剂、黄体酮等</p>\n<h4 id=\"3-体外冲击波碎石eswl\"><a class=\"anchor\" href=\"#3-体外冲击波碎石eswl\">#</a> \\3.    体外冲击波碎石（ESWL）</h4>\n<ol>\n<li>\n<p>概念：通过 X 线或 B 超对结石进行定位，利用高能冲击波聚焦后作用于结石，使结石裂解，直至粉碎成细砂，随尿液排出体外</p>\n</li>\n<li>\n<p>禁忌证：</p>\n</li>\n</ol>\n<p>①　结石的远端梗阻</p>\n<p>②　急性尿路感染</p>\n<p>③　肾功能不全</p>\n<p>④　严重的内科疾病</p>\n<p>⑤　妊娠，安装心脏起搏器</p>\n<ol start=\"3\">\n<li>并发症：</li>\n</ol>\n<p>①　血尿，感染，肾绞痛</p>\n<p>②　碎石后梗阻 ——“石街”</p>\n<p>③　肾脏损伤（碎石间隔 10～14 天）</p>\n<h4 id=\"4-微创手术治疗\"><a class=\"anchor\" href=\"#4-微创手术治疗\">#</a> \\4.    微创手术治疗</h4>\n<ol>\n<li>\n<p>经皮肾镜碎石、取石</p>\n</li>\n<li>\n<p>输尿管镜碎石、取石</p>\n</li>\n<li>\n<p>输尿管软镜碎石、取石</p>\n</li>\n</ol>\n<h4 id=\"5-腹腔镜输尿管切开取石及开放手术治疗open-surgery\"><a class=\"anchor\" href=\"#5-腹腔镜输尿管切开取石及开放手术治疗open-surgery\">#</a> \\5.    腹腔镜输尿管切开取石及开放手术治疗（open surgery）</h4>\n<h3 id=\"四-特殊上尿路结石的治疗\"><a class=\"anchor\" href=\"#四-特殊上尿路结石的治疗\">#</a> (四)  特殊上尿路结石的治疗</h3>\n<p>双侧上尿路结石的手术治疗原则</p>\n<p>\\1.    双侧输尿管结石，应尽可能同时解除梗阻</p>\n<p>\\2.    一侧肾结石，另一侧输尿管结石时，先处理输尿管结石</p>\n<p>\\3.    双侧肾结石时，在尽可能保留肾的前提下，先处理容易取出且安全的一侧</p>\n<p>\\4.    孤立肾上尿路结石或双侧上尿路结石引起急性完全性梗阻无尿时，一旦诊断明确，只要病人全身情况许可，应及时施行手术</p>\n<h3 id=\"五-预防\"><a class=\"anchor\" href=\"#五-预防\">#</a> (五)  预防</h3>\n<p>\\1.    大量饮水</p>\n<p>\\2.    调节饮食：草酸盐结石的病人应限制浓茶、菠菜、番茄、芦笋、花生等摄入。高尿酸的病人应避免高嘌呤食物如动物内脏</p>\n<p>\\3.    还应限制钠盐、蛋白质的过量摄入，增加水果、蔬菜、粗粮及纤维素摄入</p>\n<p>\\4.    特殊性预防：草酸盐结石病人可口服维生素 B6；酸结石病人可口服别嘌呤醇和碳酸氢钠；尿路梗阻、尿路异物、尿路感染</p>\n<h2 id=\"三-下尿路结石\"><a class=\"anchor\" href=\"#三-下尿路结石\">#</a> 三、下尿路结石</h2>\n<p>下尿路结石包括膀胱结石和尿道结石</p>\n<p>原发性膀胱结石：与营养不良和低蛋白饮食有关，少见</p>\n<p>继发性膀胱结石：见于膀胱出口梗阻（如前列腺增生），膀胱憩室， 膀胱异物，肾结石排到膀胱等</p>\n<h3 id=\"一-临床表现-2\"><a class=\"anchor\" href=\"#一-临床表现-2\">#</a> (一)  临床表现</h3>\n<p>\\1.    膀胱结石：典型症状 — 排尿突然中断伴疼痛，并放射</p>\n<p>\\2.    尿道结石：排尿困难伴疼痛；急性尿潴留</p>\n<p>\\3.    血尿和感染</p>\n<h3 id=\"二-诊断-2\"><a class=\"anchor\" href=\"#二-诊断-2\">#</a> (二)  诊断</h3>\n<p>\\1.    前尿道结石：可触及</p>\n<p>\\2.    X 线检查 —— 膀胱平片</p>\n<p>\\3.    B 超检查 —— 同时检查 BPH</p>\n<p>\\4.    膀胱镜检查</p>\n<h3 id=\"三-治疗-2\"><a class=\"anchor\" href=\"#三-治疗-2\">#</a> (三)  治疗</h3>\n<p>\\1.    膀胱结石：手术治疗并同时治疗病因</p>\n<ol>\n<li>\n<p>经膀胱镜碎石：液电，超声波，激光，气压弹道，大力碎石钳</p>\n</li>\n<li>\n<p>耻骨上膀胱切开取石术</p>\n</li>\n</ol>\n<p>\\2.    尿道结石：</p>\n<ol>\n<li>\n<p>前尿道结石行直接取石</p>\n</li>\n<li>\n<p>后尿道结石先送回膀胱再治疗</p>\n</li>\n</ol>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/23/JavaScript/v8-memoryManage/",
            "url": "http://zyczxq.com/2021/09/23/JavaScript/v8-memoryManage/",
            "title": "V8的垃圾回收机制",
            "date_published": "2021-09-23T11:32:56.000Z",
            "content_html": "<p>这里主要讲的是 Chrome 的 JavaScript 引擎 V8 的垃圾回收机制。</p>\n<h1 id=\"内存限制\"><a class=\"anchor\" href=\"#内存限制\">#</a> 内存限制</h1>\n<p><strong>V8 之中，对内存的使用有限制（64 位下约 1.4G、32 位下约 0.7G）——《深入浅出 Nodejs》</strong>。</p>\n<p>因为 V8 的内存管理机制是为浏览器而设计，而且为了避免长时间的垃圾回收阻塞 JavaScript 线程，所以就有这么一套限制。</p>\n<p>当然，也可以在启动时传递 --max-old-space-size 或 --max-new-space-size 来调整这个限制大小。但是只能在初始化 / 启动时指定，无法运行过程中扩充</p>\n<h1 id=\"v8的垃圾回收机制\"><a class=\"anchor\" href=\"#v8的垃圾回收机制\">#</a> V8 的垃圾回收机制</h1>\n<p>V8 的垃圾回收策略主要基于<strong>分代式垃圾回收机制</strong>。在这个机制中，主要将内存分为<strong>新生代</strong>和<strong>老生代</strong>两代。</p>\n<ul>\n<li>新生代：生存时间较短的对象</li>\n<li>老生代：生存时间较长的对象</li>\n<li>新生代空间较小，老生代空间较大</li>\n</ul>\n<p><img src=\"1.png\" alt=\"1\" /></p>\n<h2 id=\"新生代垃圾回收\"><a class=\"anchor\" href=\"#新生代垃圾回收\">#</a> 新生代垃圾回收</h2>\n<p>新生代的垃圾回收算法主要通过<strong> Scavenge</strong> 算法进行垃圾回收，该算法的流程主要是：</p>\n<p>将堆内存一分为二，一个处于使用中 (from)，一个处于闲置中 (To)。</p>\n<p><img src=\"2.png\" alt=\"2\" /></p>\n<p>分配内存时，会先分配到使用中的内存（from 空间），当开始进行垃圾回收的时候，回收生命周期结束的对象。</p>\n<ol>\n<li>对对象区域进行垃圾回收（标记清除），留下在使用中的活跃对象</li>\n<li>把对象区域中剩下的活跃对象复制到空闲区域（复制过程会消除内存碎片）</li>\n<li>翻转，使用区域（from）和空闲区域 (To)<strong> 身份互换</strong>。循环重复</li>\n</ol>\n<p>这个算法是典型的牺牲空间换时间的算法（因为只能使用堆内存的一半）。</p>\n<p>该算法只复制存活的对象，而实际应用中新生代大多数对象的存活时间都是比较短的，所以时间效率上相对来说比较优异。但是每次都需要复制，而复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，<strong>一般新生区的空间会被设置得比较小</strong>（1～8m）。这也是为什么新生代内存空间相对老生代来说比较小。</p>\n<h2 id=\"对象晋升策略\"><a class=\"anchor\" href=\"#对象晋升策略\">#</a> 对象晋升策略</h2>\n<p>当一个对象经过新生代垃圾回收中多次复制仍然存活时，它就会被认为是<strong>生命周期较长</strong>的对象，随后会被移动到老生代内存空间中（也就是<mark>晋升</mark>）。</p>\n<p>在上面新生代垃圾回收过程中，并不是每一次都会把对象复制到闲置空间（To）中，而是在复制之前，会先判断两个条件，如果满足条件，则会触发对象晋升，而不是复制到闲置空间中。</p>\n<p>这两个条件分别是：</p>\n<ul>\n<li>是否经历过 Scavenge 回收（主要是通过内存地址判断）</li>\n<li>To 空间的内存占用比是否超过限制</li>\n</ul>\n<p>两个条件达成其一即可。</p>\n<p>对象晋升后，会在老生代中被新的回收算法处理。</p>\n<h2 id=\"老生代垃圾回收\"><a class=\"anchor\" href=\"#老生代垃圾回收\">#</a> 老生代垃圾回收</h2>\n<p>在老生代中，存活对象通常占的比重较大，所以复制的效率会相对较低，不适用 Scavenge 算法。</p>\n<p>V8 中老生代的垃圾回收主要采用了 **Mark-Sweep (标记 - 清除)<strong> 和</strong> Mark-Compact (标记 - 整理)** 相结合的方式。</p>\n<h3 id=\"mark-sweep标记-清除\"><a class=\"anchor\" href=\"#mark-sweep标记-清除\">#</a> Mark-Sweep（标记 - 清除）</h3>\n<p>顾名思义，Mark-Sweep 叫做标记 - 清除，它分为两个阶段：<strong>标记</strong>和<strong>清除</strong>。</p>\n<ul>\n<li>标记阶段，Mark-Sweep 遍历堆中的所有对象，并标记活着的对象</li>\n<li>清除阶段，Mark-Sweep 清除没有被标记的对象</li>\n</ul>\n<p>可以对比出，Scavenge 只复制活着的对象，而 Mark-Sweep 只清理死亡对象。所以前者适合（<strong>复制场合少，即存活少的区域</strong>）新生代，后者适合（<strong>清理场合少，即存活多的区域</strong>）老生代。</p>\n<p>但是 Mark-Sweep 有一个比较严重的问题，就是清除后可能会有很多内存碎片，造成这些内存空间无法合理的利用，要消除内存碎片，就需要进行内存整理。</p>\n<h3 id=\"mark-compact标记-整理\"><a class=\"anchor\" href=\"#mark-compact标记-整理\">#</a> Mark-Compact（标记 - 整理）</h3>\n<p>Mark-Compact 就是为了解决 Mark-Sweep 的问题而提出的。</p>\n<p>Mark-Compact，即标记 - 整理，是在标记 - 清除的基础上演变来的。它和 Mark-Sweep 的差别在于，<strong>当对象在标记为死亡后，在整理的过程中，将活着的对象往一端移动（整理），移动完成后，直接清理边界外的内存</strong>。</p>\n<p>因为 Mark-Compact 需要移动对象再进行清除，很明显，它比 Mark-Sweep 要慢。</p>\n<h3 id=\"v8的策略\"><a class=\"anchor\" href=\"#v8的策略\">#</a> V8 的策略</h3>\n<p>通过上面三种算法，我们可以得出一个对比表格：</p>\n<table>\n<thead>\n<tr>\n<th>回收算法</th>\n<th>Scavenge</th>\n<th>Mark-Sweep</th>\n<th>Mark-Compact</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>速度</td>\n<td>最快</td>\n<td>快</td>\n<td>慢</td>\n</tr>\n<tr>\n<td>是否有碎片</td>\n<td>没有 (复制黏贴过程中消除)</td>\n<td>有</td>\n<td>没有</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>新生代 (存活对象少的地方)</td>\n<td>老生代 (存活对象多的地方)</td>\n<td>老生代</td>\n</tr>\n</tbody>\n</table>\n<p>Mark-Compact 慢，Mark-Sweep 有碎片，而 V8 在取舍上结合两种：<strong>主要使用 Mark-Sweep，当空间不足以分配空间给新生代中晋升的对象时，使用 Mark-Compact 消除内存碎片</strong>。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>V8 根据代际假说，将对象分为两部分：<strong>新生代与老生代</strong>。并且对两部分使用不同的算法</p>\n<ul>\n<li>新生代使用 Scavenge 算法进行垃圾回收，这种算法牺牲空间来换取时间，实际上只利用了新生代一半的空间进行存储。但优点在于面对生命周期短的对象时速度较快，而且不会产生内存碎片。</li>\n<li>新生代中的对象一旦满足两个条件之一，就会进行对象晋升，将其移动到老生代区域。</li>\n<li>老生代使用 Mark-Sweep 及 Mark-Compact 两种结合。主要使用 Mark-Sweep，当碎片太多、不足以分配一块内存给晋升的对象时，就利用 Mark-Compact 进行整理。</li>\n</ul>\n<h1 id=\"v8垃圾回收算法的问题和解决方法\"><a class=\"anchor\" href=\"#v8垃圾回收算法的问题和解决方法\">#</a> V8 垃圾回收算法的问题和解决方法</h1>\n<p>为了避免出现回收逻辑和 JavaScript 逻辑不一致的情况，当垃圾回收进行时，需要暂停 JavaScript 的应用逻辑，这种现象叫做<strong>全停顿</strong>。</p>\n<p>在老生代的垃圾回收中，因为空间比较大，运行一次垃圾回收可能要占用相当长的一段时间，这段停顿时间可能会造成卡顿。</p>\n<p>为了减小停顿时间带来的影响，V8 引入了增量标记，即将一个同步一口气完成的动作分为许多个 “step”，在这些 step 之间可以穿插一些 JavaScript 应用逻辑（其实我总觉得和操作系统调度、React fiber 的改进思想有些异曲同工，都是分片），这样就不会长时间无响应。</p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<p>《深入浅出 Nodejs》—— 朴灵</p>\n<p><a href=\"https://blog.poetries.top/browser-working-principle/guide/part3/lesson13.html\">https://blog.poetries.top/browser-working-principle/guide/part3/lesson13.html</a></p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/22/medical/waike51/",
            "url": "http://zyczxq.com/2021/09/22/medical/waike51/",
            "title": "第五十一篇  尿路梗阻",
            "date_published": "2021-09-22T13:30:47.000Z",
            "content_html": "<h1 id=\"第五十一篇-尿路梗阻\"><a class=\"anchor\" href=\"#第五十一篇-尿路梗阻\">#</a> 第五十一篇  尿路梗阻</h1>\n<h2 id=\"一-概述\"><a class=\"anchor\" href=\"#一-概述\">#</a> 一、概述</h2>\n<p>・尿液在肾内形成后，经过肾盏、肾盂、输尿管、膀胱和尿道排出体外。</p>\n<p>・尿液的正常排出，有赖于尿路管腔通畅和排尿功能正常。</p>\n<p>・泌尿系统本身及其周围的许多疾病都可引起尿路梗阻，造成尿液排出障碍，引起梗阻近侧端尿路扩张积水。</p>\n<p>・泌尿系统许多疾病与泌尿系梗阻互为因果</p>\n<p><img src=\"1.png\" alt=\"image-20210922212650050\" /></p>\n<h3 id=\"一-病因\"><a class=\"anchor\" href=\"#一-病因\">#</a> (一)    病因</h3>\n<p>\\1.    尿路结石</p>\n<p>\\2.    泌尿生殖系统肿瘤</p>\n<p>\\3.    前列腺增生症</p>\n<p>\\4.    先天发育异常</p>\n<p>\\5.    邻近器官病变的压迫和侵犯</p>\n<p>\\6.    创伤或炎症引起的瘢痕狭窄</p>\n<p>\\7.    中枢或周围神经受到损伤</p>\n<p>\\8.    结核</p>\n<p>\\9.    医源性输尿管梗阻</p>\n<p><img src=\"2.png\" alt=\"image-20210922212659952\" /></p>\n<h3 id=\"二-病理生理\"><a class=\"anchor\" href=\"#二-病理生理\">#</a> (二)  病理生理</h3>\n<h4 id=\"1-病-理\"><a class=\"anchor\" href=\"#1-病-理\">#</a> \\1.    病 理：</h4>\n<p>基本病理改变是梗阻部位以上压力增高，尿路扩张积水，长时间梗阻将导致肾积水和肾功能损害。</p>\n<h4 id=\"2-病理生理\"><a class=\"anchor\" href=\"#2-病理生理\">#</a> \\2.    病理生理</h4>\n<h5 id=\"1-上尿路梗阻\"><a class=\"anchor\" href=\"#1-上尿路梗阻\">#</a> 1)    上尿路梗阻：</h5>\n<p>①　肾盂内压↑→达到肾小球滤过压→肾小球停止滤过→尿液形成停止，肾血流仍正常；肾 “安全阀” 开放 — 肾盏在穹隆部开始有小裂隙→尿液渗至肾、肾盂周围→肾盂内压 ¯→肾小球滤过恢复→起到保护肾组织的作用→肾组织缺氧、萎缩。</p>\n<p>②　慢性梗阻→肾盂扩张、壁变薄→肾乳头萎缩→肾实质萎缩变薄→肾盂容积增大→大水囊。</p>\n<p>③　急性完全梗阻→轻度肾盂扩张，肾实质很快萎缩。</p>\n<p>④　梗阻后肾功能变化：肾小球滤过、肾血流减少；浓缩和酸化尿能力下降。</p>\n<h5 id=\"2-下尿路梗阻\"><a class=\"anchor\" href=\"#2-下尿路梗阻\">#</a> 2)    下尿路梗阻：</h5>\n<p>①　膀胱小梁形成；</p>\n<p>②　出现残余尿；</p>\n<p>③　膀胱代偿功能丧失后，出现尿液自膀胱向输尿管反流，引起上尿路梗阻，进而形成肾积水</p>\n<h2 id=\"二-肾积水\"><a class=\"anchor\" href=\"#二-肾积水\">#</a> 二、肾积水</h2>\n<p>尿液从肾盂排出受阻，蓄积后肾内压力增高，肾盂肾盏扩张，肾实质萎缩，功能减退，称为肾积水（hydronephrosis）。</p>\n<p>肾积水容量超过 1000ml 或小儿超过 24 小时尿液总量时，称为巨大肾积水。</p>\n<h3 id=\"一-临床表现\"><a class=\"anchor\" href=\"#一-临床表现\">#</a> (一)  临床表现</h3>\n<p>\\1.    表现为原发病变的症状和体征。</p>\n<p>\\2.    腰痛：隐痛不适或者剧烈绞痛。</p>\n<p>\\3.    下尿路梗阻继发肾积水主要表现为排尿困难和膀胱不能排空，甚至出现尿潴留。</p>\n<p>\\4.    不同程度的肾功能损害，严重者出现贫血、乏力、食欲不振、恶心等尿毒症症状。</p>\n<p>\\5.    肾积水如并发感染，出现寒战、高热、腰痛及尿路刺激症状等。</p>\n<p>\\6.    孤立肾完全梗阻时可出现无尿。</p>\n<h3 id=\"二-诊断\"><a class=\"anchor\" href=\"#二-诊断\">#</a> (二)  诊断</h3>\n<p>\\1.    超声检查</p>\n<p>\\2.    KUB+IVU</p>\n<p>\\3.    逆行插管造影</p>\n<p>\\4.    CT</p>\n<p>\\5.    MRU</p>\n<p>\\6.    肾穿刺顺行造影</p>\n<p>\\7.    同位素肾图</p>\n<p>\\8.    膀胱、尿道造影</p>\n<p>\\9.    内镜检查</p>\n<h3 id=\"三-治疗\"><a class=\"anchor\" href=\"#三-治疗\">#</a> (三)  治疗</h3>\n<p>\\1.    病因治疗：为理想的治疗方法。原则是去除病因，保留患肾。</p>\n<p>\\2.    先行引流，再去除病因：经皮肾造瘘或者输尿管逆行插管。</p>\n<p>\\3.    脓肾或巨大肾积水，对侧肾功能良好时：患肾切除。</p>\n<h2 id=\"三-尿潴留\"><a class=\"anchor\" href=\"#三-尿潴留\">#</a> 三、尿潴留</h2>\n<h3 id=\"一-概念\"><a class=\"anchor\" href=\"#一-概念\">#</a> (一)  概念</h3>\n<p>尿潴留是指膀胱内充满尿液而不能排出，常常由排尿困难发展到一定程度引起。尿潴留分为急性与慢性两种。</p>\n<h3 id=\"二-病因\"><a class=\"anchor\" href=\"#二-病因\">#</a> (二)  病因</h3>\n<p>引起尿潴留的病因很多，可分为机械性和动力性梗阻两类。</p>\n<p>\\1.    机械性梗阻（最多见）：良性前列腺增生、前列腺肿瘤</p>\n<p>\\2.    动力性梗阻：膀胱出口、尿道无器质性梗阻病变，尿潴留系排尿动力障碍所致。最常见的原因为中枢和周围神经系统病变，如脊髓或马尾损伤、肿瘤，糖尿病等，造成神经源性膀胱功能障碍引起。</p>\n<h3 id=\"三-临床表现\"><a class=\"anchor\" href=\"#三-临床表现\">#</a> (三)  临床表现</h3>\n<p>\\1.    急性尿潴留：发病突然，膀胱内充满尿液不能排出，胀痛难忍，辗转不安。</p>\n<p>\\2.    慢性尿潴留：多表现为排尿不畅、尿频，常有排尿不尽感，有时出现尿失禁现象。少数病人虽无明显慢性尿潴留梗阻症状，但已有明显上尿路扩张、肾积水，甚至出现尿毒症症状，如全身衰弱、食欲不振、恶心、呕吐、贫血、血清肌酐和尿素氮显著升高等。</p>\n<h3 id=\"四-诊断\"><a class=\"anchor\" href=\"#四-诊断\">#</a> (四)  诊断</h3>\n<p>\\1.    根据病史及典型的临床表现诊断。</p>\n<p>\\2.    体检时耻骨上区常可见到半球形膨隆，用手按压有明显尿意，叩诊为浊音。</p>\n<p>\\3.    B 超检查可以明确诊断。</p>\n<p>\\4.    尿潴留应与无尿鉴别，后者是指肾衰竭或上尿路完全梗阻，膀胱内空虚无尿。</p>\n<h3 id=\"五-治疗\"><a class=\"anchor\" href=\"#五-治疗\">#</a> (五)  治疗</h3>\n<p>\\1.    急性尿潴留：治疗原则是解除病因，恢复排尿。</p>\n<p>\\2.    急诊处理：导尿术（是解除急性尿潴留最简便常用的方法）。急性尿潴留病人在不能插入导尿管时，可在局麻下直接或 B 超引导下行耻骨上膀胱穿刺造瘘，持续引流尿液。</p>\n<p>\\3.    慢性尿潴留：若为机械性梗阻病变引起，有上尿路扩张肾积水、肾功能损害者，应先行膀胱尿液引流；如系动力性梗阻引起，多数病人需间歇清洁自我导尿或耻骨上膀胱造瘘术。</p>\n<h2 id=\"四-良性前列腺增生\"><a class=\"anchor\" href=\"#四-良性前列腺增生\">#</a> 四、良性前列腺增生</h2>\n<h3 id=\"一-概念-2\"><a class=\"anchor\" href=\"#一-概念-2\">#</a> (一)  概念</h3>\n<p>表现为组织学上的前列腺间质和腺体成分的增生、解剖学上的前列腺增大、尿动力学上的膀胱出口梗阻和以下尿路症状（LUTS）为主的临床症状</p>\n<h3 id=\"二-病-因\"><a class=\"anchor\" href=\"#二-病-因\">#</a> (二)  病 因</h3>\n<p>\\1.    老龄 + 有功能的睾丸：是前列腺增生发病的两个重要因素，二者缺一不可。</p>\n<p>\\2.    受性激素的调控，前列腺间质细胞和腺上皮细胞相互影响，各种生长因子的作用，随着年龄增大体内性激素平衡失调以及雌、雄激素的协同效应等，可能是前列腺增生的重要病因。</p>\n<p><img src=\"3.png\" alt=\"image-20210922212742642\" /></p>\n<h3 id=\"三-病-理\"><a class=\"anchor\" href=\"#三-病-理\">#</a> (三)  病 理</h3>\n<p>\\1.    增生的部分为：移行带。</p>\n<p>\\2.    外科包膜：被压缩的外周腺体。</p>\n<p>\\3.    膀胱颈部的平滑肌内含有丰富的 α 肾上腺素能受体，受体激活使该处平滑肌收缩，增加尿道阻力。</p>\n<p>\\4.       膀胱小梁，真、假憩室形成。</p>\n<h3 id=\"四-病理生理\"><a class=\"anchor\" href=\"#四-病理生理\">#</a> (四)  病理生理</h3>\n<p>\\1.    代偿期：</p>\n<p>①　逼尿肌代偿性肥大，</p>\n<p>②　膀胱壁增厚，增加收缩力，</p>\n<p>③　出现小梁小室改变</p>\n<p>\\2.    失代偿期：膀胱壁肌肉萎缩、变薄，张力减退，膀胱残余尿增多，最终出现充盈性尿失禁、尿潴留、膀胱输尿管反流并导致肾功能受损</p>\n<h3 id=\"五-临床表现luts临床症状\"><a class=\"anchor\" href=\"#五-临床表现luts临床症状\">#</a> (五)  临床表现（LUTS 临床症状）</h3>\n<ol>\n<li>储尿期症状：尿频、尿急、尿失禁、夜尿增多</li>\n<li>排尿期症状：排尿困难</li>\n<li>排尿后症状：排尿不尽、尿后滴沥</li>\n<li>其它症状：血尿、肾积水、肾功能不全感染、结石、腹股沟疝、内痔等</li>\n</ol>\n<h3 id=\"六-诊-断\"><a class=\"anchor\" href=\"#六-诊-断\">#</a> (六)  诊 断</h3>\n<p>\\1.    国际前列腺症状（I-PSS）评分。</p>\n<p>\\2.    体检：直肠指检，了解前列腺大小、质地、有无硬结、压痛等。</p>\n<p>\\3.    B 超：大小、结节回声、残余尿。</p>\n<p>\\4.    尿流动力学：最大尿流率小于 15ml/s。</p>\n<p>\\5.    血清前列腺特异性抗原 PSA：排除前列腺癌。</p>\n<p>\\6.    尿道膀胱镜检查</p>\n<h3 id=\"七-鉴别诊断\"><a class=\"anchor\" href=\"#七-鉴别诊断\">#</a> (七)  鉴别诊断</h3>\n<p>\\1.    前列腺癌：前列腺指诊、PSA、MRI、前列腺穿刺活检</p>\n<p>\\2.    膀胱颈挛缩：发病年龄较轻、前列腺体积不大、膀胱镜检查</p>\n<p>\\3.    尿道狭窄：尿道损伤或感染史、尿道造影、膀胱尿道镜检查</p>\n<p>\\4.    神经源性膀胱功能障碍：神经系统损坏病史、尿动力学检查</p>\n<h3 id=\"八-治疗\"><a class=\"anchor\" href=\"#八-治疗\">#</a> (八)  治疗</h3>\n<p>\\1.    等待观察</p>\n<p>\\2.    药物治疗</p>\n<p>①　a 受体阻滞剂：平滑肌张力 ¯，尿道阻力 ¯，排尿症状改善</p>\n<p>②　5α 还原酶抑制剂：抑制睾酮向双氢睾酮转变→缩小前列腺体积，改善排尿症状；</p>\n<p>③　植物制剂等。</p>\n<p>\\3.    手术治疗：经尿道前列腺电切术（TURP）、经尿道激光治疗、开放手术</p>\n<p>\\4.    其他疗法：球囊扩张等、前列腺动脉栓塞术（PAE）</p>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/21/Node/Node1/",
            "url": "http://zyczxq.com/2021/09/21/Node/Node1/",
            "title": "Node学习笔记一",
            "date_published": "2021-09-21T07:34:58.000Z",
            "content_html": "<p>这段时间在学习 Node，看书、看文档资料的时候概念感觉太乱了，于是打算写一篇文章来整理自己学到的知识，就有了这篇文章）</p>\n<h1 id=\"node简介\"><a class=\"anchor\" href=\"#node简介\">#</a> Node 简介</h1>\n<p>Node.js 是一个开源、跨平台的 JavaScript 运行时环境。2009 年的时候，Ryan Dahl 想开发一个高性能的 web 服务器，经过一番深思熟虑，他最终选择了 JavaScript 作为 Node 的实现语言。时至今日，Node 已经成为最火热的技术之一。</p>\n<h1 id=\"node的特点\"><a class=\"anchor\" href=\"#node的特点\">#</a> Node 的特点</h1>\n<ul>\n<li>\n<p>事件驱动</p>\n<p>和浏览器端 JavaScript 类似，</p>\n</li>\n<li>\n<p>异步 I/O</p>\n</li>\n<li>\n<p>单线程</p>\n<p>准确来说是 JavaScript 的执行是单线程的，其实 Node 中不同平台内部完成 I/O 任务另有线程池</p>\n<p>但其实类似前端浏览器中的<strong> Web Workers</strong>，Node 也提供了创建子进程的方法来高效的利用 CPU 和 I/O</p>\n</li>\n<li>\n<p>跨平台</p>\n<p>Node 基于<strong> libuv</strong> 实现跨平台（libuv 是一个跨平台的异步 I/O 库，它提供的内容不仅是 I/O，还有进程、线程、定时器、线程池等。）</p>\n<p>Node 用 libuv 作为抽象封装层，使得所有平台兼容性的判断由该层来完成。<strong>Node 在编译时会判断平台条件，选择性编译 unix 目录或 win 目录下的源文件到目标程序中</strong>。</p>\n</li>\n</ul>\n<h1 id=\"node与浏览器上的javascript不同之处\"><a class=\"anchor\" href=\"#node与浏览器上的javascript不同之处\">#</a> Node 与浏览器上的 JavaScript 不同之处</h1>\n<ul>\n<li>\n<p>面向范围不同</p>\n<p>浏览器上的 JavaScript 是用于前端开发的，而 Node 是用于 Web 服务器开发的</p>\n</li>\n<li>\n<p>语言组成不同</p>\n<p>在前端中，<strong>JavaScript = ECMAScript + DOM + BOM</strong>。</p>\n<p>Node 中的语言（按我的理解）是等于<strong> ECMAScript + 和操作系统交互的 API（诸如读取文件等）</strong></p>\n</li>\n<li>\n<p>运行环境不同</p>\n<p>前端的 JavaScript 跑在浏览器中的 js 引擎 (不同浏览器的 js 引擎不同，如最经典的 Chrome 的引擎是 V8，除此之外还有 SpiderMonkey、Nitro 等)，是被限制在浏览器中的沙箱的。</p>\n<p>Node.js 在浏览器外运行<strong> V8</strong>（Chrome 的 JavaScript 引擎）。基于 V8 的执行效率，Node 的计算能力也是比较优秀的。</p>\n</li>\n</ul>\n<h1 id=\"node应用场景\"><a class=\"anchor\" href=\"#node应用场景\">#</a> Node 应用场景</h1>\n<p>显然，异步 I/O 的使用场景最大就是<strong> I/O 密集型场景</strong>。它的优势主要在于 Node 利用事件循环的处理能力。</p>\n<h1 id=\"node零碎基础知识\"><a class=\"anchor\" href=\"#node零碎基础知识\">#</a> Node（零碎）基础知识</h1>\n<h2 id=\"从命令行接收输入\"><a class=\"anchor\" href=\"#从命令行接收输入\">#</a> 从命令行接收输入</h2>\n<p>利用 readline 模块创建一个接口从 process.stdin 读取</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> readline <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">createInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">input</span><span class=\"token operator\">:</span>process<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span>process<span class=\"token punctuation\">.</span>stdout</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>readline<span class=\"token punctuation\">.</span><span class=\"token function\">question</span><span class=\"token punctuation\">(</span><span class=\"token string\">'what\\'s your name? \\n'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  readline<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"node模块规范\"><a class=\"anchor\" href=\"#node模块规范\">#</a> Node 模块规范</h2>\n<p>Node 中模块规范用的是 CommonJS 规范，它的使用方式大致如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模块引用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 导出一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 导出二</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它的特点有以下几个：</p>\n<ol>\n<li>CommonJS 以同步的方式加载模块。这一点其实可以理解，因为 Node 通常是运行于服务端，而在服务端模块文件通常存放在本地磁盘，读取速度比起前端通过网络下载要快得多，所以一般没有什么问题（但是因此也不适用于前端）</li>\n<li>CommonJS 输出的是模块的拷贝，这一点与 ESNext 模块不同。模块一旦输出后便独立（即后续更改不影响）</li>\n<li>Node 中对引入过的模块都会进行缓存，减少后续引入的开销。</li>\n</ol>\n<h2 id=\"核心模块\"><a class=\"anchor\" href=\"#核心模块\">#</a> 核心模块</h2>\n<ol>\n<li>\n<p>util，提供常用函数的集合。如 util.inspect (将任意对象转换为字符串)、util.isArray 等等。</p>\n</li>\n<li>\n<p>fs，文件系统 API，用于操作文件。</p>\n<p>如 fs.readFile (用于异步读取文件)、fs.open、</p>\n</li>\n<li>\n<p>http，用于创建服务器。如 http.createServer</p>\n</li>\n<li>\n<p>url，提供一些操作 url 的方法，如获取 url 中的参数</p>\n</li>\n<li>\n<p>path，用于处理和转换文件路径的工具。</p>\n</li>\n</ol>\n<p>还有等等非常多的模块。</p>\n<h2 id=\"全局对象\"><a class=\"anchor\" href=\"#全局对象\">#</a> 全局对象</h2>\n<p>在浏览器中的 JavaScript，全局对象通常是 window。而在 Node 中，全局对象是 global。</p>\n<p>一般来说我们有几个常常使用的变量</p>\n<ol>\n<li>process，用于描述当前 Node 进程状态的对象。经常用的有很多，如 process.env.NODE_ENV 用于描述是开发环境（development）或者生产环境（production）</li>\n<li>__filename，它表示当前正在执行的文件名。它会输出文件所在位置的绝对路径。</li>\n<li>__dirname，它表示当前执行脚本的目录。</li>\n</ol>\n<h2 id=\"buffer正确拼接\"><a class=\"anchor\" href=\"#buffer正确拼接\">#</a> Buffer 正确拼接</h2>\n<p>不要这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> rs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.md'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>rs<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  data<span class=\"token operator\">+=</span>chunk<span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里相当于 data = data.toString () + chunk.toString ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rs<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种情况下，宽字节的中文在 Buffer 转 String 时有可能会被截断、无法正常显示（出现乱码）</p>\n<p>最好的办法就是将 Buffer 正确拼接成一段大 Buffer 后，再进行转 String 操作。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> chunks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  chunks<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  size <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>res<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">var</span> buf <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>chunks<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"node重点知识\"><a class=\"anchor\" href=\"#node重点知识\">#</a> Node 重点知识</h1>\n<h2 id=\"node事件循环\"><a class=\"anchor\" href=\"#node事件循环\">#</a> Node 事件循环</h2>\n<p>Node 中的事件循环与浏览器中的事件循环不太一样，浏览器环境下的就不详细讲了，见我的其他博客：<a href=\"https://zyczxq.com/2021/06/06/JavaScript/JSnote6/\">JavaScript 运行机制笔记 - 前端 | orange's blog = orange's blog = 橙子的博客 (zyczxq.com)</a></p>\n<p>事件循环是 Node 处理非阻塞 I/O 的机制。</p>\n<p>Node 中使用 libuv 来进行 I/O 处理，Node 中的 Event Loop 也是基于 libuv 实现的。</p>\n<p>Node 中的 Event loop 共分为 6 个阶段，如下：</p>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>┌───────────────────────────┐</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>┌─>│           timers          │</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>│  └─────────────┬─────────────┘</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│  ┌─────────────┴─────────────┐</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>│  │     pending callbacks     │</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│  └─────────────┬─────────────┘</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│  ┌─────────────┴─────────────┐</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│  │       idle, prepare       │</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>│  └─────────────┬─────────────┘      ┌───────────────┐</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>│  ┌─────────────┴─────────────┐      │   incoming:   │</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>│  │           poll            │&lt;─────┤  connections, │</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>│  └─────────────┬─────────────┘      │   data, etc.  │</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>│  ┌─────────────┴─────────────┐      └───────────────┘</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>│  │           check           │</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>│  └─────────────┬─────────────┘</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>│  ┌─────────────┴─────────────┐</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>└──┤      close callbacks      │</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   └───────────────────────────┘</pre></td></tr></table></figure><ol>\n<li>\n<p>timers（<strong>定时器</strong>）。执行 setTimeout、setInterval 中到期的 callback。这里其实是由轮询阶段来控制定时器何时执行，而且不是精确的时间，有可能因为操作系统调度而被延迟。</p>\n</li>\n<li>\n<p>pending callback（<strong>待定回调</strong>）。执行延迟到下一个循环迭代的 I/O 回调。</p>\n</li>\n<li>\n<p>idle，prepare。仅内部使用</p>\n</li>\n<li>\n<p>poll（<strong>轮询</strong>）。检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和  <code>setImmediate()</code>  调度的之外），其余情况 node 将在适当的时候在此阻塞。也就是说，如果执行的时间比较长，有可能定时器超时都还没返回 timers 阶段执行定时器。</p>\n<p>如果轮询队列不为空，事件循环将循环访问队列并同步执行直到空。</p>\n<p>如果轮询队列是空的，有两件事：</p>\n<ul>\n<li>如果脚本被 setImmediate 调度，则事件循环结束轮询，进入 check（检查）阶段执行那些被调度的脚本</li>\n<li>如果没有被 setImmediate 调度，则事件循环会等待回调被添加到队列中，然后立即执行</li>\n</ul>\n<p>在这个过程中，一旦轮询队列为空，<strong>事件循环还会检查已经到达时间阈值（或者超时）的计时器，如果有就回到定时器阶段执行对应的回调</strong>。</p>\n</li>\n<li>\n<p>check（<strong>检测</strong>）。执行 setImmediate 回调。</p>\n</li>\n<li>\n<p>close callbacks（关闭的回调函数）</p>\n</li>\n</ol>\n<p>在每次运行的事件循环之间，Node.js 检查它是否在等待任何异步 I/O 或计时器，如果没有的话，则完全关闭。</p>\n<div class=\"note primary\">\n<p>process.nextTick () 不是事件循环的一部分，它在事件循环的每个阶段完成之后，和微任务一样去执行（<strong>但它比其他的微任务优先级都要高</strong>）</p>\n</div>\n<h3 id=\"setimmediate对比settimeout\"><a class=\"anchor\" href=\"#setimmediate对比settimeout\">#</a> setImmediate () 对比 setTimeout ()</h3>\n<p>主要是调用时机不同。</p>\n<p>setImmediate 在当前轮询阶段完成后，就执行脚本。而 setTimeout 在最小阈值过后运行脚本。</p>\n<p><strong>执行计时器的顺序将根据调用他们的上下文而异。如果两者都从主模块内调用，则受进程性能的约束（顺序是非确定性的）</strong></p>\n<p><strong>但是在异步 I/O callback 内部调用时，总是先执行 setImmediate，再执行 setTimeout</strong>。因为 I/O 回调在 poll 阶段执行，当执行完后队列为空时，存在 setImmediate 回调的话会先跳转到 check 阶段去执行回调。</p>\n<h3 id=\"processnexttick-setimmediate\"><a class=\"anchor\" href=\"#processnexttick-setimmediate\">#</a> process.nextTick()、setImmediate()</h3>\n<p>process.nextTick () 比 setImmediate () 触发的更快。如果想设置立即异步执行一个任务，最好不要使用 setTimeout (fn,0)，而是使用 process.nextTick () 或 setImmediate ()。</p>\n<p>定时器不够准确，很多时候会超时，而且嵌套调用最小单位 4ms、未激活页面最小间隔 1000ms 等都不够精确、底层红黑树的操作时间复杂度为 O（lg (n)），而 nextTick 为 O (1)，更高效。</p>\n<h3 id=\"与浏览器事件循环的差异\"><a class=\"anchor\" href=\"#与浏览器事件循环的差异\">#</a> 与浏览器事件循环的差异？</h3>\n<p>浏览器会在每个宏任务执行完毕后清空微任务队列</p>\n<p>而 Node 中微任务（microtask）在事件循环的各个阶段执行。即每个阶段执行完毕，就会去执行 microtask 队列的任务。</p>\n<h2 id=\"内存控制\"><a class=\"anchor\" href=\"#内存控制\">#</a> 内存控制</h2>\n<p>Node 的内存控制基于 V8 的内存控制，基本是一样的，不再重复，见：<a href=\"https://zyczxq.com/2021/09/23/JavaScript/v8-memoryManage/\">https://zyczxq.com/2021/09/23/JavaScript/v8-memoryManage/</a></p>\n<h1 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h1>\n<p><a href=\"http://nodejs.cn/\">Node.js 中文网 (nodejs.cn)</a></p>\n<p>朴灵的《深入浅出 nodejs》</p>\n",
            "tags": [
                "Node"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/15/medical/waike50/",
            "url": "http://zyczxq.com/2021/09/15/medical/waike50/",
            "title": "第五十篇 泌尿、男生殖系统结核",
            "date_published": "2021-09-15T13:30:22.000Z",
            "content_html": "<h1 id=\"第五十篇-泌尿-男生殖系统结核\"><a class=\"anchor\" href=\"#第五十篇-泌尿-男生殖系统结核\">#</a> 第五十篇 泌尿、男生殖系统结核</h1>\n<h2 id=\"一-泌尿系统结核\"><a class=\"anchor\" href=\"#一-泌尿系统结核\">#</a> 一、泌尿系统结核</h2>\n<h3 id=\"一-病理\"><a class=\"anchor\" href=\"#一-病理\">#</a> (一)  病理</h3>\n<h4 id=\"1-肾结核\"><a class=\"anchor\" href=\"#1-肾结核\">#</a> \\1.    肾结核</h4>\n<p><img src=\"1.jpg\" alt=\"image-20210915210722190\" /></p>\n<ol>\n<li>早期：</li>\n</ol>\n<p>①　结核结节、结核肉芽肿</p>\n<p>②　肾皮质内多发性结核结节，是由淋巴细胞、浆细胞、巨噬细胞和上皮样细胞形成的结核性肉芽组织</p>\n<ol start=\"2\">\n<li>\n<p>逐渐蔓延：结核结节融合 → 干酪样脓肿、溃疡性空洞 → 结核性脓肾或肾积脓 → 纤维化、钙化、</p>\n</li>\n<li>\n<p>＂肾自截”：若输尿管完全闭塞，尿液不能排入膀胱，结核性膀胱炎将逐渐好转，尿路刺激症状亦可缓解甚至消失，但肾却因坏死物质积聚而被广泛破坏，功能损坏甚至全部丧失，这就是所谓的 “自行肾切除”（autonephrectomy）或 “肾自截”</p>\n</li>\n</ol>\n<h4 id=\"2-输尿管结核\"><a class=\"anchor\" href=\"#2-输尿管结核\">#</a> \\2.    输尿管结核</h4>\n<ol>\n<li>\n<p>早期：表现为黏膜、黏膜下层结核结节、溃疡、肉芽肿和纤维化，病变是多发性的</p>\n</li>\n<li>\n<p>后期：病变修复愈合后，管壁纤维化增粗变硬，管腔呈节段性狭窄，致使尿流下行受阻，引起肾积水，加速肾结核病变发展，肾功能受到进一步损害，甚至发展成为结核性脓肾，肾功能完全丧失</p>\n</li>\n</ol>\n<h4 id=\"3-膀胱结核\"><a class=\"anchor\" href=\"#3-膀胱结核\">#</a> \\3.    膀胱结核</h4>\n<ol>\n<li>早期：</li>\n</ol>\n<p>①　黏膜充血、水肿，散在结核结节形成，病变常从病侧输尿管口周围开始，逐渐扩散至膀胱的其他处</p>\n<p>②　结核结节可互相融合形成溃疡、肉芽肿，有时深达肌层，结核性溃疡较少见</p>\n<ol start=\"2\">\n<li>晚期：</li>\n</ol>\n<p>①　可累及全部的膀胱，病变愈合致使膀胱壁广泛纤维化和瘢痕收缩，使膀胱壁失去伸张能力，膀胱容量显著减少（不足 50ml） ，称为挛缩膀胱（ contractcd bladder ）。</p>\n<p>②　膀胱结核病变及挛缩膀胱常可致健侧输尿管口狭窄或闭合不全，形成洞穴样输尿管管口。</p>\n<p>③　膀胱内压升高，导致肾盂尿液梗阻或膀胱尿液反流，引起对侧肾积水。</p>\n<p>④　挛缩膀胱和对侧肾积水都是肾结核常见的晚期并发症。</p>\n<p>⑤　膀胱壁结核溃疡向深层侵及，偶可穿透膀胱壁与邻近器官形成瘘，如结核性膀胱阴道瘘或膀胱直肠瘘</p>\n<h4 id=\"4-尿道结核\"><a class=\"anchor\" href=\"#4-尿道结核\">#</a> \\4.    尿道结核</h4>\n<p>主要发生于男性，常为前列腺、精囊结核形成空洞破坏后尿道所致，少数为膀胱结核蔓延引起。其病理改变主要是结核性溃疡、纤维化导致尿道狭窄，引起排尿困难，加剧肾功能损害</p>\n<h3 id=\"二-临床表现\"><a class=\"anchor\" href=\"#二-临床表现\">#</a> (二)  临床表现</h3>\n<p>\\1.    尿频、尿急、尿痛：是肾结核的典型症状之一：</p>\n<p>晚期膀胱发生挛缩，容量显著缩小，尿频更加严重，每日排尿次数达数十次，甚至出现尿失禁现象</p>\n<p>\\2.    血尿：是肾结核的重要症状，常为终末血尿：</p>\n<p>肾结核的血尿常在尿频、尿急、尿痛症状发生以后出现，但也有以血尿为初发症状者</p>\n<p>\\3.    脓尿：是肾结核的常见症状</p>\n<p>\\4.    腰痛和肿块：肾结核虽然主要病变在肾，但一般无明显腰痛</p>\n<p>仅少数肾结核病变破坏严重和梗阻，发生结核性脓肾或继发肾周感染，或输尿管被血块、干酪样物质堵塞时，可引起腰部钝痛或绞痛</p>\n<p>\\5.    男性生殖系统结核：肾结核男性病人中约有 50％～70％合并生殖系统结核。临床上表现最明显是附睾结核，附睾可触及不规则硬块。输精管结核病变时，变得粗硬并呈 “串珠” 样改变</p>\n<p>\\6.    全身症状肾结核病人的全身症状常不明显。晚期肾结核或合并其他器官活动结核时，可以有发热、盗汗、消瘦、贫血、虚弱，食欲不振和血沉快等典型结核症状</p>\n<h3 id=\"三-诊断\"><a class=\"anchor\" href=\"#三-诊断\">#</a> (三)  诊断</h3>\n<h4 id=\"1-病史\"><a class=\"anchor\" href=\"#1-病史\">#</a> \\1.    病史：</h4>\n<ol>\n<li>\n<p>慢性膀胱炎：凡是无明显原因的慢性膀胱炎，症状持续存在并逐渐加重，伴有终末血尿；</p>\n</li>\n<li>\n<p>尿培养无细菌生长，经抗菌药物治疗无明显疗效；</p>\n</li>\n<li>\n<p>附睾有硬结或伴阴囊慢性窦道者，应考虑有肾结核的可能。</p>\n</li>\n</ol>\n<h4 id=\"2-尿液检查\"><a class=\"anchor\" href=\"#2-尿液检查\">#</a> \\2.    尿液检查</h4>\n<ol>\n<li>\n<p>尿呈酸性，尿蛋白阳性，有较多红细胞和白细胞。</p>\n</li>\n<li>\n<p>尿沉淀涂片抗酸染色可找到抗酸杆菌，以清晨第一次尿液检查阳性率最高，至少连续检查 3 次。</p>\n</li>\n<li>\n<p>抗酸杆菌不应作为诊断肾结核的唯一依据（因包皮垢杆菌、枯草杆菌也是抗酸杆菌，易和结核杆菌混淆）。</p>\n</li>\n<li>\n<p>尿结核杆菌培养时间较长（4～8 周）但可靠，阳性率可达 90%，这对肾结核的诊断有决定性意义</p>\n</li>\n</ol>\n<h4 id=\"3-影像学诊断\"><a class=\"anchor\" href=\"#3-影像学诊断\">#</a> \\3.    影像学诊断：</h4>\n<p>包括 B 超、X 线、CT 及 MRI 等检查。对确诊肾结核，判断病变严重程度，决定治疗方案非常重要</p>\n<ol>\n<li>\n<p>B 超：可初步确定病变部位，常显示病肾结构紊乱，有钙化则显示强回声，B 超也较容易发现对侧肾积水及膀胱有无挛缩</p>\n</li>\n<li>\n<p>X 线检查：可能见到病肾局灶或斑点状钙化影或全肾广泛钙化。应与肾结石鉴别</p>\n</li>\n</ol>\n<p>①　静脉尿路造影（IVU）可以了解分侧肾功能、病变程度与范围，对肾结核治疗方案的选择必不可少。</p>\n<p>②　早期表现单个肾盏模糊，虫蛀样改变，杯口甚至肾盏消失</p>\n<p>③　病变进展，肾盂肾盏出现变形，内壁粗糙，并可见到肾盏连接或分开的肾实质内多发性空洞，一个或多个肾盏消失</p>\n<ol start=\"3\">\n<li>CT 和 MRI 对中晚期肾结核能清楚地显示扩大的肾盏肾盂、皮质空洞及钙化灶，三维成像还可以显示输尿管全长病变</li>\n</ol>\n<p>①　MRI 水成像对诊断肾结核对侧肾积水有独到之处。</p>\n<p>②　在双肾结核或肾结核对侧肾积水，静脉尿路造影显影不良时，CT、MRI 有助于确定诊断</p>\n<h4 id=\"4-膀胱镜检查\"><a class=\"anchor\" href=\"#4-膀胱镜检查\">#</a> \\4.    膀胱镜检查</h4>\n<ol>\n<li>\n<p>可见膀胱黏膜充血、水肿、浅黄色结核结节、结核性溃疡、肉芽肿及瘢痕等病变，以膀胱三角区和病侧输尿管口周围较为明显</p>\n</li>\n<li>\n<p>结核性肉芽肿易误诊为肿瘤，必要时取活组织检查明确诊断。病侧输尿管口可呈 “洞穴” 状，有时可见混浊尿液喷出</p>\n</li>\n<li>\n<p>膀胱挛缩容量小于 50ml 或有急性膀胱炎时，不宜作膀胱镜检查</p>\n</li>\n</ol>\n<h3 id=\"四-鉴别诊断\"><a class=\"anchor\" href=\"#四-鉴别诊断\">#</a> (四)  鉴别诊断</h3>\n<table>\n<thead>\n<tr>\n<th>肾结核引起的膀胱炎</th>\n<th>以尿频开始，膀胱刺激症状长期存在并进行性加重，抗感染治疗无效</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>非特异性膀胱炎</td>\n<td>主要是大肠埃希菌感染，多见女性，起病急，疾病开始就有尿频、尿急、尿痛，经抗感染治疗后症状很快缓解或消失</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"五-治疗\"><a class=\"anchor\" href=\"#五-治疗\">#</a> (五)  治疗</h3>\n<h4 id=\"1-药物治疗\"><a class=\"anchor\" href=\"#1-药物治疗\">#</a> \\1.    药物治疗</h4>\n<ol>\n<li>\n<p>早期、适量、联合、规律、全程</p>\n</li>\n<li>\n<p>适用于早期肾结核， 抗结核药物：首选药物有吡嗪酰胺、异烟肼、利福平和链霉素等杀菌药物，其他如乙胺丁醇、环丝氨酸、乙硫异烟胺等抑菌药为二线药物</p>\n</li>\n</ol>\n<h4 id=\"2-手术治疗\"><a class=\"anchor\" href=\"#2-手术治疗\">#</a> \\2.    手术治疗</h4>\n<ol>\n<li>\n<p>凡药物治疗 6～9 个月无效，肾结核破坏严重者，应在药物治疗的配合下行手术治疗。</p>\n</li>\n<li>\n<p>肾切除术前抗结核治疗不应少于 2 周</p>\n</li>\n</ol>\n<p>①　肾切除术</p>\n<p>・肾结核破坏严重，而对侧肾正常，应切除患肾</p>\n<p>・双侧肾结核一侧广泛破坏呈 “无功能” 状态，另一侧病变较轻，在抗结核药物治疗一段时间后，择期切除严重的一侧患肾</p>\n<p>・肾结核对侧肾积水，如果积水肾功能代偿不良，应先引流肾积水，保护肾功能，待肾功能好转后再切除无功能的患肾</p>\n<p>②　保留肾组织的肾结核手术</p>\n<p>・肾部分切除术：适用病灶局限于肾的一极</p>\n<p>・结核病灶清除术：适用局限于肾实质表面闭合性的结核性脓肿，与肾集合系统不相通。</p>\n<p>③　解除输尿管狭窄的手术</p>\n<p>・输尿管对端吻合术：输尿管结核病变致使管腔狭窄引起肾积水，可以切除狭窄段，行输尿管端端吻合术</p>\n<p>・输尿管膀胱吻合术：狭窄靠近膀胱者，则施行狭窄段切除，输尿管膀胱吻合术，放置双 J 形输尿管支架引流管，术后 1 ～ 2 个月拔除</p>\n<p>④　挛缩膀胱的手术治疗</p>\n<p>・肠膀胱扩大术：肾结核并发挛缩膀胱，在患肾切除及抗结核治疗 3～6 个月，待膀胱结核完全愈合后，对侧肾正常、无结核性尿道狭窄的病人，可行肠膀胱扩大术</p>\n<p>・尿流改道术：挛缩膀胱的男性病人往往有前列腺、精囊结核引起后尿道狭窄，为了改善和保护积水肾仅有的功能，应施行输尿管皮肤造口，回肠膀胱或肾造口这等尿流改道术</p>\n<h2 id=\"二-男生殖系统结核\"><a class=\"anchor\" href=\"#二-男生殖系统结核\">#</a> 二、男生殖系统结核</h2>\n<p>・男生殖系统结核大多数继发于肾结核，一般来自后尿道感染，少数由血行直接播散所致。首先在前列腺、精囊中引起病变，以后再经输精管蔓延到附睾和睾丸</p>\n<p>・单纯前列腺、精囊结核，因部位隐蔽，临床症状常不明显，不易发现</p>\n<p>・附睾结核（epididymal tuberculosis）临床症状较明显，容易被病人和临床医生发现</p>\n<h3 id=\"一-病理-2\"><a class=\"anchor\" href=\"#一-病理-2\">#</a> (一)  病理</h3>\n<p>\\1.    病理改变主要为结核结节、干酪坏死、空洞形成和纤维化等，钙化极少见。</p>\n<p>\\2.    前列腺结核：脓肿向尿道破溃，可使后尿道呈空洞状，边缘不规则。前列腺、精囊纤维化以后则形成坚硬肿块。</p>\n<p>\\3.    输精管结核：常致管腔堵塞，输精管变粗变硬，呈 “串珠” 状改变。</p>\n<p>\\4.    附睾结核：病变常从附睾尾开始，呈干酪样变、脓肿及纤维化，可累及整个附睾。少数血行感染引起的附睾结核，病变多从附睾头部开始。附睾结核常侵及鞘膜和阴囊壁，脓肿破溃后可形成经久不愈的窦道。</p>\n<p>\\5.    睾丸结核：常是附睾结核直接扩展蔓延所致</p>\n<h3 id=\"二-临床表现-2\"><a class=\"anchor\" href=\"#二-临床表现-2\">#</a> (二)  临床表现</h3>\n<p>\\1.    大多数为 20～40 岁</p>\n<p>\\2.    前列腺、精囊结核的临床症状多不明显</p>\n<p>\\3.    附睾结核一般发病缓慢，表现为阴囊部肿胀不适或下坠感，附睾尾或整个附睾呈硬结状，疼痛不明显。形成寒性脓肿如继发感染，阴囊局部出现红肿、疼痛。脓肿破溃后可形成经久不愈的窦道。双侧病变则失去生育能力</p>\n<h3 id=\"三-诊断-2\"><a class=\"anchor\" href=\"#三-诊断-2\">#</a> (三)  诊断</h3>\n<p>\\1.    有上述临床表现：直肠指检扪及前列腺、精囊硬结或触及附睾硬结，疑有男生殖系统结核时，需全面检查泌尿系统有无结核病变</p>\n<p>\\2.    尿常规：尿找抗酸杆菌、尿结核杆菌培养和静脉尿路造影等检查以除外肾结核。前列腺液或精液中有时可发现结核杆菌</p>\n<p>\\3.    骨盆平片：偶可发现前列腺结核钙化</p>\n<p>\\4.    尿道造影：可显示前列腺部尿道变形或扩大，造影剂可进入前列腺空洞内</p>\n<p>\\5.    精囊造影：价值不大，极少应用</p>\n<h3 id=\"四-鉴别诊断-2\"><a class=\"anchor\" href=\"#四-鉴别诊断-2\">#</a> (四)  鉴别诊断</h3>\n<p>\\1.    前列腺结核：需与非特异性前列腺炎及前列腺癌鉴别。</p>\n<p>①　慢性前列腺炎：病人症状一般较为明显，有结节形成者，范围较局限，常有压痛，经抗感染治疗后，结节可缩小甚至消失。</p>\n<p>②　前列腺癌：发病多为老年人，前列腺特异性抗原（PSA）测定、直肠指检及影像学检查有助于诊断，必要时需作前列腺穿刺活组织检查</p>\n<p>\\2.    附睾结核需与非特异性慢性附睾炎鉴别：</p>\n<p>①　附睾结核硬块常不规则，病程缓慢，常可触及 “串珠” 样、粗硬的输精管，如附睾病变与皮肤粘连或形成阴囊皮肤窦道。</p>\n<p>②　非特异性慢性附睾炎：很少形成局限性硬结，一般与阴囊皮肤无粘连，常有急性炎症发作史或伴有慢性前列腺炎病史。</p>\n<p>③　睾丸肿瘤： B 超有助于鉴别</p>\n<h3 id=\"五-治疗-2\"><a class=\"anchor\" href=\"#五-治疗-2\">#</a> (五)  治疗</h3>\n<p>\\1.    前列腺、精囊结核一般用抗结核药物治疗，不需要用手术方法，但应清除泌尿系统可能存在的其他结核病灶，如肾结核、附睾结核等</p>\n<p>\\2.    早期附睾结核应用抗结核药物治疗，多数可以治愈。如果病变较重，疗效不好，已有脓肿或有阴囊皮肤窦道形成，应在药物治疗配合下作附睾及睾丸切除术。手术应尽可能保留附睾、睾丸组织</p>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/13/medical/waike2/",
            "url": "http://zyczxq.com/2021/09/13/medical/waike2/",
            "title": "第四十九篇 泌尿、男性生殖系统感染",
            "date_published": "2021-09-13T13:21:14.000Z",
            "content_html": "<h1 id=\"第四十九篇-泌尿-男性生殖系统感染\"><a class=\"anchor\" href=\"#第四十九篇-泌尿-男性生殖系统感染\">#</a> 第四十九篇 泌尿、男性生殖系统感染</h1>\n<h2 id=\"一-概论\"><a class=\"anchor\" href=\"#一-概论\">#</a> 一、概论</h2>\n<h3 id=\"一-定义\"><a class=\"anchor\" href=\"#一-定义\">#</a> (一)  定义：</h3>\n<p>致病菌入侵泌尿、男生殖系系统内繁殖而引起的炎症 。</p>\n<h3 id=\"二-根据感染的部位分为\"><a class=\"anchor\" href=\"#二-根据感染的部位分为\">#</a> (二)  根据感染的部位分为：</h3>\n<p>上尿路感染：累及肾、肾盂及输尿管</p>\n<p>下尿路感染：累及膀胱和尿道</p>\n<h3 id=\"三-病原微生物\"><a class=\"anchor\" href=\"#三-病原微生物\">#</a> (三)  病原微生物：</h3>\n<p>细菌：大肠杆菌（最多见）、副大肠杆菌、变形杆菌、葡萄球菌等</p>\n<p>病毒：结核菌、真菌、 衣原体、支原体和病毒等</p>\n<h3 id=\"四-发病机制\"><a class=\"anchor\" href=\"#四-发病机制\">#</a> (四)  发病机制：</h3>\n<p>\\1.    机体的防御机制：尿道外口皮肤和黏膜正常菌群、正常的尿液环境，正常尿路上皮细胞分泌物质等</p>\n<p>\\2.    感染的形成：细菌的数量和毒力。一般认为尿内细菌浓度超过 105CFU/ml 时即可导致尿路感染</p>\n<p>\\3.    常见的致病菌：大肠埃希菌。其中表达特殊 K 抗原的大肠埃希菌菌株毒力强，易引起尿路感染</p>\n<p>\\4.    尿路感染的易感性还可能与血型抗原、基因型特征、内分泌等因素相关</p>\n<h3 id=\"五-诱发感染的因素\"><a class=\"anchor\" href=\"#五-诱发感染的因素\">#</a> (五)  诱发感染的因素</h3>\n<p>\\1.    机体免疫功能下降、抗感染能力减弱</p>\n<p>\\2.    梗阻因素</p>\n<p>\\3.    医源性因素</p>\n<p>\\4.    女性尿道较短，容易招致上行感染</p>\n<h3 id=\"六-感染途径\"><a class=\"anchor\" href=\"#六-感染途径\">#</a> (六)  感染途径</h3>\n<p>\\1.    上行感染：病原菌从体外经尿道外口向上入膀胱，再上行入上尿路，这是尿路感染最常见的感染途径，多见于女性病人，致病菌大多为大肠埃希菌</p>\n<p>\\2.    血行感染：较少见，多继发于机体免疫功能低下，皮肤疖、痈、扁桃体炎、中耳炎、龋齿等感染灶内的致病菌通过血液循环系统进入泌尿生殖系统器官。常见为肾皮质感染，致病菌多为金黄色葡萄球菌</p>\n<p>\\3.    淋巴感染：泌尿生殖系统邻近器官病灶的致病菌经淋巴系统传播至泌尿生殖器官。比较少见，多见于肠道的严重感染或腹膜后感染等</p>\n<p>\\4.    直接蔓延感染：由泌尿生殖系统邻近器官的感染直接蔓延所致，如阑尾脓肿、盆腔化脓性炎症等，外伤也可直接将致病菌带入泌尿生殖系统脏器引起感染</p>\n<h3 id=\"七-诊断\"><a class=\"anchor\" href=\"#七-诊断\">#</a> (七)  诊断</h3>\n<p>\\1.    尿频、尿急、尿痛和排尿困难是泌尿生殖系统感染的典型临床表现</p>\n<p>\\2.    尿液标本的采集：</p>\n<p>①　中段尿：清洁外阴和尿道口后留取中段尿；</p>\n<p>②　导尿：常用于女性病人；</p>\n<p>③　耻骨上膀胱穿刺：最适用于新生儿和截瘫病人</p>\n<p>\\3.    尿液镜检：每高倍镜视野白细胞超过 3 个即说明可能存在泌尿系统感染</p>\n<p>\\4.    细菌菌落计数：是诊断尿路感染的主要依据。</p>\n<p>①　若菌落计数≥105/ml 应认为有感染；</p>\n<p>②　若菌落计数 &lt; 104/ml 可能为污染，应重复培养；</p>\n<p>③　若菌落计数 104～105/ml 为可疑</p>\n<p>\\5.    感染的定位检查：区别上、下尿路感染</p>\n<p>\\6.    影像学和尿动力学检查：B 超、尿路平片、排泄性尿路造影、膀胱及尿道造影、CT、放射性核素、磁共振水成像（MRU）、尿动力学等</p>\n<h3 id=\"八-治疗原则\"><a class=\"anchor\" href=\"#八-治疗原则\">#</a> (八)  治疗原则</h3>\n<p>\\1.    明确感染性质：依据尿细菌培养和药敏试验结果，有针对性的用药，尚无尿培养结果时，可根据尿沉渣涂片革兰染色初步估计致病菌，选择恰当的药物</p>\n<p>\\2.    鉴别上尿路感染还是下尿路感染</p>\n<p>\\3.    明确血性感染还是上行感染</p>\n<p>\\4.    查明泌尿系有无梗阻因素</p>\n<p>\\5.    检查有无泌尿系感染的诱发因素</p>\n<p>\\6.    测定尿液 pH</p>\n<p>\\7.    正确使用抗菌药物：抗菌药物的使用原则上应持续到症状消失，尿细菌培养转阴后 2 周</p>\n<h2 id=\"二-上尿路感染\"><a class=\"anchor\" href=\"#二-上尿路感染\">#</a> 二、上尿路感染</h2>\n<h3 id=\"一-急性肾盂肾炎\"><a class=\"anchor\" href=\"#一-急性肾盂肾炎\">#</a> (一)  急性肾盂肾炎</h3>\n<p>急性肾盂肾炎是肾盂和肾实质的急性细菌性炎症。</p>\n<p>致病菌多经膀胱上行感染肾盂，再经肾盂感染肾实质，也可经血液直接播散到肾盂和肾实质。</p>\n<p>上行感染的病原菌主要为 G - 细菌，多为大肠埃希菌和其他肠杆菌；</p>\n<p>血行感染的致病菌主要为 G + 细菌。女性的发病率高于男性。</p>\n<p>上尿路梗阻、膀胱输尿管反流及尿潴留时可以继发肾盂肾炎</p>\n<h4 id=\"1-临床表现\"><a class=\"anchor\" href=\"#1-临床表现\">#</a> \\1.    临床表现</h4>\n<ol>\n<li>\n<p>发热：突然发生寒战、高热，伴有头痛、恶心呕吐等全身症状，热型类似脓毒症，持续 1 周左右</p>\n</li>\n<li>\n<p>腰痛：病侧或双侧腰痛，多呈胀痛。肋脊角有明显的压痛和叩击痛</p>\n</li>\n<li>\n<p>膀胱刺激症状：</p>\n</li>\n</ol>\n<p>①　下尿路感染上行所致的急性肾盂肾炎：先出现尿频、尿急、尿痛、血尿、排尿困难等症状，后出现高热等全身症状。</p>\n<p>②　血行感染者常由高热开始，随后出现膀胱刺激症状，有时不明显</p>\n<h4 id=\"2-诊断\"><a class=\"anchor\" href=\"#2-诊断\">#</a> \\2.    诊断</h4>\n<ol>\n<li>\n<p>根据病史可以进行初步诊断。特别注意询问有无下尿路感染，前列腺炎及身体其他部位有无感染病灶</p>\n</li>\n<li>\n<p>尿液检查可发现白细胞、红细胞、蛋白、白细胞管型，尿细菌培养每毫升尿有菌落 105 以上，血白细胞计数升高，中性粒细胞增多明显。病变严重时可有脓毒血症出现，此时应进行血液的细菌学检查</p>\n</li>\n<li>\n<p>X 线、B 超、CT 等影像学检查有助于了解上尿路有无梗阻或其他疾病</p>\n</li>\n</ol>\n<h4 id=\"3-治疗\"><a class=\"anchor\" href=\"#3-治疗\">#</a> \\3.    治疗</h4>\n<ol>\n<li>\n<p>支持治疗：卧床休息，多饮水，维持每日尿量达 1.5L 以上，有利于炎症及代谢产物的排出</p>\n</li>\n<li>\n<p>抗菌药物治疗：</p>\n</li>\n</ol>\n<p>①  β- 内酰胺类抗生素；</p>\n<p>②  喹诺酮类药物；</p>\n<p>③  青霉素类药物；</p>\n<p>④  头孢菌素，可与氨基苷类抗生素合用；</p>\n<p>⑤  去甲万古霉素、亚胺培南 - 西拉司丁钠（泰能）疗程一般为 7～14 日，静脉用药者可在体温正常、临床症状改善、尿细菌培养转阴后改口服维持</p>\n<ol start=\"3\">\n<li>\n<p>碱性药物：碳酸氢钠、枸橼酸钾，可降低酸性尿液对膀胱的刺激，以缓解膀胱刺激症状。</p>\n</li>\n<li>\n<p>钙离子通道拮抗剂：维拉帕米（异搏定）、盐酸黄酮哌酯 M 受体阻滞剂可解除膀胱痉挛，缓解刺激症状</p>\n</li>\n</ol>\n<h3 id=\"二-肾积脓\"><a class=\"anchor\" href=\"#二-肾积脓\">#</a> (二)  肾积脓</h3>\n<p>肾积脓也称脓肾，是肾实质感染所致广泛的化脓性病变，或尿路梗阻后肾盂肾盏积水、感染而形成一个积聚脓液的囊腔。</p>\n<p>致病菌有革兰阳性球菌和革兰阴性杆菌或结核杆菌。</p>\n<p>多在上尿路结石、肾结核、肾盂肾炎、肾积水、手术史等疾病的基础上，并发化脓性感染而形成</p>\n<h4 id=\"1-临床表现-2\"><a class=\"anchor\" href=\"#1-临床表现-2\">#</a> \\1.    临床表现</h4>\n<ol>\n<li>\n<p>主要为全身感染症状，如畏寒、高热、腰部疼痛、肿块等。病程长者可消瘦、贫血。</p>\n</li>\n<li>\n<p>如尿路为不完全性梗阻、脓液沿输尿管排入膀胱而出现膀胱炎症状，膀胱镜检查可见病侧输尿管口喷脓尿。</p>\n</li>\n<li>\n<p>B 超显示为肾盂积脓，CT 也有助于诊断。</p>\n</li>\n<li>\n<p>排泄性尿路造影或放射性核素肾图提示病侧肾功能减退或丧失。右侧肾积脓需与化脓性胆囊炎鉴别</p>\n</li>\n</ol>\n<h4 id=\"2-治疗\"><a class=\"anchor\" href=\"#2-治疗\">#</a> \\2.    治疗</h4>\n<ol>\n<li>\n<p>以抗感染为主，同时注意加强营养，纠正水、电解质紊乱，在肾尚有功能时，应施行脓肾造口术。</p>\n</li>\n<li>\n<p>如患肾功能已丧失，可行患肾切除术</p>\n</li>\n</ol>\n<h3 id=\"三-肾皮质多发性脓肿\"><a class=\"anchor\" href=\"#三-肾皮质多发性脓肿\">#</a> (三)  肾皮质多发性脓肿</h3>\n<p>肾皮质多发脓肿称为肾疖，小脓肿融合形成肾痈。</p>\n<p>多为葡萄球菌经血行感染。</p>\n<p>原发灶可为皮肤疖肿、肺部感染、骨髓炎、扁桃体炎或外伤后感染等。</p>\n<h4 id=\"1-临床表现-3\"><a class=\"anchor\" href=\"#1-临床表现-3\">#</a> \\1.    临床表现</h4>\n<p>原发病灶症状较为明显，继之突发畏寒、发热、腰痛，肾区压痛，肌紧张和肋脊角叩击痛，无膀胱刺激症状，病程约为 1～2 周</p>\n<h4 id=\"2-治-疗\"><a class=\"anchor\" href=\"#2-治-疗\">#</a> \\2.    治 疗</h4>\n<p>早期肾皮质脓肿应及时应用抗生素治疗，如肾痈形成或并发肾周围脓肿，可在 B 超引导下穿刺或切开引流</p>\n<h3 id=\"四-肾周围炎\"><a class=\"anchor\" href=\"#四-肾周围炎\">#</a> (四)  肾周围炎</h3>\n<p>肾周围炎是肾周围组织的化脓性炎症，若形成脓肿称肾周围脓肿。</p>\n<p>致病菌以金黄色葡萄球菌及大肠埃希菌多见</p>\n<p>病变位于肾固有筋膜与肾周筋膜之间，多由肾痈、肾表面脓肿直接感染所致。由于肾周组织脂肪丰富，且疏松，感染易蔓延。脓液流入髂腰间隙，形成腰大肌脓肿，穿破横膈形成脓胸</p>\n<h4 id=\"1-临床表现-4\"><a class=\"anchor\" href=\"#1-临床表现-4\">#</a> \\1.    临床表现</h4>\n<ol>\n<li>\n<p>腰痛、肾区压痛、叩击痛和肌紧张，形成脓肿后可有全身中毒症状。</p>\n</li>\n<li>\n<p>血白细胞及中性粒细胞上升。</p>\n</li>\n<li>\n<p>肾周围炎多伴有肾实质感染，尿常规检查可见脓细胞。单纯肾周围炎尿常规无异常。</p>\n</li>\n<li>\n<p>若脓肿溃破，沿腰大肌蔓延扩展，刺激腰大肌使髂关节屈曲不能伸展，腹部平片可见肾影增大模糊，脊柱弯向病侧，腰大肌阴影消失。</p>\n</li>\n<li>\n<p>若脓肿位于肾上方，累及膈肌，可有胸膜炎性反应，同侧膈肌抬高，活动受限。</p>\n</li>\n<li>\n<p>B 超和 CT 可显示肾周围脓肿，有助于本病的定位、定性诊断</p>\n</li>\n</ol>\n<h4 id=\"2-治-疗-2\"><a class=\"anchor\" href=\"#2-治-疗-2\">#</a> \\2.    治 疗</h4>\n<p>未形成脓肿前，治疗应首选敏感的抗生素和局部热敷，并加强全身支持疗法。肾周围脓肿形成后，可作超声引导下穿刺或切开引流</p>\n<h2 id=\"三-下尿路感染\"><a class=\"anchor\" href=\"#三-下尿路感染\">#</a> 三、下尿路感染</h2>\n<h3 id=\"一-急性细菌性膀胱炎\"><a class=\"anchor\" href=\"#一-急性细菌性膀胱炎\">#</a> (一)  急性细菌性膀胱炎</h3>\n<p>女性多发，尤其在新婚期及更年期后更容易发病。</p>\n<p>急性细菌性膀胱炎的感染途径几乎均为上行感染所致</p>\n<p>致病菌多数为大肠埃希菌，其次为变形杆菌、克雷伯菌、葡萄球菌及铜绿假单胞菌等</p>\n<h4 id=\"1-病理\"><a class=\"anchor\" href=\"#1-病理\">#</a> \\1.    病理</h4>\n<ol>\n<li>\n<p>浅表膀胱炎症多见，以尿道内口及膀胱三角最明显。</p>\n</li>\n<li>\n<p>病变仅累及黏膜、黏膜下层，可见膀胱黏膜弥漫性充血、水肿，肉眼呈深红色，黏膜下有出血，严重时可见溃疡形成，黏膜表面有脓液和坏死组织附着。</p>\n</li>\n<li>\n<p>显微镜下可见白细胞浸润。若治疗不彻底或有异物、残余尿、上尿路感染等情况，炎症可转为慢性</p>\n</li>\n</ol>\n<h4 id=\"2-临床表现\"><a class=\"anchor\" href=\"#2-临床表现\">#</a> \\2.    临床表现</h4>\n<ol>\n<li>\n<p>发病突然，多数青壮年女性患者发病与性活动有关，临床表现为尿痛、尿频、尿急、尿痛、尿道烧灼感。</p>\n</li>\n<li>\n<p>尿频程度不一，严重者数分钟排尿一次或有急迫性尿失禁。常见终末血尿，有时为全程血尿，甚至有血块排出。</p>\n</li>\n<li>\n<p>全身症状不明显，体温正常或仅有低热，当并发急性肾盂肾炎或急性前列腺炎、附睾炎时才出现高热等全身症状</p>\n</li>\n</ol>\n<h4 id=\"3-诊断\"><a class=\"anchor\" href=\"#3-诊断\">#</a> \\3.    诊断</h4>\n<ol>\n<li>\n<p>有无尿路感染的诱因和全身及尿路疾病史，并进行相应的检查</p>\n</li>\n<li>\n<p>实验室检查：尿液中白细胞和红细胞增多。除尿细菌培养外，还应作菌落计数和药物敏感试验，典型病例常获得阳性结果。肾功能一般不受影响。在急性感染期禁忌作膀胱镜检查。尿道有分泌物时应作涂片细菌学检查</p>\n</li>\n<li>\n<p>与其他以排尿改变为主要症状的疾病鉴别，包括阴道炎、尿道炎等</p>\n</li>\n</ol>\n<h4 id=\"4-治疗\"><a class=\"anchor\" href=\"#4-治疗\">#</a> \\4.    治疗</h4>\n<ol>\n<li>\n<p>根据致病菌种类和药物敏感性实验结果选用抗生素治疗</p>\n</li>\n<li>\n<p>抗菌药物可选用复方磺胺甲基异恶唑、头孢菌素类、喹诺酮类药物。</p>\n</li>\n<li>\n<p>在治疗过程中应多饮水，口服碳酸氢钠碱化尿液，并应用盐酸黄酮哌酯、抗胆碱能类药如颠茄、阿托品等药物，以减少膀胱刺激症状</p>\n</li>\n<li>\n<p>膀胱区热敷、热水坐浴等可减轻膀胱痉挛</p>\n</li>\n<li>\n<p>绝经期后妇女发生尿路感染，可能与雌激素缺乏引起阴道内乳酸杆菌减少和致病菌的繁殖增加有关，因此雌激素替代疗法可以维持正常的阴道内环境，增加乳酸杆菌并清除致病菌，减少尿路感染的发生</p>\n</li>\n</ol>\n<h3 id=\"二-慢性细菌性膀胱炎\"><a class=\"anchor\" href=\"#二-慢性细菌性膀胱炎\">#</a> (二)  慢性细菌性膀胱炎</h3>\n<h4 id=\"1-病因\"><a class=\"anchor\" href=\"#1-病因\">#</a> \\1.    病因</h4>\n<p>慢性细菌性膀胱炎常是上尿路急性感染的迁移或慢性感染所致，亦可诱发或继发于某些下尿路病变，如良性前列腺增生、慢性前列腺炎、尿道狭窄、膀胱结石或异物、尿道口处女膜融合、处女膜伞、尿道旁腺炎等</p>\n<h4 id=\"2-病理\"><a class=\"anchor\" href=\"#2-病理\">#</a> \\2.    病理</h4>\n<p>膀胱黏膜苍白、粗糙、肥厚，表面有时呈颗粒或小囊状，偶见溃疡。显微镜下可见黏膜固有层内有较多浆细胞、淋巴细胞浸润和结缔组织增生。炎症累及肌层可使逼尿肌纤维化，收缩力减弱，膀胱容量可缩小，严重时影响肾功能</p>\n<h4 id=\"3-临床表现\"><a class=\"anchor\" href=\"#3-临床表现\">#</a> \\3.    临床表现</h4>\n<p>尿频、尿急、尿痛反复发作或持续存在，并有耻骨上膀胱区或会阴部不适，膀胱充盈时疼痛较明显。常有尿液混浊</p>\n<h4 id=\"4-诊断\"><a class=\"anchor\" href=\"#4-诊断\">#</a> \\4.    诊断</h4>\n<ol>\n<li>\n<p>根据病史和临床表现诊断，应考虑反复发作或持续存在的原因</p>\n</li>\n<li>\n<p>男性：直肠指检了解前列腺有无病变，并作阴囊、阴茎、尿道口检查，排除生殖道炎症、尿道炎症或结石</p>\n</li>\n<li>\n<p>女性：解尿道外口、处女膜有无畸形，有无宫颈炎、阴道炎或前庭腺炎等。注意有无糖尿病、免疫功能低下等疾病</p>\n</li>\n<li>\n<p>实验室检查：尿中可见白细胞和红细胞。尿培养可呈阳性。如多次中段尿细菌培养阴性，应考虑与泌尿系结核鉴别，此时应进行尿结核菌检查和结核菌培养</p>\n</li>\n<li>\n<p>B 超、静脉尿路造影、CT 或核磁共振水成像（MRU）、膀胱镜检、活体组织病理检查</p>\n</li>\n</ol>\n<h4 id=\"5-治-疗\"><a class=\"anchor\" href=\"#5-治-疗\">#</a> \\5.    治 疗</h4>\n<ol>\n<li>\n<p>抗菌药物为主，抗菌药物要足量使用。一般交替使用 2～3 种抗生素，应用 2 周或更长时间</p>\n</li>\n<li>\n<p>治疗期间保持排尿通畅，积极处理诱发尿路感染的病因，必要时行手术纠正。</p>\n</li>\n</ol>\n<h3 id=\"三-尿道炎\"><a class=\"anchor\" href=\"#三-尿道炎\">#</a> (三)  尿道炎</h3>\n<h4 id=\"1-淋菌性尿道炎\"><a class=\"anchor\" href=\"#1-淋菌性尿道炎\">#</a> \\1.    淋菌性尿道炎</h4>\n<p>淋球菌引起的尿道感染，常累及泌尿、生殖系的黏膜</p>\n<p>主要由性接触直接传播。</p>\n<h5 id=\"1-临床表现-5\"><a class=\"anchor\" href=\"#1-临床表现-5\">#</a> 1)    临床表现</h5>\n<p>①　多数病人有明确的不洁性接触史，潜伏期 2～5 日</p>\n<p>②　发病较急，尿道口黏膜红肿、发痒或刺痛</p>\n<p>③　尿道排出多量黄白色脓性分泌物，病情发展可出现阴茎肿胀，继之出现尿频、尿急、尿痛，有时可见血尿。腹股沟淋巴结呈急性炎症反应</p>\n<p>④　及时治疗者大约 1 周后症状逐渐减轻，尿道口红肿消退，尿道分泌物减少而稀薄，排尿恢复正常，1 月后症状可全部消失。部分病人可继发前列腺炎、精囊炎或附睾炎；治疗未愈者可形成慢性淋菌性尿道炎，反复发作使尿道结缔组织纤维化还可引起炎性尿道狭窄</p>\n<h5 id=\"2-诊断-2\"><a class=\"anchor\" href=\"#2-诊断-2\">#</a> 2)    诊断</h5>\n<p>有典型的临床表现及不洁性生活史，尿道分泌物涂片可在多核白细胞内找到成对排列的革兰阴性双球菌。尿三杯试验以第一杯脓尿最明显</p>\n<h5 id=\"3-治疗-2\"><a class=\"anchor\" href=\"#3-治疗-2\">#</a> 3)    治疗</h5>\n<p>①　以青霉素类药物为主，亦可用头孢三嗪、壮观霉素等药物进行治疗</p>\n<p>②　感染初期使用头孢三嗪，并口服喹诺酮类、头孢菌素或复方磺胺甲基异恶唑，一般 7～14 日为一疗程。若病情较重，合并生殖系感染，应适当延长抗菌药物的疗程</p>\n<p>③　以定期逐渐扩张尿道为主，同时给予抗菌药物，必要时作尿道口狭窄切开，广泛性前尿道狭窄可用内镜作尿道内切开术</p>\n<p>④　配偶应同时治疗，性生活使用安全套，以免重复感染</p>\n<h4 id=\"2-非淋菌性尿道炎\"><a class=\"anchor\" href=\"#2-非淋菌性尿道炎\">#</a> \\2.    非淋菌性尿道炎</h4>\n<p>病原体以沙眼衣原体或支原体为主，其余为滴虫、单纯疱疹病毒、肝炎病毒、白色念珠菌、包皮垢杆菌等，通过性接触传播，比淋菌性尿道炎发病率高，在性传播疾病中占首位</p>\n<h5 id=\"1-临床表现-6\"><a class=\"anchor\" href=\"#1-临床表现-6\">#</a> 1)    临床表现</h5>\n<p>一般在感染后 1～5 周发病。表现为尿道刺痒、尿痛和分泌少量白色稀薄液体，有时仅为痂膜封口或裤裆污秽，常见于晨起时。在男性，感染可侵犯前列腺、附睾引起前列腺炎和急性附睾炎，严重者导致男性不育</p>\n<h5 id=\"2-诊断-3\"><a class=\"anchor\" href=\"#2-诊断-3\">#</a> 2)    诊断</h5>\n<p>①　有典型的临床表现及不洁性行为的接触传染史</p>\n<p>②　清晨排尿前取尿道分泌物作支原体、衣原体接种培养</p>\n<p>③　非淋菌性尿道炎与淋菌性尿道炎可以在同一病人同一时期中发生双重感染，症状相似，应鉴别诊断。尿道分泌物涂片每高倍视野下见到 10～15 个多核白细胞，找到衣原体或支原体的包涵体及未见细胞内革兰阴性双球菌，据此可与淋菌性尿道炎相鉴别</p>\n<h5 id=\"3-治疗-3\"><a class=\"anchor\" href=\"#3-治疗-3\">#</a> 3)    治疗</h5>\n<p>常用大环内酯类抗生素治疗，如红霉素（阿奇霉素）、米诺环素（美满霉素）等，性伴侣应同时治疗，并注意性生活卫生</p>\n<h2 id=\"四-男生殖系统感染\"><a class=\"anchor\" href=\"#四-男生殖系统感染\">#</a> 四、男生殖系统感染</h2>\n<h3 id=\"一-急性细菌性前列腺炎\"><a class=\"anchor\" href=\"#一-急性细菌性前列腺炎\">#</a> (一)  急性细菌性前列腺炎</h3>\n<h4 id=\"1-病因-2\"><a class=\"anchor\" href=\"#1-病因-2\">#</a> \\1.    病因</h4>\n<ol>\n<li>\n<p>多在劳累、饮酒、性生活过于频繁后发生，部分病人继发于慢性前列腺炎</p>\n</li>\n<li>\n<p>留置尿管，经尿道进行器械操作或患有膀胱炎及尿道炎时，细菌或含有细菌的尿液经后尿道和前列腺导管逆流至前列腺</p>\n</li>\n<li>\n<p>经直肠或经会阴前列腺穿刺，细菌可直接或通过淋巴管入前列腺，也可导致急性前列腺炎发生</p>\n</li>\n<li>\n<p>身体其他部位感染灶的细菌也可经血流播散至前列腺</p>\n</li>\n<li>\n<p>常见致病菌为革兰阴性杆菌，也有葡萄球菌和链球菌，偶有厌氧菌</p>\n</li>\n</ol>\n<h4 id=\"2-病理-2\"><a class=\"anchor\" href=\"#2-病理-2\">#</a> \\2.    病理</h4>\n<p>后尿道前列腺表面黏膜充血、水肿，前列腺腺泡有白细胞浸润。炎症可扩散至附睾，引起附睾炎。大部分病例经治疗缓解，部分转变为慢性前列腺炎或前列腺脓肿</p>\n<h4 id=\"3-临床表现和诊断\"><a class=\"anchor\" href=\"#3-临床表现和诊断\">#</a> \\3.    临床表现和诊断</h4>\n<ol>\n<li>\n<p>起病急，表现为高热、寒颤伴有尿频、尿急、尿痛及会阴部疼痛</p>\n</li>\n<li>\n<p>前列腺充血、肿大，形成脓肿，有饱满或波动感。</p>\n</li>\n<li>\n<p>有时出现排尿困难或急性尿潴留，往往伴有急性膀胱炎。</p>\n</li>\n<li>\n<p>直肠指诊前列腺肿大、有明显触痛、局部温度增高。</p>\n</li>\n<li>\n<p>急性期禁忌做前列腺按摩或穿刺，以免引起菌血症。可做尿细菌培养及药物敏感试验。</p>\n</li>\n<li>\n<p>B 超可见前列腺增大，内部回声不均匀</p>\n</li>\n</ol>\n<h4 id=\"4-并发症\"><a class=\"anchor\" href=\"#4-并发症\">#</a> \\4.    并发症</h4>\n<p>急性尿潴留、附睾炎、直肠或会阴瘘，血行感染可同时发生肾盂肾炎</p>\n<h4 id=\"5-治-疗-2\"><a class=\"anchor\" href=\"#5-治-疗-2\">#</a> \\5.    治 疗</h4>\n<ol>\n<li>\n<p>给予全身支持治疗，卧床休息，大量饮水，退热止痛</p>\n</li>\n<li>\n<p>如出现急性尿潴留，可行耻骨上膀胱穿刺造口，尽量避免经尿道留置尿管</p>\n</li>\n<li>\n<p>快速有效地应用抗生素是治疗的关键。</p>\n</li>\n</ol>\n<p>①　喹诺酮类：环丙沙星、氧氟沙星；以及头孢菌素、妥布霉素、氨苄西林等。</p>\n<p>②　衣原体感染可用红霉素、阿奇霉素等。</p>\n<p>③　如淋球菌感染可用头孢曲松。</p>\n<p>④　如厌氧菌感染则用甲硝唑。一疗程 7 日，可延长至 14 日</p>\n<ol start=\"4\">\n<li>并发前列腺脓肿则应经会阴切开引流</li>\n</ol>\n<h3 id=\"二-慢性前列腺炎\"><a class=\"anchor\" href=\"#二-慢性前列腺炎\">#</a> (二)  慢性前列腺炎</h3>\n<h4 id=\"1-病因-3\"><a class=\"anchor\" href=\"#1-病因-3\">#</a> \\1.    病因</h4>\n<ol>\n<li>\n<p>主要感染途径是经尿道逆行感染，感染的尿液经前列腺导管逆流至前列腺，少数由急性细菌性前列腺炎迁延而致</p>\n</li>\n<li>\n<p>过度饮酒、性刺激、下尿路梗阻是诱发因素，病原菌多为革兰阴性杆菌</p>\n</li>\n<li>\n<p>慢性非细菌性前列腺炎在临床更为常见，致病菌为沙眼衣原体、解脲脲原体、隐球菌等</p>\n</li>\n<li>\n<p>前列腺痛的病因与盆底肌、前列腺被膜和尿道约肌紧张、尿液返流、前列腺受到尿液的化学刺激有关</p>\n</li>\n</ol>\n<h4 id=\"2-病-理\"><a class=\"anchor\" href=\"#2-病-理\">#</a> \\2.    病 理</h4>\n<ol>\n<li>\n<p>在前列腺腺泡内和间质中有不同程度的浆细胞和巨噬细胞浸润</p>\n</li>\n<li>\n<p>前列腺组织内有钙化或微结石产生</p>\n</li>\n<li>\n<p>前列腺被膜增厚</p>\n</li>\n</ol>\n<h4 id=\"3-临床表现-2\"><a class=\"anchor\" href=\"#3-临床表现-2\">#</a> \\3.    临床表现</h4>\n<ol>\n<li>\n<p>不同的病人可出现完全不同的临床症状</p>\n</li>\n<li>\n<p>尿路刺激症状：大多数病人有不同程度的尿频、尿急、尿痛、尿道不适或烧灼感。部分病人在排尿终末或大便时尿道口有白色分泌物流出，合并精囊炎时，可有血精</p>\n</li>\n<li>\n<p>疼痛：疼痛的部位在会阴部、阴囊和睾丸、耻骨上、下腹部、腰骶部、腹股沟部。一般呈持续钝痛，如胀痛或坠痛等。有时疼痛难以忍受</p>\n</li>\n<li>\n<p>性功能障碍：部分病人并发阴茎勃起功能障碍、早泄、遗精或射精痛</p>\n</li>\n<li>\n<p>精神紧张：部分病人因为症状久治不愈或对慢性前列腺炎缺少正确了解和认识，出现精神紧张、萎靡、情绪低落、头昏、失眠，严重者出现神经官能症</p>\n</li>\n<li>\n<p>并发症：虹膜炎、关节炎、神经炎、肌炎、不育等</p>\n</li>\n</ol>\n<h4 id=\"4-诊-断\"><a class=\"anchor\" href=\"#4-诊-断\">#</a> \\4.    诊 断</h4>\n<ol>\n<li>\n<p>根据典型的临床表现</p>\n</li>\n<li>\n<p>直肠前列腺指诊：早期，前列腺一般比较饱满，前列腺液较多；病程较长时，前列腺体积缩小，质地韧硬</p>\n</li>\n<li>\n<p>B 超可见前列腺内部回声不均匀，前列腺被膜增厚。膀胱镜检查可见后尿道、精阜充血、肿胀</p>\n</li>\n<li>\n<p>慢性细菌性前列腺炎前列腺液内白细胞增多（＞10 个 / 高倍视野），磷脂小体减少，细菌培养可呈阳性</p>\n</li>\n<li>\n<p>慢性非细菌性前列腺炎前列腺液可见多量白细胞，但细菌培养为阴性。</p>\n</li>\n<li>\n<p>分段尿及前列腺液培养检查：检查前充分饮水</p>\n</li>\n</ol>\n<p>①　初尿 10 ml （VB1），再排尿 200ml</p>\n<p>②　中段尿 10ml （VB2）。</p>\n<p>③　作前列腺按摩，收集前列腺液（EPS）</p>\n<p>④　完毕后排尿 10 ml（VB3）</p>\n<p>均送细菌培养及菌落计数。菌落计数前列腺液或 VB3＞VB1 和 VB2 10 倍可诊断为细菌性前列腺炎。若 VB1 及 VB2 细菌培养阴性，VB3 和前列腺液细菌培养阳性，即可确定诊断。此检查方法即 Meares -Stemey 的 “四杯法”</p>\n<h4 id=\"5-治-疗-3\"><a class=\"anchor\" href=\"#5-治-疗-3\">#</a> \\5.    治 疗</h4>\n<ol>\n<li>\n<p>首选红霉素、多西环素（强力霉素）等具有较强穿透力的抗菌药物。</p>\n</li>\n<li>\n<p>综合治疗可采用：热水坐浴及理疗（如离子透入）可减轻局部炎症，促进吸收；前列腺按摩，每周 1 次，以引流炎性分泌物；忌酒及辛辣食物，避免长时间骑、坐，有规律的性生活；中医治疗，应用活血化瘀和清热解毒药物</p>\n</li>\n<li>\n<p>对于慢性非细菌性前列腺炎：致病原为衣原体、支原体则可用米诺环素、多西环素及碱性药物。其他可用红霉素、甲硝唑等。α 受体阻滞剂可以解痉、改善症状。某些植物制剂对改善症状也有一定的疗效。有精神心理障碍者，可用抗抑郁、焦虑等药物。此外，每日 1 次热水坐浴；每周 1 次前列腺按摩以及去除易造成盆腔、前列腺充血的因素，往往也可有良好的疗效。生物反馈，针灸等也有一定的效果</p>\n</li>\n</ol>\n<h3 id=\"三-慢性附睾炎\"><a class=\"anchor\" href=\"#三-慢性附睾炎\">#</a> (三)  慢性附睾炎</h3>\n<h4 id=\"1-病因-4\"><a class=\"anchor\" href=\"#1-病因-4\">#</a> \\1.    病因</h4>\n<p>多由急性附睾炎治疗不彻底而形成。部分病人无急性炎症过程，可伴有慢性前列腺炎</p>\n<h4 id=\"2-病理-3\"><a class=\"anchor\" href=\"#2-病理-3\">#</a> \\2.    病理</h4>\n<ol>\n<li>\n<p>慢性附睾炎可发生附睾纤维化</p>\n</li>\n<li>\n<p>显微镜下可见广泛的瘢痕组织，附睾管闭塞，淋巴细胞及浆细胞浸润。</p>\n</li>\n<li>\n<p>如发生双侧慢性附睾炎可导致男性不育</p>\n</li>\n</ol>\n<h4 id=\"3-临床表现-3\"><a class=\"anchor\" href=\"#3-临床表现-3\">#</a> \\3.    临床表现</h4>\n<ol>\n<li>\n<p>临床表现为阴囊有轻度不适，或坠胀痛，休息后好转。</p>\n</li>\n<li>\n<p>附睾局限性增厚及肿大，与睾丸的界限清楚，精索、输精管可增粗，前列腺质地偏硬。</p>\n</li>\n<li>\n<p>结核性附睾炎附睾质地稍硬，常发生于附睾尾部，输精管增粗并触及串珠状结节，前列腺小而有结节，同侧精囊多有病变；尿液镜检有白细胞、红细胞；B 超、X 线及膀胱镜检查常可发现肾结核的证据。</p>\n</li>\n<li>\n<p>双侧附睾感染，可影响生育；</p>\n</li>\n</ol>\n<h4 id=\"4-治疗-2\"><a class=\"anchor\" href=\"#4-治疗-2\">#</a> \\4.    治疗</h4>\n<ol>\n<li>\n<p>对症处理，包括托起阴囊、热敷、热水坐浴、理疗等，重视前列腺炎的综合治疗</p>\n</li>\n<li>\n<p>急性发作时可使用抗生素。疼痛剧烈、持久、反复发作或形成脓肿者可行手术切除附睾</p>\n</li>\n<li>\n<p>有慢性前列腺炎者，要同时予以治疗</p>\n</li>\n</ol>\n<h3 id=\"四-急性附睾炎\"><a class=\"anchor\" href=\"#四-急性附睾炎\">#</a> (四)  急性附睾炎</h3>\n<h4 id=\"1-病因-5\"><a class=\"anchor\" href=\"#1-病因-5\">#</a> \\1.    病因</h4>\n<ol>\n<li>\n<p>多见于中青年，多由泌尿系感染和前列腺炎、精囊炎、性传播疾病扩散所致</p>\n</li>\n<li>\n<p>多从输精管逆行传播</p>\n</li>\n<li>\n<p>致病菌多为大肠埃希菌</p>\n</li>\n</ol>\n<h4 id=\"2-病理-4\"><a class=\"anchor\" href=\"#2-病理-4\">#</a> \\2.    病理</h4>\n<p>附睾肿胀：炎症开始于附睾尾部，扩散至附睾头部，可形成脓肿。</p>\n<h4 id=\"3-临床表现-4\"><a class=\"anchor\" href=\"#3-临床表现-4\">#</a> \\3.    临床表现</h4>\n<ol>\n<li>\n<p>起病急，全身症状明心：畏寒、高热</p>\n</li>\n<li>\n<p>病侧阴囊肿胀，阴囊皮肤红肿发热、疼痛，并沿精索、下腹部以及会阴部放射</p>\n</li>\n<li>\n<p>睾丸精索肿大增粗</p>\n</li>\n<li>\n<p>可伴膀胱刺激征</p>\n</li>\n<li>\n<p>血白细胞、中性粒细胞升高</p>\n</li>\n</ol>\n<h4 id=\"4-诊断-2\"><a class=\"anchor\" href=\"#4-诊断-2\">#</a> \\4.    诊断</h4>\n<ol>\n<li>\n<p>典型临床症状</p>\n</li>\n<li>\n<p>睾丸扭转：多见于青少年，常在安静状态发病，起病急，阴囊疼痛明显</p>\n</li>\n</ol>\n<h4 id=\"5-治疗\"><a class=\"anchor\" href=\"#5-治疗\">#</a> \\5.    治疗</h4>\n<ol>\n<li>\n<p>卧床休息，睾丸托起，止痛散热</p>\n</li>\n<li>\n<p>广谱抗生素抗炎</p>\n</li>\n</ol>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/13/medical/miniaoSystem/",
            "url": "http://zyczxq.com/2021/09/13/medical/miniaoSystem/",
            "title": "第四十八篇 泌尿系统损伤",
            "date_published": "2021-09-13T11:18:14.000Z",
            "content_html": "<h1 id=\"第四十八篇-泌尿系统损伤\"><a class=\"anchor\" href=\"#第四十八篇-泌尿系统损伤\">#</a> 第四十八篇 泌尿系统损伤</h1>\n<h2 id=\"一-肾外伤\"><a class=\"anchor\" href=\"#一-肾外伤\">#</a> 一、肾外伤</h2>\n<h3 id=\"一-病因\"><a class=\"anchor\" href=\"#一-病因\">#</a> (一)  病因</h3>\n<p>\\1.    开放性肾损伤：刀伤、火器伤、等锐器伤。常伴有胸、腹部其他组织器官损伤。</p>\n<p>\\2.    闭合性肾损伤：</p>\n<ol>\n<li>\n<p>直接暴力伤：撞击、跌伤、交通事故</p>\n</li>\n<li>\n<p>间接性损伤：减速伤</p>\n</li>\n</ol>\n<p>\\3.    医源性肾损伤：体外冲击波碎石，PCNL 术</p>\n<p>\\4.    病理肾损伤（肾积水、肾肿瘤、肾结核等）</p>\n<h3 id=\"二-病理\"><a class=\"anchor\" href=\"#二-病理\">#</a> (二)  病理</h3>\n<p>\\1.    肾挫伤：损伤仅局限于部分肾实质，形成肾瘀斑和包膜下血肿，肾包膜及肾盂粘膜完整。可有少量血尿。</p>\n<p>\\2.    肾部分损伤：肾实质部分裂伤，可致肾周血肿。可伴有明显的血尿</p>\n<p>\\3.    肾全层裂伤：肾实质深度裂伤。外及肾包膜，内达肾盂肾盏粘膜，此时常引起广泛的肾周血肿、血尿和尿外渗。</p>\n<p>\\4.    肾蒂血管外伤：肾蒂或肾段血管的部分或全部撕裂时可引起大出血、休克，常来不及诊治就死亡。</p>\n<p>\\5.    肾动脉血栓形成（突然减速或加速运动如车祸、从高处坠落。）</p>\n<p>​</p>\n<p>晚期病变：</p>\n<p>\\1.    由于持久尿外渗形成的尿囊肿；</p>\n<p>\\2.    血肿、组织纤维化、肾积水；</p>\n<p>\\3.    动静脉瘘或假性肾动脉瘤；</p>\n<p>\\4.    部分肾实质缺血或肾蒂周围纤维化压迫肾动脉，引起肾血管性高血压。</p>\n<h3 id=\"三-临床表现\"><a class=\"anchor\" href=\"#三-临床表现\">#</a> (三)  临床表现</h3>\n<p>\\1.    休克：多因创伤所致失血性休克。临床上应注意合并胸腹其他组织、器官损伤的可能</p>\n<p>\\2.    血尿：肾损伤患者大多有血尿</p>\n<p>\\3.    疼痛：肾包膜下血肿、肾周围软组织损伤、出血或尿外渗引起患侧腰、腹部疼痛。</p>\n<p>\\4.    腰腹部肿块：血液、尿液渗入肾周围组织可使局部肿胀，形成肿块</p>\n<p>\\5.    发热：由于血肿、尿外渗易继发感染，甚至导致肾周脓肿或化脓性腹膜炎。</p>\n<h3 id=\"四-诊断\"><a class=\"anchor\" href=\"#四-诊断\">#</a> (四)  诊断</h3>\n<p>\\1.    病史与体查</p>\n<p>\\2.    化验：尿常规、血常规 。</p>\n<p>\\3.    特殊检查</p>\n<ol>\n<li>\n<p>CT：首选检查。可清晰显示肾皮质裂伤、尿外渗和血肿范围</p>\n</li>\n<li>\n<p>B 型超声：能提示肾损害的程度、肾包膜下和肾周血肿及尿外渗情况</p>\n</li>\n<li>\n<p>IVP</p>\n</li>\n<li>\n<p>动脉造影：少用</p>\n</li>\n</ol>\n<h3 id=\"五-治疗\"><a class=\"anchor\" href=\"#五-治疗\">#</a> (五)  治疗</h3>\n<p>\\1.    紧急处理：有大出血、休克的病人（紧记一切创伤的急诊处理均以稳定生命体征，抢救生命为首要任务。）</p>\n<p>\\2.    保守治疗：主要针对肾包膜下血肿、表浅肾皮质裂伤及肾周围血肿的治疗。</p>\n<ol>\n<li>\n<p>绝对卧床休息 2－4 周，不宜过早离床活动，血尿消失后才可以允许病人离床活动。过早过多离床活动，有可能再度出血。恢复后 2－3 个月避免体力劳动及运动。</p>\n</li>\n<li>\n<p>密切观察生命体征，观察尿液颜色，定期复查血常规：血红蛋白、血细胞比容。</p>\n</li>\n<li>\n<p>及时补充血容和热量，维持水、电解质平衡，必要时输血。</p>\n</li>\n<li>\n<p>广谱抗生素治疗。</p>\n</li>\n<li>\n<p>止痛、止血和镇静治疗。</p>\n</li>\n</ol>\n<p>\\3.    手术治疗：</p>\n<ol>\n<li>\n<p>开放性肾损伤：一旦确诊马上手术治疗</p>\n</li>\n<li>\n<p>闭合性肾损伤：一旦确诊为严重肾裂伤、肾碎裂及肾蒂损伤应手术治疗</p>\n</li>\n</ol>\n<p>保守治疗期间需改手术治疗的指征：</p>\n<ol>\n<li>\n<p>经积极抗休克治疗后生命体症仍未有改善，提示内出血</p>\n</li>\n<li>\n<p>血尿逐渐加重，血红蛋白和血细胞比容继续降低；</p>\n</li>\n<li>\n<p>腰、腹部肿块明显增大；</p>\n</li>\n<li>\n<p>有腹腔脏器损伤可能。</p>\n</li>\n</ol>\n<h2 id=\"二-输尿管外伤\"><a class=\"anchor\" href=\"#二-输尿管外伤\">#</a> 二、输尿管外伤</h2>\n<h3 id=\"一-病因-2\"><a class=\"anchor\" href=\"#一-病因-2\">#</a> (一)  病因</h3>\n<p>\\1.    医源性外伤：</p>\n<ol>\n<li>\n<p>与输尿管腔内器械操作有关：经膀胱镜逆行输尿管插管、输尿管镜检</p>\n</li>\n<li>\n<p>与输尿管腔外手术操作有关：盆腔、腹膜后的开放及腹腔镜手术</p>\n</li>\n</ol>\n<p>\\2.    开放性手术损伤：常发生在骨盆、后腹膜广泛解剖的手术如结肠、直肠、子宫切除术以及大血管手术；</p>\n<p>\\3.    放射性损伤：见于宫颈癌、前列腺癌放疗后，使输尿管管壁水肿、出血、坏死、形成尿瘘或纤维瘢痕组织形成；</p>\n<h3 id=\"二-临床表现\"><a class=\"anchor\" href=\"#二-临床表现\">#</a> (二)  临床表现</h3>\n<p>\\1.   血尿：常见于器械损伤输尿管粘膜，一般血尿会自身缓解</p>\n<p>\\2.   尿外渗：可发生损伤时或数日后，尿液由输尿管损伤处渗入后腹膜间隙，引起腰痛、腹痛、腹胀、局部肿胀、包块及触痛。</p>\n<p>\\3.   尿瘘：尿液与腹壁创口或阴道、肠道创口相通，形成尿瘘</p>\n<p>\\4.   梗阻症状：输尿管被缝扎，可有患侧腰部胀痛、腰肌紧张、肾区叩痛及发热，双侧输尿感被结扎，则可发生无尿</p>\n<h3 id=\"三-诊断\"><a class=\"anchor\" href=\"#三-诊断\">#</a> (三)  诊断</h3>\n<p>\\1.   有外伤、盆腔手术，输尿管内器械操作史</p>\n<p>\\2.   临床症状</p>\n<p>\\3.   辅助检查：</p>\n<ol>\n<li>\n<p>静脉注射靛胭脂：可见蓝色尿液从输尿管裂口流出；</p>\n</li>\n<li>\n<p>逆行肾盂造影显：输尿管插管至损伤部位受阻，示梗阻或造影剂外溢</p>\n</li>\n<li>\n<p>逆行尿路造影</p>\n</li>\n<li>\n<p>超声</p>\n</li>\n<li>\n<p>放射性核素</p>\n</li>\n<li>\n<p>CT</p>\n</li>\n</ol>\n<h3 id=\"四-治疗\"><a class=\"anchor\" href=\"#四-治疗\">#</a> (四)  治疗</h3>\n<p>外伤性输尿管损伤的处理原则：</p>\n<p>①　先抗休克治疗，处理其他严重合并损伤，</p>\n<p>②　尔后处理输尿管损伤，只要病情允许，输尿管损伤应尽早修复伤，以利尿液通畅，保护肾功能。</p>\n<p>\\1.    早期治疗</p>\n<ol>\n<li>\n<p>输尿管逆行插管所致黏膜外伤出血</p>\n</li>\n<li>\n<p>钳夹伤或小穿孔：宜从输尿管切口插入双 J 形输尿管、支架引流管 (F6)</p>\n</li>\n<li>\n<p>输尿管被结扎：一旦被发现有误，立即去除结扎线</p>\n</li>\n<li>\n<p>输尿管断离、部分缺损</p>\n</li>\n</ol>\n<p>\\2.    晚期治疗</p>\n<ol>\n<li>\n<p>输尿管狭窄：可留置双 J 管，或可行粘连松解、狭窄段切除。</p>\n</li>\n<li>\n<p>尿瘘：尿瘘发生 3 个月后再进行输尿管修补。</p>\n</li>\n<li>\n<p>输尿管完全梗阻：若梗阻不能及时解除时可先行肾造瘘，1－2 月后再作手术。</p>\n</li>\n<li>\n<p>肾功能重度损害或丧失：损伤性输尿管狭窄所致严重肾积水或感染、肾功能丧失，对侧肾功能正常时可行患侧肾切除。</p>\n</li>\n</ol>\n<h2 id=\"三-膀胱外伤\"><a class=\"anchor\" href=\"#三-膀胱外伤\">#</a> 三、膀胱外伤</h2>\n<h3 id=\"一-病因-3\"><a class=\"anchor\" href=\"#一-病因-3\">#</a> (一)  病因</h3>\n<p>\\1.    开放性损伤：锐器贯通伤所致，常合并其他脏器损伤</p>\n<p>\\2.    闭合性损伤：当膀胱充盈时，下腹部遭撞击、挤压、骨盆骨折片刺破膀胱壁</p>\n<p>\\3.    医源性损伤：膀胱镜检查或治疗，腹股沟疝修补术、阴道手术等可伤及膀胱</p>\n<p>\\4.    自发性破裂：有病变的膀胱过度膨胀，发生破裂。</p>\n<h3 id=\"二-病理-2\"><a class=\"anchor\" href=\"#二-病理-2\">#</a> (二)  病理</h3>\n<p>\\1.    挫伤：仅伤及膀胱粘膜或肌层，无尿外渗，可发生血尿</p>\n<p>\\2.    膀胱破裂：严重损伤可发生膀胱破裂，分为：</p>\n<ol>\n<li>\n<p>腹膜外型：膀胱前壁损伤、膀胱壁破裂，但腹膜完整。尿液外渗到膀胱周围组织及耻骨后间隙，沿骨盆筋膜到盆底，或沿输尿管周围疏松组织蔓延到肾区</p>\n</li>\n<li>\n<p>腹膜内型：膀胱后壁及顶部，膀胱壁破裂伴腹膜破裂，与腹腔相通，流入腹腔引起腹膜炎</p>\n</li>\n</ol>\n<h3 id=\"三-临床表现-2\"><a class=\"anchor\" href=\"#三-临床表现-2\">#</a> (三)  临床表现</h3>\n<p>1、 休克：骨盆骨折所致剧痛、大出血，膀胱破裂引起尿外渗及腹膜炎</p>\n<p>2、 腹痛：腹膜外破裂时，尿外渗及血肿引起下腹部疼痛，压痛及肌紧张。腹膜内破裂时，尿液流入腹腔而引起急性腹膜炎症状</p>\n<p>3、 血尿和排尿困难</p>\n<p>4、 尿瘘：开放性损伤可有体表伤口漏尿</p>\n<p>5、 局部症状：闭合性外伤时常伴有表皮肿胀、血肿和瘀斑</p>\n<h3 id=\"四-诊断-2\"><a class=\"anchor\" href=\"#四-诊断-2\">#</a> (四)  诊断</h3>\n<p>1、 病史和体检：有下腹部外伤史或骨盆骨折史，专科查体</p>\n<p>2、 导尿试验及注水试验：经导管注入灭菌生理盐水 200ML，片刻后吸出，液体外漏时吸出量会减少，腹腔液体回流时吸出量会增加，若液体进出量差异很大，提示膀胱破裂。</p>\n<p>3、 X 线检查：</p>\n<ol>\n<li>\n<p>腹平片可以发现骨盆骨折或其他骨折；</p>\n</li>\n<li>\n<p>膀胱造影自导尿管注入 15% 泛影葡胺 300ML，拍摄前后位片，可发现造影剂漏出膀胱外</p>\n</li>\n</ol>\n<h3 id=\"五-治疗-2\"><a class=\"anchor\" href=\"#五-治疗-2\">#</a> (五)  治疗</h3>\n<p>\\1.    紧急处理：抗休克</p>\n<p>\\2.    保守治疗：膀胱挫伤或造影剂仅有少量尿外渗，可从尿道插入导尿  管持续引流尿液 7-10 天</p>\n<p>\\3.    手术治疗：</p>\n<ol>\n<li>\n<p>膀胱破裂伴有出血和尿外渗，病情严重，须尽早施行手术。</p>\n</li>\n<li>\n<p>修补膀胱穿孔，作耻骨上膀胱造瘘。</p>\n</li>\n<li>\n<p>如为腹膜内破裂，应行剖腹探查，分层修补腹膜与膀胱壁，并作腹膜外耻骨上膀胱造瘘。</p>\n</li>\n</ol>\n<p>\\4.    并发症处理</p>\n<h2 id=\"四-尿道外伤\"><a class=\"anchor\" href=\"#四-尿道外伤\">#</a> 四、尿道外伤</h2>\n<h3 id=\"一-病因-4\"><a class=\"anchor\" href=\"#一-病因-4\">#</a> (一)  病因</h3>\n<p>男性前尿道损伤多发生于球部，这段尿道固定在会阴部。会阴部骑跨伤</p>\n<h3 id=\"二-病理-3\"><a class=\"anchor\" href=\"#二-病理-3\">#</a> (二)  病理</h3>\n<p>\\1.    前尿道损伤</p>\n<table>\n<thead>\n<tr>\n<th>根据外伤程度</th>\n<th>根据外伤部位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>①　 尿道挫伤：仅局部水肿，一般不发生尿道狭窄  ②　 尿道裂伤：部分尿道壁完整，愈后往往有瘢痕性尿道狭窄  ③　 尿道断裂：伤处完全断离，断端退缩分离，血肿较大时发生尿潴留，用力排尿则发生尿外渗</td>\n<td>①　 尿道球部：血液渗入会阴浅筋膜，使回音、阴囊、阴茎肿胀  ②　 尿道阴茎部外伤：如阴茎筋膜完整，血液渗入阴茎筋膜；若阴茎筋膜破裂，尿外渗与引导球部外伤相同</td>\n</tr>\n</tbody>\n</table>\n<p>\\2.    后尿道损伤：骨盆骨折引起尿道膜部撕裂，持股前列腺韧带撕裂致前列腺向上后方位移。尿液沿前列腺尖处可外审到耻骨后间隙和膀胱周围</p>\n<h3 id=\"三-临床表现-3\"><a class=\"anchor\" href=\"#三-临床表现-3\">#</a> (三)  临床表现</h3>\n<p>\\1.    尿道出血</p>\n<p>\\2.    疼痛</p>\n<p>\\3.    局部肿胀</p>\n<p>\\4.    排尿困难</p>\n<p>\\5.    尿外渗</p>\n<h3 id=\"四-诊断-3\"><a class=\"anchor\" href=\"#四-诊断-3\">#</a> (四)  诊断</h3>\n<p>\\1.    病史和体检</p>\n<p>\\2.    诊断性导尿</p>\n<p>\\3.    逆行尿道造影</p>\n<h3 id=\"五-治疗-3\"><a class=\"anchor\" href=\"#五-治疗-3\">#</a> (五)  治疗</h3>\n<p>\\1.    紧急处理：压迫止血，防止休克</p>\n<p>\\2.    尿道挫伤：止血止痛、抗感染，必要时导尿</p>\n<p>\\3.    尿道断裂：导尿，必要时会阴尿道修补术</p>\n<p>\\4.    并发症处理：</p>\n<ol>\n<li>\n<p>尿外渗：切开引流；</p>\n</li>\n<li>\n<p>尿道狭窄：尿道扩张；</p>\n</li>\n<li>\n<p>尿瘘：解除狭窄，清理瘘管</p>\n</li>\n</ol>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/09/medical/waike1/",
            "url": "http://zyczxq.com/2021/09/09/medical/waike1/",
            "title": "第四十六篇   泌尿、男性生殖系统外科检查和诊断",
            "date_published": "2021-09-09T04:18:33.000Z",
            "content_html": "<h1 id=\"第四十六篇-泌尿-男性生殖系统外科检查和诊断\"><a class=\"anchor\" href=\"#第四十六篇-泌尿-男性生殖系统外科检查和诊断\">#</a> 第四十六篇   泌尿、男性生殖系统外科检查和诊断</h1>\n<h2 id=\"一-主要症状\"><a class=\"anchor\" href=\"#一-主要症状\">#</a> 一、主要症状</h2>\n<p>主要分为四类：</p>\n<p>①　与泌尿系统或男性生殖系统直接相关，如血尿、阴囊肿块等</p>\n<p>②　与其他器官系统相关的症状，如消化道症状、骨痛等；</p>\n<p>③　全身症状，如发热、体重减轻等；</p>\n<p>④　无明显的症状，在其他检查时偶被发现；</p>\n<h3 id=\"1疼痛\"><a class=\"anchor\" href=\"#1疼痛\">#</a> （1）疼痛</h3>\n<h4 id=\"1肾和输尿管痛\"><a class=\"anchor\" href=\"#1肾和输尿管痛\">#</a> 1) 肾和输尿管痛：</h4>\n<p>①　 肾及其包膜、上段输尿管的受脊髓的胸 10 - 腰 1 的感觉神经支配</p>\n<p>②　 多由患肾使肾包膜扩张、炎症或集合系统扩张所致</p>\n<p>③　 患肾引起的疼痛多呈持续性钝痛，局限于脊肋角、腰部和上腹部；亦可为锐痛，伴有腹股沟、同侧睾丸或腰椎方向的放射痛</p>\n<p>④　 当肾盂输尿管连接部或输尿管急性完全性梗阻时，发生肾绞痛：</p>\n<p>呈阵发性发作的刀割样剧烈疼痛</p>\n<p>恶心、呕吐</p>\n<p>（放射痛）疼痛由脊肋角向下沿输尿管行径可放射至下腹部、膀胱区及会阴部，男性放射至同侧阴囊或睾丸，女性放射至大阴唇</p>\n<p>间歇期可无任何症状</p>\n<h4 id=\"2-膀胱痛\"><a class=\"anchor\" href=\"#2-膀胱痛\">#</a> 2)    膀胱痛</h4>\n<p>①　 急性尿潴留导致膀胱过度扩张，疼痛常为下腹部胀痛不适</p>\n<p>②　 慢性尿潴留（膀胱可以扩张至平脐，但多数症状不明显）</p>\n<p>③　 在膀胱充盈时出现严重疼痛，常为间质性膀胱炎、严重的结核性膀胱炎所致</p>\n<p>④　 在排尿终末出现之疼痛，常见于膀胱结石、膀胱炎等，常伴有尿频、尿急及排尿困难，有时疼痛可放射至阴茎龟头。</p>\n<h4 id=\"3-前列腺痛\"><a class=\"anchor\" href=\"#3-前列腺痛\">#</a> 3)    前列腺痛</h4>\n<p>①　 会阴部剧烈胀痛见于急性前列腺炎或前列腺脓肿</p>\n<p>②　 会阴不适或轻度胀痛系慢性前列腺炎所致</p>\n<p>③　疼痛部位常不甚明确，甚至可引起阴囊疼痛，需与睾丸附睾炎鉴别</p>\n<p>④　 炎症等可会引起会阴、直肠、腰骶部、耻骨上区、腹股沟区及搞完的疼痛和不适</p>\n<h4 id=\"4-尿道痛\"><a class=\"anchor\" href=\"#4-尿道痛\">#</a> 4)    尿道痛</h4>\n<p>①　 可呈灼痛、刺痛和剧烈疼痛，常见于尿道炎和尿道结石，排尿时疼痛加剧。</p>\n<p>②　 有时输尿管下段结石引起疼痛也可放射到尿道口或阴茎头</p>\n<h4 id=\"5-阴囊痛\"><a class=\"anchor\" href=\"#5-阴囊痛\">#</a> 5)    阴囊痛</h4>\n<p>①　 附睾或睾丸炎症、睾丸扭转，损伤等可致阴囊部疼痛，表现为胀痛，剧烈疼痛和跳痛，并沿精索放射引起腹股部和下腹部疼痛</p>\n<p>②　 鞘膜积液、精索静脉曲张和睾丸肿瘤时可有阴囊坠胀感，疼痛并不明显</p>\n<h4 id=\"6-阴茎痛\"><a class=\"anchor\" href=\"#6-阴茎痛\">#</a> 6)    阴茎痛</h4>\n<p>①　 非勃起状态时发生于膀胱或尿道炎症，尿道口可放射痛</p>\n<p>②包皮嵌顿引起阴茎头远端和阴茎头回流障碍，局部水肿、淤血所致</p>\n<h3 id=\"2下尿路症状与排尿相关的症状\"><a class=\"anchor\" href=\"#2下尿路症状与排尿相关的症状\">#</a> （2）下尿路症状（与排尿相关的症状）</h3>\n<h4 id=\"1-刺激症状膀胱刺激症\"><a class=\"anchor\" href=\"#1-刺激症状膀胱刺激症\">#</a> 1)    刺激症状（膀胱刺激症）</h4>\n<p>①　 尿频：病人感到有尿意的次数明显增加</p>\n<p>ü 正常人尿次白天 4-6 次，夜间 0-1 次</p>\n<p>ü 正常膀胱容量男性约 400ml，女性约 500ml</p>\n<p>ü 随年龄、气候、饮水量、精神因素排尿次数可增多</p>\n<p>尿频可以分为两种情况：</p>\n<p>ü 尿总量增加，每次排尿量不变，排尿次数增加．除饮水量增加所致尿次增加的正常情况外，常见于某些内科疾病，如糖尿病、尿崩症、肾功能衰竭多尿期等</p>\n<p>ü 尿总量不变，每次排尿量减少，排尿次数增加：泌尿、生殖道炎症、膀胱容量减少、下尿路梗阻（前列腺增生症）时残余尿增多</p>\n<p>②　 尿急：一种突发的、强烈的排尿欲望，且很难被主观抑制而延迟排尿。每次尿量很少，常与尿频同时存在</p>\n<p>③　尿痛：排尿时感到尿道疼痛，可以发生在排尿初、中、末或排尿后。疼痛呈烧灼感，与膀胱、尿道或前列腺感染有关。尿痛常与尿频、尿急相伴随，三者同时出现，称为膀胱刺激症状</p>\n<h4 id=\"2-梗阻症状\"><a class=\"anchor\" href=\"#2-梗阻症状\">#</a> 2)    梗阻症状</h4>\n<p>①　 排尿困难：泛指临床表现为排尿延迟、尿线细小、分叉、滴沥、排尿时费力、尿后不净感、时间延长等。通常由于膀胱以下尿路梗阻所致。</p>\n<p>②　尿流中断：排尿过程中尿流突然中断，常伴有放射至远端尿道的剧烈疼痛。主要原因为膀胱结石，前列腺增生症</p>\n<p>③　 尿潴留：分为急性和慢性两类</p>\n<p>​    急性尿潴留：是由于膀胱颈以下严重梗阻，突然不能排尿，大量尿液潴留于膀胱内，膀胱过度充盈，膀胱逼尿肌发生弹性疲劳，暂时失去逼尿功能。腹部会阴部手术后切口疼痛亦可引起。</p>\n<p>慢性尿潴留：是由于膀胱颈以下不完全梗阻或神经源性膀胱所致。表现为排尿困难、膀胱充盈，甚至充盈性尿失禁</p>\n<h4 id=\"3-尿失禁\"><a class=\"anchor\" href=\"#3-尿失禁\">#</a> 3)    尿失禁</h4>\n<p>①　 持续性尿失禁（真性尿失禁）：尿道括约肌丧失控制尿液的功能。尿液持续地从膀胱或泌尿道瘘中流出，几乎没有正常的排尿，膀胱呈空虚状态</p>\n<p>②　 充溢性尿失禁（假性尿失禁）：膀胱过度充盈引起尿液不断外溢。见于各种原因导致的慢性尿潴留。</p>\n<p>③　 急迫性尿失禁：是指膀胱逼尿肌无抑制性收缩或继发于膀胱严重感染而致的尿失禁。</p>\n<p>④　 压力性尿失禁：当腹内压突然增高（咳嗽、喷嚏、大笑、运动等）时，尿液不随意地流出。多由于多次分娩或产伤导致膀胱支持组织或盆底松弛所致。</p>\n<h4 id=\"4-遗尿\"><a class=\"anchor\" href=\"#4-遗尿\">#</a> 4)    遗尿：</h4>\n<p>①　 除正常自主性排尿外，睡眠中出现无意识的排尿。</p>\n<p>②　 在 2-3 岁以前为生理性，3 岁以上除功能性以外，可由于神经源性膀胱、感染、后尿道瓣膜、尿道狭窄等病理因素引起。</p>\n<h3 id=\"3尿液改变\"><a class=\"anchor\" href=\"#3尿液改变\">#</a> （3）尿液改变</h3>\n<h4 id=\"1-尿量\"><a class=\"anchor\" href=\"#1-尿量\">#</a> 1)     尿量</h4>\n<p>①　 正常人 24 小时尿量为 1000～2000ml</p>\n<p>②　 尿量＜100ml/24h 为无尿；尿量＜400ml/24h 为少尿；尿量达 3000～5000ml/24h 为多尿；完全性无尿为尿闭 。</p>\n<p>③　 少尿和无尿提示肾功能受损或衰竭</p>\n<h4 id=\"2-尿的观察\"><a class=\"anchor\" href=\"#2-尿的观察\">#</a> 2)     尿的观察</h4>\n<h5 id=\"1血尿\"><a class=\"anchor\" href=\"#1血尿\">#</a> ①血尿：</h5>\n<p>尿液中含有红细胞，分为肉眼血尿和镜下血尿</p>\n<p>ü 肉眼血尿为肉眼能见到血色的尿，通常在 1000ml 尿中含 1ml 血液即肉眼可见</p>\n<p>ü 镜下血尿为新鲜尿离心后尿沉渣每高倍镜视野红细胞 &gt; 3 个</p>\n<p>ü 血尿的色泽因含血量、尿 pH 及出血部位而不同</p>\n<p>・来自膀胱的血尿或尿呈碱性时，色泽较鲜艳</p>\n<p>・来自肾、输尿管的血尿或尿呈酸性时，色泽较暗</p>\n<p>・来自膀胱的血尿可伴有大小不等的血块</p>\n<p>・来自肾、输尿管的血尿可伴有蚯蚓状血块  ü 三段血尿：</p>\n<p>・初始血尿：血尿出现于排尿初期，提示出血部位在尿道和膀胱颈。</p>\n<p>・终未血尿：血尿出现于排尿终未，提示病变在后尿道、膀胱颈和膀胱三角区</p>\n<p>・全程血尿：血尿出现于排尿全程，提示病变在膀胱或其以上部位。</p>\n<p>ü 几个注意的问题</p>\n<p>・有些药物可引起血尿，如环磷酰胺、别嘌呤醇、肝素等。</p>\n<p>・不是所有红色尿液都是血尿，有些食物和药物可以使尿液呈红色、黄红色或褐色，如大黄、酚酞、利福平、四环素、酚红、嘌呤类药物等。</p>\n<p>・血红蛋白尿、肌红蛋白尿或因前尿道病变出血所致尿道口滴血以及临近器官出血混入尿液不能称为血尿，应注意与相鉴别。</p>\n<p>・血尿程度与疾病严重性不成正比。</p>\n<h5 id=\"2混浊尿\"><a class=\"anchor\" href=\"#2混浊尿\">#</a> ②混浊尿：</h5>\n<p>尿液混浊，常见有晶体尿、磷酸盐尿、脓尿、乳糜尿等。</p>\n<p>・脓尿：是由于尿液中含大量白细胞，是泌尿系感染的表现。一般认为，新鲜尿液离心后，尿沉渣镜检每高倍镜视野白细胞＞5 个提示尿路感染或炎症</p>\n<p>・磷酸盐尿：尿中含有大量磷酸盐结晶，尿液白色而混浊．若外界气温低，尿排出时尚清亮、稍等即见变白，这是因为变冷后溶解度变小，磷酸盐结晶析出之故。临床上鉴别是否磷酸盐尿，取此尿 4～5ml 置于试管中，加入冰醋酸数滴，或加热可使尿液变清。</p>\n<p>・乳糜尿：尿中含有乳糜或淋巴液，尿呈牛奶状，可有乳糜凝块及脂肪滴漂浮。</p>\n<p>鉴别是否乳糜尿可取尿液 4～5ml 置于试管内，加 1ml 乙醚，混匀后尿液变清即为乳糜尿试验阳性。（<em>乳糜尿中的脂肪可溶解于乙醚中，而脂肪小滴可通过苏丹 **III</em> <em>醋酸乙醇染色液或者猩红染色液来识别。</em>）</p>\n<p>​    乳糜尿中含有红细胞，其颜色则为粉红色，称乳糜血尿．</p>\n<p>乳糜尿说明淋巴管与尿路沟通，多因血丝虫病阻塞了淋巴回流．长期有乳糜尿的 患者因营养物质大量丢失，常见消瘦。</p>\n<h5 id=\"3气尿\"><a class=\"anchor\" href=\"#3气尿\">#</a> ③气尿：</h5>\n<p>排尿同时有气体与尿液一起排出</p>\n<h3 id=\"4性功能障碍\"><a class=\"anchor\" href=\"#4性功能障碍\">#</a> （4）性功能障碍</h3>\n<p>男性性功能障碍表现为性欲低下、勃起功能障碍、射精障碍（早泄、不射精和逆行射精）等</p>\n<h4 id=\"勃起功能障碍\"><a class=\"anchor\" href=\"#勃起功能障碍\">#</a> 勃起功能障碍：</h4>\n<p>持续或反复不能达到或维持足够阴茎勃起以完成满意性生活</p>\n<h4 id=\"早泄\"><a class=\"anchor\" href=\"#早泄\">#</a> 早泄：</h4>\n<p>从初次性交开始，射精往往或总是在插入阴道 1 分钟左右发生（原发性早泄），或者射精潜伏时间有显著缩短，通常少于 3 分钟（继发性早泄）；总是或几乎总是不能延迟射精；消极的身心影响，如苦恼、忧虑、沮丧和（或）躲避性生活等</p>\n<h2 id=\"二-实验室检查和影像学检查的方法\"><a class=\"anchor\" href=\"#二-实验室检查和影像学检查的方法\">#</a> 二、实验室检查和影像学检查的方法。</h2>\n<h3 id=\"一-实验室检查\"><a class=\"anchor\" href=\"#一-实验室检查\">#</a> (一)  实验室检查</h3>\n<h4 id=\"1-尿液检查\"><a class=\"anchor\" href=\"#1-尿液检查\">#</a> 1、尿液检查：</h4>\n<p>尿液收集、尿沉渣、尿三杯试验、尿细菌学、尿细胞学检查、肿瘤标志物测定</p>\n<h5 id=\"1-尿标本采集\"><a class=\"anchor\" href=\"#1-尿标本采集\">#</a> 1)    尿标本采集：</h5>\n<p>①　标本应收集新鲜中段尿；</p>\n<p>②　尿液细菌学检查应消毒尿道外口，收集清洁中段尿或无菌导尿标本；</p>\n<p>③　耻骨上膀胱穿刺抽取尿液标本最为准确。</p>\n<p>④　男性包皮过长应翻开包皮后收集；女性应避开月经期。</p>\n<p>⑤　24 小时尿液标本根据检验项目要求收集。</p>\n<h5 id=\"2-尿常规检查\"><a class=\"anchor\" href=\"#2-尿常规检查\">#</a> 2)    尿常规检查：</h5>\n<p>包括颜色、透明度、酸硷反应、比重，蛋白、尿糖及显微镜检查红细胞，白细胞等。</p>\n<h5 id=\"3-尿三杯试验\"><a class=\"anchor\" href=\"#3-尿三杯试验\">#</a> 3)    尿三杯试验</h5>\n<p>①　以最初 10~15ml 尿为第一杯，</p>\n<p>②　以排尿最后 10ml 为第三杯，</p>\n<p>③　中间部分为第二杯</p>\n<p>④　收集时尿流应连续。</p>\n<p>⑤　可初步判定镜下血尿和脓尿的来源和病变部位。</p>\n<h5 id=\"4-尿细菌学检查\"><a class=\"anchor\" href=\"#4-尿细菌学检查\">#</a> 4)    尿细菌学检查</h5>\n<p>①　Gram 染色尿沉渣涂片检查：可初步提供细菌的种类，作为选用药物的参考。</p>\n<p>②　尿结核菌检查：尿沉渣抗酸染色涂片检查或结核菌培养。检查结核杆菌需收集 24 小时尿，浓缩后抗酸染色，应连续作三天。</p>\n<p>③　中段尿培养及菌落计数：尿内菌落计数每毫升 10 万以上提示为尿路感染，同时做药物敏感试验，供临床用药参考。</p>\n<h5 id=\"5-尿细胞学检查\"><a class=\"anchor\" href=\"#5-尿细胞学检查\">#</a> 5)    尿细胞学检查</h5>\n<p>①　应收集新鲜尿液的沉渣，涂片染色，镜下检查肿瘤细胞</p>\n<p>②　阳性结果提示可能有泌尿系统移行细胞肿瘤</p>\n<p>③　采用液基细胞学检查可提高检出率</p>\n<p>④　Gram 染色尿沉渣涂片检查：可初步提供细菌的种类，作为选用药物的参考。</p>\n<p>⑤　尿结核菌检查：尿沉渣抗酸染色涂片检查或结核菌培养。检查结核杆菌需收集 24 小时尿，浓缩后抗酸染色，应连续作三天。</p>\n<p>⑥　中段尿培养及菌落计数：尿内菌落计数每毫升 10 万以上提示为尿路感染，同时做药物敏感试验，供临床用药参考。</p>\n<h5 id=\"6-肿瘤标志物测定\"><a class=\"anchor\" href=\"#6-肿瘤标志物测定\">#</a> 6)    肿瘤标志物测定</h5>\n<h4 id=\"2-肾功能检查\"><a class=\"anchor\" href=\"#2-肾功能检查\">#</a> 2、肾功能检查：</h4>\n<p>①　尿比重：主要反映肾浓缩功能和排泄废物功能</p>\n<p>②　血尿素氮和血肌酐：正常肾组织不少于双侧肾总量的 1/3，血肌酐值仍保持正常水平。尿素氮受分解代谢、饮食、消化道出血等多种因素影响，不如血肌酐准确。</p>\n<p>③　内生肌酐清除率：血肌酐由肾小球滤过。内生肌酐清除率接近于用菊糖测定的肾小球滤过率</p>\n<p>④　酚红排泄试验</p>\n<h4 id=\"3-血清前列腺特异性抗原检测psa\"><a class=\"anchor\" href=\"#3-血清前列腺特异性抗原检测psa\">#</a> 3、  血清前列腺特异性抗原检测（PSA）：</h4>\n<p>①　前列腺特异性抗原由前列腺腺泡和导管的上皮细胞产生，具有前列腺组织特异性。</p>\n<p>②　健康男性血清 PSA＜4ng/ml，如＞10ng/ml 应高度怀疑前列腺癌可能。4~10ng/ml 结合磁共振检查综合判断。</p>\n<h4 id=\"4-前列腺液检查\"><a class=\"anchor\" href=\"#4-前列腺液检查\">#</a> 4、  前列腺液检查：</h4>\n<p>用前列腺按摩法采取前列腺液。</p>\n<p>①　正常前列腺液为稀簿乳白色液体，涂片镜检：可见多量的卵磷脂小体，白细胞数不超过 10 个 / 每高倍视野，偶见精子。</p>\n<p>②　前列腺炎时，白细胞或脓细胞 10 个 / 每高倍视野以上，卵磷脂小体减少。</p>\n<p>③　前列腺液亦可做细菌培养。急性前列腺炎或疑有前列腺癌时，不宜做前列腺按摩。</p>\n<h4 id=\"5-精液分析\"><a class=\"anchor\" href=\"#5-精液分析\">#</a> 5、  精液分析：</h4>\n<p>①　手淫或体外排精收集标本。检查前 3~7 天内没有排精，精液标本应立即送检或保存在体温下半小时内送检。</p>\n<p>②　是了解男性生育能力或输精管结扎术后效果的重要依据。</p>\n<p>③　常规精液检查包括量、颜色、pH、粘稠度、密度、数量、存活力、活动力、畸形率等精子状况及精浆生化测定。</p>\n<p>④　正常精液量 2～6 毫升，乳白色不透明的粘稠液体，5～30 分钟内液化，pH7～8，精子计数不少于 2000 万 /ml，精子存活率超过 60%，活动力大于 50% 正常形态精子超过 4%，畸形精子少于 96％。</p>\n<p>⑤　精浆中果糖反映精囊功能，枸橼酸和酸性磷酸酶反映前列腺功能，肉毒碱反映附睾功能。</p>\n<h3 id=\"二-影像学检查\"><a class=\"anchor\" href=\"#二-影像学检查\">#</a> (二)  影像学检查</h3>\n<h4 id=\"1-b超\"><a class=\"anchor\" href=\"#1-b超\">#</a> \\1.    B 超</h4>\n<p>①　泌尿外科疾病的筛选、诊断和随访，介入治疗</p>\n<p>②　确定肾肿块性质、结石和肾积水；测定残余尿、测量前列腺体积等；阴囊肿块。B 超引导下穿刺、引流及活检等</p>\n<p>③　近年超声造影逐步开展，由于不用有肾毒性的造影剂，可用于肾衰竭病人，亦用于禁忌作静脉尿路造影或不宜接受 X 线照射的病人。但超声检查有时受骨骼、气体等的干扰而影响诊断的正确性</p>\n<h4 id=\"2-x线检查\"><a class=\"anchor\" href=\"#2-x线检查\">#</a> \\2.    X 线检查</h4>\n<p>①　尿路平片：可显示肾轮廓、位置、大小，腰大肌阴影，不透光阴影以及骨性改变</p>\n<p>②　排泄性尿路造影：即静脉尿路造影，能显示尿路形态是否规则，有无扩张、推移、压迫和充盈缺损等；同时可了解分侧肾功能。造影前应作碘过敏试验。妊娠及肾功能严重损害为禁忌证</p>\n<p>③　逆行肾盂造影：经膀胱尿道镜行输尿管插管注入有机碘造影剂来显示输尿管和肾集合系统。适用于静脉尿路造影显示尿路不清晰或禁忌者</p>\n<p>④　顺行肾盂造影：在 B 超指引下经皮穿刺入肾盂，注入造影剂以显示上尿路情况。适用于上述造影方法失败或有禁忌而怀疑梗阻性病变存在者</p>\n<p>⑤　膀胱造影：采用导尿管置入膀胱后注入造影剂，可显示膀胱形态及其病变如损伤、畸形、瘘管、神经源性膀胱及膀胱肿瘤等</p>\n<p>⑥　血管造影</p>\n<p>⑦　淋巴造影</p>\n<p>⑧　精道造影</p>\n<p>⑨　CT：适用于鉴别肾囊肿和肾实质性病变，确定肾损伤范围和程度，肾、膀胱、前列腺癌及肾上腺肿瘤的诊断和分期</p>\n<h4 id=\"3-磁共振成像\"><a class=\"anchor\" href=\"#3-磁共振成像\">#</a> \\3.    磁共振成像</h4>\n<p>①　能显示被检查器官组织的结构和功能，并可显示脏器血流灌注情况。对分辨肾肿瘤的良、恶性，判定膀胱肿瘤浸润膀胱壁的深度、前列腺癌分期，确诊肾上腺肿块等，可以提供较 CT 更为可靠的依据</p>\n<p>②　有起搏器或金属支架的病人不宜行 MRI</p>\n<h4 id=\"4-放射性核素显像\"><a class=\"anchor\" href=\"#4-放射性核素显像\">#</a> \\4.    放射性核素显像</h4>\n<p>①　肾图：是在两个肾区测得的放射性核素活度与时间的函数曲线图，可测定肾小管分泌功能和显示上尿路有无梗阻</p>\n<p>②　肾显像：分静态和动态显像。静态显像显示核素在肾内的分布图像，而动态显像显示肾吸收、浓集和排出核素显像剂的全过程。能显示肾形态、大小及有无占位病变，可了解肾功能、测定肾小球滤过率和有效肾血流量</p>\n<p>③　肾上腺皮质和髓质核素显像： 对肾上腺疾病有诊断价值，尤用于肾上腺占位性病变如嗜铬细胞瘤</p>\n<p>④　阴囊显像：放射性核素血流检查可判断睾丸的存活及其能力，并可与对侧的血流灌注相比较，如常用于怀疑睾丸扭转或精索内静脉曲张等</p>\n<p>⑤　骨显像：可显示全身骨骼系统有无肿瘤转移，如肾癌、前列腺癌骨转移</p>\n",
            "tags": [
                "外科学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/07/medical/psychiatry/",
            "url": "http://zyczxq.com/2021/09/07/medical/psychiatry/",
            "title": "精神病学",
            "date_published": "2021-09-07T14:17:32.000Z",
            "content_html": "<h1 id=\"第一章-绪论\"><a class=\"anchor\" href=\"#第一章-绪论\">#</a> 第一章 绪论</h1>\n<h2 id=\"一-概述\"><a class=\"anchor\" href=\"#一-概述\">#</a> 一、概述</h2>\n<h3 id=\"一-精神病学\"><a class=\"anchor\" href=\"#一-精神病学\">#</a> (一)  精神病学</h3>\n<ol>\n<li>\n<p>精神病学是医学的一个分支学科，是研究各种精神疾病的病因、发病机理、临床表现、疾病发展规律以及治疗和预防的一门学科</p>\n</li>\n<li>\n<p>亚专科分支：社会、司法、儿童、老年、成瘾、生物精神病学等</p>\n</li>\n</ol>\n<h3 id=\"二-精神障碍\"><a class=\"anchor\" href=\"#二-精神障碍\">#</a> (二)  精神障碍</h3>\n<ol>\n<li>\n<p>精神障碍一类具有诊断意义的精神方面的异常</p>\n</li>\n<li>\n<p>特征：</p>\n</li>\n</ol>\n<p>①　认知、情绪、行为等方面的改变和异常</p>\n<p>②　伴有内心痛苦体验和（或）社会功能损害</p>\n<ol start=\"3\">\n<li>DSM-5 的定义：精神障碍是一种综合征，其特征表现为个体的认知、情绪调节或行为方面具有临床意义的功能损害，它反映了潜在的精神功能在心理、生物或发展过程中的异常。精神障碍通常与社会、职业、或其他重要活动中的显著的痛苦或功能损害相关</li>\n</ol>\n<h2 id=\"二-脑与精神活动\"><a class=\"anchor\" href=\"#二-脑与精神活动\">#</a> 二、脑与精神活动</h2>\n<p>人类所有精神活动（广义上的行为）均由大脑控制</p>\n<h3 id=\"一-脑结构与精神活动\"><a class=\"anchor\" href=\"#一-脑结构与精神活动\">#</a> (一)  脑结构与精神活动</h3>\n<ol>\n<li>\n<p>大脑约含 1000 亿个神经细胞和更多的神经胶质细胞</p>\n</li>\n<li>\n<p>复杂的神经细胞之间的联系和细胞内信号转导形成脑信号</p>\n</li>\n<li>\n<p>单个神经元可以成为多个神经环路的一部分</p>\n</li>\n<li>\n<p>如果脑结构遭到破坏，势必影响正常的精神功能</p>\n</li>\n</ol>\n<h3 id=\"二-脑神经化学与精神活动\"><a class=\"anchor\" href=\"#二-脑神经化学与精神活动\">#</a> (二)  脑神经化学与精神活动</h3>\n<ol>\n<li>\n<p>神经元的电信号在突触处转化为化学信号，然后转化为电信号</p>\n</li>\n<li>\n<p>神经递质分类：小分子（如单胺类）、大分子（如 P 物质）</p>\n</li>\n<li>\n<p>受体分类：</p>\n</li>\n</ol>\n<p>①　配体门控通道：神经递质与受体结合后，离子通道开放，增加细胞膜的通透性：正离子兴奋，负离子抑制。</p>\n<p>②　G 蛋白偶联受体</p>\n<h3 id=\"三-脑可塑性与精神活动\"><a class=\"anchor\" href=\"#三-脑可塑性与精神活动\">#</a> (三)  脑可塑性与精神活动</h3>\n<ol>\n<li>\n<p>脑的结构与化学活动在变化之中（可塑性，plasticity）</p>\n</li>\n<li>\n<p>可塑性是神经系统的重要特征，神经系统的可塑性已成为行为适应性的生理基础</p>\n</li>\n<li>\n<p>在宏观上可以表现为脑功能，如学习记忆功能、行为表现及精神活动改变；在微观水平有神经元突触、神经环路的微细结构与功能的变化，包括神经化学物质（递 质、受体等）、神经电生理活动以及突触形态亚微结构等方面的变化。</p>\n</li>\n</ol>\n",
            "tags": [
                "精神病学"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/09/01/JavaScript/axios/",
            "url": "http://zyczxq.com/2021/09/01/JavaScript/axios/",
            "title": "Axios源码解析",
            "date_published": "2021-09-01T06:34:36.000Z",
            "content_html": "<p>前几天面试，和面试官聊天时</p>\n<p>面试官：“你有没有想过看一下源码，而不是看那些分析文章，可能直接看源码收益来的直接一点”</p>\n<p>我：“以前尝试过看的框架源码，不过觉得好晦涩，看不懂，打算等水平提升一点再看”</p>\n<p>——————————————————————————————————————————————</p>\n<p>于是最近几天，我觉得自己的水平相比以前也有点提升，虽然看不懂框架源码，但是我应该勉强能看懂一些简单库的源码？</p>\n<p><strong>于是就选中了 Axios</strong>，仔细查找一番资料 + 拉取 github 上的代码慢慢看，确实有了不少收获，还加深了理解。</p>\n<p>于是就有了这篇文章，不过源码的内容实在太多，所以这篇文章只是简单对工作流程源码的一篇解析，其他的功能还请慢慢读源码</p>\n<p>——————————————————————————————————————————————</p>\n<p>第一次写，可能有点乱，求大佬轻喷</p>\n<h1 id=\"axios是什么\"><a class=\"anchor\" href=\"#axios是什么\">#</a> Axios 是什么</h1>\n<p>axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 nodejs 之中使用。</p>\n<p>它的特点有：</p>\n<ul>\n<li>从浏览器创建 XMLHttpRequests</li>\n<li>从 nodejs 创建 http 请求</li>\n<li>支持 Promise</li>\n<li>拦截请求和响应</li>\n<li>取消请求</li>\n<li>自动转换 JSON</li>\n<li>客户端支持防御 CSRF</li>\n</ul>\n<h1 id=\"axios使用方式\"><a class=\"anchor\" href=\"#axios使用方式\">#</a> Axios 使用方式</h1>\n<p>了解它的内部机制之前，我们先要知道该模块的功能、输入输出，才能更好的了解它。</p>\n<h2 id=\"方法1直接使用axios构造函数\"><a class=\"anchor\" href=\"#方法1直接使用axios构造函数\">#</a> 方法 1: 直接使用 axios 构造函数</h2>\n<p>axios(config) || axios(url[,config])</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span><span class=\"token string\">'Orange'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">lastName</span><span class=\"token operator\">:</span><span class=\"token string\">'juice'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"方法2使用axios对象的方法\"><a class=\"anchor\" href=\"#方法2使用axios对象的方法\">#</a> 方法 2: 使用 axios 对象的方法</h2>\n<ul>\n<li>axios.request(config)</li>\n<li>axios.get(url[,config])</li>\n<li>axios.post(url[,data[,config]])</li>\n<li>等等如 head、delete、put 方法</li>\n</ul>\n<h2 id=\"方法3axioscreate\"><a class=\"anchor\" href=\"#方法3axioscreate\">#</a> 方法 3:axios.create...</h2>\n<h1 id=\"从axios入口文件分析axios工作流程\"><a class=\"anchor\" href=\"#从axios入口文件分析axios工作流程\">#</a> 从 axios 入口文件分析 Axios 工作流程</h1>\n<p>暴露在项目根目录下的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//index.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 就这么一行代码，让我们把目光放在 axios.js</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./lib/axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后跑去找到 axios.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//axios.js 的局部核心代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 创建 axios</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param &#123;Object&#125; defaultConfig The default config for the instance</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return &#123;Axios&#125; A new instance of Axios</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">defaultConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 创建 Axios 实例，参数为默认配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">(</span>defaultConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 将 Axios.prototype.request 的函数的 this 绑定指向到 context（创建的 axios 实例)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 类似于 Axios.prototype.request.bind (context)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">var</span> instance <span class=\"token operator\">=</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 将 Axios.prototype 上的方法和属性都扩展到 instance 上，并且将这些扩展的方法绑定 this 为 context</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 把 context 上的方法和属性扩展到新的 Axios 实例上，主要是配置和拦截器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 创建一个 axios 实例导出，这个实例实际上指向的是 Axios.prototype.request 函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">var</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span>defaults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 新建 Axios 实例的工厂方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instanceConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 创建一个 axios 实例，配置为原先 defaults.js 中的配置 + 参数传入的配置</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 配置会以一个优先顺序进行合并，优先级为 lib/default.js 的默认值 & lt; 实例的 defaults&lt; 请求的 config</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token function\">mergeConfig</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span> instanceConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 导出 axios</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里我们可以看到，初始化的时候已经新建了一个默认配置的实例，<strong>这个实例指向 Axios.prototype.request 函数 (绑定了一个 Axios 实例)</strong>，当我们以 axios () 方式调用的时候，实际上是执行了 createInstance 返回的一个指向 Axios.prototype.request 的函数。</p>\n<p>当然，也支持使用 axios.create 来新建一个自定义配置的实例（也是指向 request 函数），<strong>但最终也是执行 Axios.prototype.request 方法</strong>。</p>\n<p><strong>从这里我们可以看出，axios 指向发请求的函数，而 Axios 是保存实例默认配置的对象，当调用 axios 的时候，使用对应的 Axios 实例的默认配置 + 参数配置来发起请求</strong></p>\n<div class=\"note primary\">\n<p>当我们没有特别的要求时，使用默认的 axios 实例即可，否则的话我们可以新建一个 axios 实例（传入定制的配置信息），并且通过调用这个新建的实例来发起请求。</p>\n</div>\n<p>既然发送请求最终调用的都是 Axios.prototype.request 函数，那我们来<span class=\"pink\">简单</span>看看 Axios.js 文件内部的代码，涉及某功能模块的具体解析在后面再详细讲，这里只是为了分析 Axios 的工作流程。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Axios.js 部分代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//Axios 构造函数，一个 Axios 实例里有实例配置和请求拦截器 + 响应拦截器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Axios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instanceConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults <span class=\"token operator\">=</span> instanceConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">response</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Axios</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">request</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 如果第一个参数是字符串，则是 url，否则是配置对象，axios (url [,config]) || axios (config)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> config <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    config <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    config<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    config <span class=\"token operator\">=</span> config <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 合并 Axios 实例中保存的默认配置和参数配置，默认配置优先级更低</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  config <span class=\"token operator\">=</span> <span class=\"token function\">mergeConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 若传入配置中指定了方法（或者实例 defaults 配置指定了），则改为小写，否则默认为 get 方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    config<span class=\"token punctuation\">.</span>method <span class=\"token operator\">=</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 过滤跳过的拦截器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token keyword\">var</span> requestInterceptorChain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token keyword\">var</span> synchronousRequestInterceptors <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 是否同步执行</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token comment\">// 此方法对请求拦截器中每一项中执行函数 unshiftRequestInterceptors（会自动排除被 eject 注销的 handler）</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// 把拦截器中每一项存入 requestInterceptorChain</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">unshiftRequestInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> interceptor<span class=\"token punctuation\">.</span>runWhen <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> interceptor<span class=\"token punctuation\">.</span><span class=\"token function\">runWhen</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">// 只要有一个异步执行，整个队列都异步执行</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    synchronousRequestInterceptors <span class=\"token operator\">=</span> synchronousRequestInterceptors <span class=\"token operator\">&amp;&amp;</span> interceptor<span class=\"token punctuation\">.</span>synchronous<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t  <span class=\"token comment\">// 注意这里是 unshift，所以先定义的拦截器是后执行的（栈）</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    requestInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> interceptor<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token comment\">// 基本同上，但这里是 push，正序</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token keyword\">var</span> responseInterceptorChain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">pushResponseInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">interceptor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    responseInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>interceptor<span class=\"token punctuation\">.</span>fulfilled<span class=\"token punctuation\">,</span> interceptor<span class=\"token punctuation\">.</span>rejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token keyword\">var</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">// 若需要异步执行，则异步执行拦截器数组</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>synchronousRequestInterceptors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">var</span> chain <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>dispatchRequest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 将派发请求放在请求拦截器数组异步执行完的最后一步执行</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">,</span> requestInterceptorChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    chain<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>responseInterceptorChain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      promise <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token comment\">// 否则同步执行请求拦截器，直到拦截器栈清空</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token keyword\">var</span> newConfig <span class=\"token operator\">=</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>requestInterceptorChain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">var</span> onFulfilled <span class=\"token operator\">=</span> requestInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">var</span> onRejected <span class=\"token operator\">=</span> requestInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      newConfig <span class=\"token operator\">=</span> <span class=\"token function\">onFulfilled</span><span class=\"token punctuation\">(</span>newConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token function\">onRejected</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token comment\">// 请求拦截器执行完之后，派发请求</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    promise <span class=\"token operator\">=</span> <span class=\"token function\">dispatchRequest</span><span class=\"token punctuation\">(</span>newConfig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>  <span class=\"token comment\">// 执行响应拦截器，异步执行</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>responseInterceptorChain<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    promise <span class=\"token operator\">=</span> promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>responseInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> responseInterceptorChain<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  <span class=\"token comment\">// 最后返回一个 promise 对象</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"axios工作流程\"><a class=\"anchor\" href=\"#axios工作流程\">#</a> Axios 工作流程</h1>\n<p>根据上面源代码的分析，我们可以知道 Axios 的工作流程大概是这些</p>\n<ol>\n<li>\n<p>创建 Axios 实例（createInstance），自定义创建配置或使用默认配置</p>\n</li>\n<li>\n<p>调用 axios，传入配置，合并配置并做一些处理</p>\n</li>\n<li>\n<p>执行请求拦截器（requestInterceptorManager）。</p>\n<p>拦截器的 handler 会收到实例的配置作为参数，然后需要返回一份新的配置</p>\n</li>\n<li>\n<p>派发请求（dispatchRequest）</p>\n</li>\n<li>\n<p>转换请求数据（transformData）</p>\n</li>\n<li>\n<p>使用 Adapter 处理请求（xhr.js 或 http.js）</p>\n</li>\n<li>\n<p>转换响应数据（transformData）</p>\n</li>\n<li>\n<p>执行响应拦截器（responseInterceptorManager）</p>\n</li>\n<li>\n<p>结束，返回一个 promise</p>\n</li>\n</ol>\n<h1 id=\"拦截器模块\"><a class=\"anchor\" href=\"#拦截器模块\">#</a> 拦截器模块</h1>\n<p>在 Axios 实例的代码中，每个 Axios 实例都有着请求拦截器和响应拦截器。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//Axios.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Axios</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">instanceConfig</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaults <span class=\"token operator\">=</span> instanceConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>interceptors <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">request</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">response</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>让我们看看拦截器中的代码具体是怎么写的，</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//InterceptorManager.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">InterceptorManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 往栈里增加一个新的拦截器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">use</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fulfilled<span class=\"token punctuation\">,</span> rejected<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">fulfilled</span><span class=\"token operator\">:</span> fulfilled<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">rejected</span><span class=\"token operator\">:</span> rejected<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 决定该拦截器是否同步执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">synchronous</span><span class=\"token operator\">:</span> options <span class=\"token operator\">?</span> options<span class=\"token punctuation\">.</span>synchronous <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">runWhen</span><span class=\"token operator\">:</span> options <span class=\"token operator\">?</span> options<span class=\"token punctuation\">.</span>runWhen <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 返回一个下标，方便之后注销该 handler</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eject</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">eject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 其实就是用这个下标去注销 handler，在下面的 forEach 方法中会跳过被注销的</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 对拦截器数组中的每一项执行 fn</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">InterceptorManager</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">forEach</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">//utils.forEach 实际上是对第一个参数进行遍历，执行第二个参数函数</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">forEachHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">//h 是传入的每一项，忽略被注销的</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以看到，一个 InterceptorManager 对象保存着一个 handlers 数组，用来保存一个对象（这个对象包含了不同情况下执行的拦截函数）。结合 Axios.js，有几个信息：</p>\n<ul>\n<li>\n<p>使用 use 方法添加一个拦截器，use 方法返回一个下标。</p>\n</li>\n<li>\n<p>可以使用 use 方法返回的下标来调用 eject 注销拦截器</p>\n</li>\n<li>\n<p>在 Axios.prototype.request 方法中，调用实例的 forEach 方法来复制一份拦截器队列执行</p>\n</li>\n<li>\n<p>请求拦截器先定义的后执行，响应拦截器先定义的先执行</p>\n</li>\n<li>\n<p>请求拦截器可同步或异步执行，响应拦截器异步执行</p>\n<p>请求拦截器的执行可以要求异步执行，也可以是同步执行，如果要异步执行，设置拦截器的时候给第三个参数传入一个 options 对象，设置 options.synchronous = false 即可（<strong>只要有一个需要异步执行，那整个队列都异步执行</strong>）</p>\n</li>\n</ul>\n<h1 id=\"派发请求模块\"><a class=\"anchor\" href=\"#派发请求模块\">#</a> 派发请求模块</h1>\n<p>源码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//lib/core/dispatchRequest.js 部分核心代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">dispatchRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 保证 headers 存在</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  config<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 转换请求数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  config<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    config<span class=\"token punctuation\">.</span>transformRequest</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// Flatten headers</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  config<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> utils<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 可以自定义适配器，否则就用默认的（浏览器下用 xhr.js）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">var</span> adapter <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>adapter <span class=\"token operator\">||</span> defaults<span class=\"token punctuation\">.</span>adapter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">adapter</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">onAdapterResolution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">throwIfCancellationRequested</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 转换响应数据</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      config<span class=\"token punctuation\">.</span>transformResponse</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">onAdapterRejection</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isCancel</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token function\">throwIfCancellationRequested</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 转换响应数据</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reason <span class=\"token operator\">&amp;&amp;</span> reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          reason<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          config<span class=\"token punctuation\">.</span>transformResponse</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以看到，派发请求模块主要是以下几个流程：</p>\n<ol>\n<li>转换请求数据、设置头部、选择适配器</li>\n<li>发送请求</li>\n<li>得到响应后进行对应的处理，如成功后转换数据并返回</li>\n</ol>\n<h1 id=\"转换数据模块\"><a class=\"anchor\" href=\"#转换数据模块\">#</a> 转换数据模块</h1>\n<p>在 dispatchRequest.js 中，我们可以看到对请求数据的转换和对响应数据的转换代码，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//lib/core/dispatchRequest.js 转换数据局部代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 对请求数据的转换</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>config<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  config<span class=\"token punctuation\">.</span>transformRequest</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 对响应数据的转换</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>response<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  config<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  config<span class=\"token punctuation\">.</span>transformResponse</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在这里我们可以看到，有两个关键点：<strong>transformData 和 config.transformResponse</strong></p>\n<h2 id=\"transformdata\"><a class=\"anchor\" href=\"#transformdata\">#</a> transformData</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// lib/core/transformData.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 转换请求 / 响应数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">transformData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">,</span> fns</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">||</span> defaults<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 注意这里的 fns，是转换函数数组，为扩展转换埋下了伏笔</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结合在派发请求时候的调用，我们可以知道以下几点</p>\n<ul>\n<li>这个函数本身并不直接转换数据，而是调用 defaults.js 中的转换方法数组来进行一个转换</li>\n<li>传入要转换的 data 和 headers，然后返回一份转换好的 data</li>\n<li>转换函数可以扩展个数和重写</li>\n</ul>\n<h2 id=\"configtransformresponserequest\"><a class=\"anchor\" href=\"#configtransformresponserequest\">#</a> config.transformResponse/Request</h2>\n<p>通过上面可以知道，真正转换数据的是 axios.default.transformRequest (Response) 方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// defaults.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">transformRequest</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">function</span> <span class=\"token function\">transformRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> headers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">normalizeHeaderName</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'Accept'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">normalizeHeaderName</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 如果是特殊的数据，不需要进行转换直接返回</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">isFormData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      utils<span class=\"token punctuation\">.</span><span class=\"token function\">isArrayBuffer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      utils<span class=\"token punctuation\">.</span><span class=\"token function\">isBuffer</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      utils<span class=\"token punctuation\">.</span><span class=\"token function\">isStream</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      utils<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      utils<span class=\"token punctuation\">.</span><span class=\"token function\">isBlob</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">isArrayBufferView</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">isURLSearchParams</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">setContentTypeIfUnset</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-form-urlencoded;charset=utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 如果是对象且我们规定了 json, 则进行 json.stringift 转化</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">isObject</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>headers <span class=\"token operator\">&amp;&amp;</span> headers<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token function\">setContentTypeIfUnset</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>这个模块并不是很复杂，基本就是按照 headers 的类型和数据本身类型做的一个转换处理，为了减少篇幅就不贴 transformResponse 部分的代码了，可以自行下载源码查看</p>\n<h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<p>我们可以看到，在我们没有刻意去重写转换方法的时候，它使用的是 defaults.js 中默认的转换方法，但其实我们也可以根据需要，去增加或者重写转换方法。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这里导入的是默认的 axios 实例，我们也可以 axios.create 创建一个自定义配置实例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  baseURL<span class=\"token operator\">=</span><span class=\"token string\">'https://xxx.com'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>instance<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>transformRequest<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>headers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 进行一系列的处理</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 或者进行重写</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>instance<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span>transformRequest <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span>headers</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 同上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"转换模块总结\"><a class=\"anchor\" href=\"#转换模块总结\">#</a> 转换模块总结</h2>\n<p>总的来说</p>\n<ol>\n<li>\n<p>派发请求的时候，将请求模块 config 作为<strong> transformData 的 this 指向，调用 transformData</strong></p>\n</li>\n<li>\n<p>transformData 中会根据传入的 config.transformRequest 方法，来进行一个转换</p>\n<p>如果自定义的 axios 实例有进行重写或扩展，就调用我们重写或扩展的，否则就用默认的 default.js 中的</p>\n</li>\n<li>\n<p>转换完成，返回转换完成的数据</p>\n</li>\n</ol>\n<h1 id=\"axios对ajax封装的模块\"><a class=\"anchor\" href=\"#axios对ajax封装的模块\">#</a> Axios 对 ajax 封装的模块</h1>\n<p>接下来到了最核心的地方：<strong>Axios 是如何对将 ajax 请求 promise 化的？</strong></p>\n<p>话不多说，我们来看源代码（浏览器环境下的封装）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//xhr.js 部分核心代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">xhrAdapter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">dispatchXhrRequest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 分离出请求相关的配置、数据、头部</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> requestData <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> requestHeaders <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">var</span> responseType <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>responseType<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 新建一个 XMLHttpRequest 对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 路径为 baseURL+configURL</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">var</span> fullPath <span class=\"token operator\">=</span> <span class=\"token function\">buildFullPath</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>baseURL<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//ajax 请求方法、url 设置</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">buildURL</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>paramsSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置超时时间</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    request<span class=\"token punctuation\">.</span>timeout <span class=\"token operator\">=</span> config<span class=\"token punctuation\">.</span>timeout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 请求结束的处理函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">onloadend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 处理响应数据，略</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 根据响应状态码设置 Promise 是 resolve 还是 reject</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">settle</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 加载完后置 null</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//onloadend 是一个属性，请求结束时就会存在</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 不存在就监听状态变化</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'onloadend'</span> <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      request<span class=\"token punctuation\">.</span>onloadend <span class=\"token operator\">=</span> onloadend<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">//readyState 为 4 的时候代表已完成</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request <span class=\"token operator\">||</span> request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 宏任务，当同步任务执行完毕后执行</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>onloadend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 当请求被丢弃或者手动停止时的处理</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    request<span class=\"token punctuation\">.</span>onabort <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">// 网络出错处理</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    request<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 超时处理函数</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    request<span class=\"token punctuation\">.</span>ontimeout <span class=\"token operator\">=</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token comment\">// 在标准浏览器环境里添加 CSRF 头部，来防御 CSRF 攻击</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>utils<span class=\"token punctuation\">.</span><span class=\"token function\">isStandardBrowserEnv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token comment\">// 如果该请求携带 cookie 或者是同源网站就需要添加 (用于鉴权)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">var</span> xsrfValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>withCredentials <span class=\"token operator\">||</span> <span class=\"token function\">isURLSameOrigin</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> config<span class=\"token punctuation\">.</span>xsrfCookieName <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        cookies<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>xsrfCookieName<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xsrfValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        requestHeaders<span class=\"token punctuation\">[</span>config<span class=\"token punctuation\">.</span>xsrfHeaderName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> xsrfValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token comment\">// 添加配置到请求头，略</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>requestData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>      requestData <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 发送请求</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>requestData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总的来说其实就是将 ajax 请求 promise 化，封装进去，先进行一波配置的处理，然后请求结束时再根据状态码决定该 Promise 是完成还是失败状态。</p>\n<p>在这里还加了对 csrf 攻击的防御。</p>\n<h1 id=\"取消请求模块\"><a class=\"anchor\" href=\"#取消请求模块\">#</a> 取消请求模块</h1>\n<h2 id=\"使用方式\"><a class=\"anchor\" href=\"#使用方式\">#</a> 使用方式</h2>\n<p>在文档上我们查看到取消请求的两种方式</p>\n<ul>\n<li>\n<p>使用 CancelToken.source 工厂方法产生 cancel token</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> CancelToken <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>CancelToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> source <span class=\"token operator\">=</span> CancelToken<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">cancelToken</span><span class=\"token operator\">:</span> source<span class=\"token punctuation\">.</span>token</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">thrown</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">isCancel</span><span class=\"token punctuation\">(</span>thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Request canceled'</span><span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 处理错误</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 取消请求（message 参数是可选的）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>source<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Operation canceled by the user.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>或者传递一个 executor 函数到 CancelToken 的构造函数来创建 cancel token</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> CancelToken <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>CancelToken<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> cancel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">cancelToken</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//executor 函数接收一个 cancel 函数作为参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    cancel <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 取消请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>从上述使用方式我们可以看到，要对请求产生一个 cancelToken，然后在配置项中将请求的 cancelToken 设置为我们产生的 cancelToken。</p>\n<p>这个 cancelToken 具有一个 cancel 方法，通过调用它可以取消请求。</p>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// dispatchRequest.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 如果被要求取消，就抛出 cancel, 这个方法在派发请求前和响应后都会调用一次</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throwIfCancellationRequested</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>cancelToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 下面一行干了这个事：if (token.reason) throw token.reason;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    config<span class=\"token punctuation\">.</span>cancelToken<span class=\"token punctuation\">.</span><span class=\"token function\">throwIfRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// CancelToken.js 部分核心代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">executor</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">var</span> resolvePromise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">promiseExecutor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    resolvePromise <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 这里的 cancel 函数实际上就是取消请求函数，利用 executor 向外传 cancel 回调</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// Cancellation has already been requested</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    token<span class=\"token punctuation\">.</span>reason <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cancel</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">resolvePromise</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 用于检查是否需要取消并抛出</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">throwIfRequested</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">throwIfRequested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 产生 CancelToken 的工厂方法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>CancelToken<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">source</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">var</span> cancel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">var</span> token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelToken</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">executor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    cancel <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> token<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token literal-property property\">cancel</span><span class=\"token operator\">:</span> cancel</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>实际上构造 cancelToken 时，利用传进来的函数将构造函数中写好的取消请求函数的引用传递出去，我们在使用的时候就可以调用该传出来的函数进行取消（这个函数会设置 token.reason 为取消的信息）。</p>\n<p>当我们调用 cancel 方法时，会将 cancel 的信息传递，并设置 token.reason。</p>\n<p>在进入 dispatchRequest 步骤时，如果存在 cancelToken 且 token.reason 存在，就会抛出</p>\n<p>Xhr.js 中发送请求前，如果配置项存在 cancelToken，<strong>就会给这个 cancelToken.promise.then () 设置一个回调来取消请求</strong>。当我们调用了 cancel 方法时，token 内部的一个 promise 就会从 pending-&gt;fulfilled 状态，然后通过该回调取消请求。</p>\n<p>如果发送完请求得到响应后，在转换数据前，Axios 也会检测，如果存在 cancelToken 且 token.reason 存在，也会抛出。</p>\n<h2 id=\"设计步骤\"><a class=\"anchor\" href=\"#设计步骤\">#</a> 设计步骤</h2>\n<p><strong>运行步骤大概如下</strong>：</p>\n<ol>\n<li>\n<p>利用构造函数或工厂方法产生一个 cancelToken，并且把它设置为对应请求的 cancelToken。</p>\n</li>\n<li>\n<p>如果是利用构造函数产生，我们还需要保存一下 executor 中传递出来的 cancel 函数。</p>\n</li>\n<li>\n<p>在适当的时候取消请求，调用 cancel 函数（可以传一个字符串作为信息）</p>\n<p>此时 cancel 函数会新建一个 Cancel 实例赋给 token.reason，并且将 token 内部的 promise 完成（fulfilled）</p>\n</li>\n<li>\n<p><strong>派发请求前和响应后</strong>由 dispatchRequest.js 中的方法<strong> throwIfCancellationRequested</strong> 来处理取消（如果 token.reason 存在，则表示需要取消）</p>\n<p>若是已经在请求中，xhr.js 中有代码监听 token 内部的 promise，一旦该 promise 完成，就触发 request.abort () 来取消</p>\n</li>\n<li>\n<p>取消成功</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// xhr.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 请求中取消请求的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>cancelToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// Handle cancellation</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  config<span class=\"token punctuation\">.</span>cancelToken<span class=\"token punctuation\">.</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">onCanceled</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cancel</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    request<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>cancel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// Clean up request</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    request <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>大概花了几天的时间把 axios 中主要模块的源代码分析了一遍，确实是收益良多。</p>\n<p>作者水平有限（只是个刚学两年的小前端），如果有不正确的地方，还请大佬轻喷。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F4aW9zL2F4aW9z\">axios/axios: Promise based HTTP client for the browser and node.js (github.com)</span></p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/HeadSort/",
            "url": "http://zyczxq.com/2021/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/HeadSort/",
            "title": "堆排序学习笔记",
            "date_published": "2021-08-25T06:37:48.000Z",
            "content_html": "<h1 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h1>\n<p>堆排序是一种树形选择排序，在排序过程中，它将待排序的记录看成是一颗完全二叉树的结构，由于它在最坏情况下表现也十分好，所以广泛使用在各个语言下的 sort 源码中。</p>\n<h1 id=\"堆排序的定义\"><a class=\"anchor\" href=\"#堆排序的定义\">#</a> 堆排序的定义</h1>\n<p><strong>n 个元素的序列称之为堆，当且仅当满足以下其中一个条件</strong>：</p>\n<ol>\n<li>K<sub>i</sub> &lt;= k<sub>2i</sub> 且 k<sub>i</sub> &lt;= k<sub>2i+1</sub>\t(0&lt;=i&lt;=n/2)</li>\n<li>K<sub>i</sub> &gt;= k<sub>2i</sub> 且 k<sub>i</sub> &gt;= k<sub>2i+1</sub>    (0&lt;=i&lt;=n/2)</li>\n</ol>\n<p>用语言表示，即：<strong>树中所有非终端结点的值均不大于（不小于）其左右孩子的值</strong></p>\n<p><img src=\"example.png\" alt=\"example\" title=\"例子\" /></p>\n<h1 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h1>\n<ol>\n<li>按堆的定义将待排序序列 list [0...n-1] 调整为大根堆（即建初堆），交换 list [0] 和 list [n-1]，则此时列表最后一个元素为最大的元素。</li>\n<li>将 list [0...n-2] 重新调整为堆，交换 list [0] 和 list [n-2]，则列表倒数第二个元素为次大的元素。</li>\n<li>循环 n-1 次，知道交换了 list [0] 和 list [1] 为止。</li>\n</ol>\n<p>其实和插入排序的思路有点像，就是每次把一个剩下维护序列里面的最大元素抽取出来，放到一个位置上，直到这个剩下维护序列长度为一即可。但是它快就快在调整堆这个过程。</p>\n<p>综上，需要解决两个问题：</p>\n<ol>\n<li>建初堆（如何将一个无序序列建成堆？）</li>\n<li>调整堆（去掉堆顶元素后，将剩下元素调整成新堆）</li>\n</ol>\n<h1 id=\"调整堆的思路\"><a class=\"anchor\" href=\"#调整堆的思路\">#</a> 调整堆的思路</h1>\n<p>筛选法，把不符合堆的元素逐步下沉，然后把大的元素逐步上浮。</p>\n<ol>\n<li>当前根结点为 s，则他的左右子树为 2s 和 2s+1，选出左右子树中较大的结点</li>\n<li>比较 s 和较大子树结点的值，如果 s 较大，则说明树已经是堆，不需调整</li>\n<li>如果 s 较小，则交换（交换后，较大子树结点的子树不再是堆，重复上述过程调整）</li>\n</ol>\n<p>参照下文代码 HeapAdjust</p>\n<h1 id=\"建初堆的思路\"><a class=\"anchor\" href=\"#建初堆的思路\">#</a> 建初堆的思路</h1>\n<p>要把一个无序序列调整成堆，按照定义，则需让非终端结点大于其左右子树的值，所以序号小于 length/2 的都是非终端结点。</p>\n<p>利用筛选法，自底向上把 (n/2)....0 的结点调整成堆即可。</p>\n<h1 id=\"堆排序整体思路\"><a class=\"anchor\" href=\"#堆排序整体思路\">#</a> 堆排序整体思路</h1>\n<p>结合起来，就是</p>\n<ol>\n<li>将一个无序数组调整成堆，然后抽取堆顶元素，和当前无序的最后的位置元素交换。</li>\n<li>当前无序数组减去最后位置，剩下的重新调整成堆</li>\n</ol>\n<h1 id=\"特点分析\"><a class=\"anchor\" href=\"#特点分析\">#</a> 特点分析</h1>\n<ol>\n<li>\n<p>时间复杂度</p>\n<p>平均情况：O (nlog<sub>2</sub>n)</p>\n<p>最坏情况：O (nlog<sub>2</sub>n)</p>\n<p>即使在最坏情况下，时间复杂度仍然为 O (nlog<sub>2</sub>n)，相比快速排序的最坏情况是一个优点，可以在快速排序退化时采用。</p>\n</li>\n<li>\n<p>空间复杂度：O (1)</p>\n</li>\n<li>\n<p>是不稳定排序（跳跃式的交换都是不稳定排序）</p>\n</li>\n<li>\n<p>只能用于顺序结构。</p>\n</li>\n</ol>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>适用于记录数较多或递归树较深的时候采用。</p>\n<h1 id=\"完整堆排序代码\"><a class=\"anchor\" href=\"#完整堆排序代码\">#</a> 完整堆排序代码</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">HeapAdjust</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>m</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 假设 list [s+1...m] 已经是堆，将 list [s...m] 调整为以 list [s] 为根的大根堆</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> rc <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>j<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;</span>m<span class=\"token operator\">&amp;&amp;</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>list<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rc<span class=\"token operator\">>=</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>list<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        s<span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    list<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 建初堆</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">CreateHeap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> mid <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">HeapAdjust</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 堆排序，先把无序序列建成堆，然后每次把堆顶元素抽出来放到对应的位置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">HeapSort</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">CreateHeap</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 堆顶记录和当前未经排序子序列最后一个记录互换</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">HeapAdjust</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将 list [0...i-1] 重新调整为大根堆</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机基础"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/08/04/JavaScript/browser/",
            "url": "http://zyczxq.com/2021/08/04/JavaScript/browser/",
            "title": "浏览器渲染过程",
            "date_published": "2021-08-04T12:14:13.000Z",
            "content_html": "<p>前面也说过，当在浏览器上输入一个 url，到页面加载出来，简单来说一共经历了这么几件事：</p>\n<ol>\n<li>\n<p>DNS 查询</p>\n<p>其实就是将一个域名，解析成 ip 地址的一个过程，它会先去找缓存（比如说浏览器缓存 -&gt; 本机缓存 (hosts 文件)-&gt; 路由器缓存）。找不到缓存的话，会跑去 DNS 服务器进行一个查询（具体怎么搞就不展开了），找到域名对应的 ip 地址之后，就进行第二步。</p>\n</li>\n<li>\n<p>TCP 连接</p>\n<p>对服务端的 ip 地址建立一个 tcp 连接，主要就是三次握手的过程。</p>\n</li>\n<li>\n<p>HTTP 请求</p>\n<p>发送一些请求来请求资源，最常见的就是请求 html 文档以及对应的图片、css 等资源了。这个过程还涉及到一些浏览器缓存（会先看本地有无缓存、强缓存协商缓存之类的，以前的博客也有，不详细展开）</p>\n</li>\n<li>\n<p>服务器响应</p>\n</li>\n<li>\n<p>浏览器渲染</p>\n</li>\n<li>\n<p>最后还有个释放 TCP 连接</p>\n</li>\n</ol>\n<p>这篇笔记就是用于整理我从找到的各位大牛的知识文章加以整理得来的。</p>\n<h1 id=\"解析html文档构建dom树\"><a class=\"anchor\" href=\"#解析html文档构建dom树\">#</a> 解析 HTML 文档，构建 DOM 树</h1>\n<p>当浏览器接收到一份文档的时候，它会去将这个文档的 HTML 标记进行一个处理、解析，从而将其转换为一颗 DOM 树。</p>\n<h1 id=\"获取外部资源构建cssom树\"><a class=\"anchor\" href=\"#获取外部资源构建cssom树\">#</a> 获取外部资源，构建 CSSOM 树</h1>\n<p>一份文档里面通常还会去下载一些外部的样式表、或者外部的 js 代码，这个阶段之下，有一些需要注意的点。</p>\n<ol>\n<li>当浏览器遇到一个 script 标签时，会暂停构建 DOM 直到脚本执行完毕</li>\n<li>JavaScript 可以查询和修改 DOM 与 CSSOM。</li>\n<li>CSSOM 构建时，会暂停执行 JavaScript 直到 CSSOM 构建完毕。</li>\n</ol>\n<p>总结来说，总而言之两句话：<strong>相比 JavaScript 资源，优先引入 CSS。而且 JavaScript 尽可能少的影响 DOM 的构建。</strong></p>\n<h2 id=\"css文件\"><a class=\"anchor\" href=\"#css文件\">#</a> CSS 文件</h2>\n<p>** 默认情况下，CSS 会阻塞渲染，直到 CSSOM 树构建完毕。** 这是因为 CSSOM 树不能以增量方式构建，css 规则的特定性让他可以在各个不同的点相互覆盖，在所有规则解析、并构建完之前，浏览器不能知道每个元素的位置。</p>\n<div class=\"note primary\">\n<p>CSSOM（CSS 对象模型）是树形形式的所有 css 选择器和相关属性的映射，和 DOM 非常相似。</p>\n</div>\n<p>也可以进行预加载，</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>style.css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>preload<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>preload 属性值表示这份资源在页面加载完即可需要，它会在页面加载的生命周期早期阶段就开始获取，尽早的加载，减少阻塞。</p>\n<h2 id=\"javascript文件\"><a class=\"anchor\" href=\"#javascript文件\">#</a> JavaScript 文件</h2>\n<p>刚刚也提到，JavaScript 文件会阻塞文档的解析直到执行完毕，<strong>所以我们一般都会将 js 文件放在底部。</strong></p>\n<p>当然，也有两种方法来改变这种阻塞的情况（只对外部 js 文件有效），分别是：defer 和 async</p>\n<h3 id=\"defer\"><a class=\"anchor\" href=\"#defer\">#</a> defer</h3>\n<p>defer 表示延迟执行引入的 JS 文件代码（<strong>注意，是延迟执行，不是延迟加载</strong>）。这使得加载这段 JS 文件时浏览器也未停止对 HTML 的解析，并行。当文档解析完毕后，按照顺序<strong>执行</strong>所有 defer 的脚本。</p>\n<h3 id=\"async\"><a class=\"anchor\" href=\"#async\">#</a> async</h3>\n<p>async 表示异步执行引入的 JS 文件。它和 defer 的区别主要是，async<strong> 如果加载完毕就立即执行</strong>，这个执行的发生可能在解析过程或者解析过程之后。而且因为加载时间的不一，也无法保证异步脚本的执行顺序。</p>\n<p>他们两种设置了之后都不会阻塞文档的解析。</p>\n<div class=\"note primary\">\n<p>需要注意的是，js 代码动态创建的 script 标签默认是异步加载的。</p>\n</div>\n<h1 id=\"合并dom树和cssom树构建渲染树\"><a class=\"anchor\" href=\"#合并dom树和cssom树构建渲染树\">#</a> 合并 DOM 树和 CSSOM 树，构建渲染树</h1>\n<p>渲染树是两棵树的结合，表示将要渲染到页面上的所有内容。</p>\n<h1 id=\"reflow-paint\"><a class=\"anchor\" href=\"#reflow-paint\">#</a> reflow、paint</h1>\n<p>拿到渲染树之后，浏览器将会根据这一棵渲染树，来计算布局和绘制，<strong>这个过程就是 reflow（重排 / 回流）和 paint（绘制 / 重绘）。</strong></p>\n<p>一般来说，每次涉及到元素宽度、高度等会影响到文档布局的修改，都会触发 reflow 和 paint。</p>\n<p>如果只是涉及到元素背景色、透明度等不影响文档布局的修改，就只会触发 paint。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>浏览器渲染的过程主要有以下几点：</p>\n<ol>\n<li>处理 HTML 标签并构建 DOM 树</li>\n<li>处理 CSS 样式并构建 CSSOM 树</li>\n<li>将 DOM 与 CSSOM 合并成渲染树</li>\n<li>根据渲染树计算布局，reflow</li>\n<li>绘制，paint。</li>\n</ol>\n<p>这几个步骤中，并不一定是按照顺序一次性完成的，在 JS 文件中可能涉及多次对 DOM 和 CSSOM 的修改，就可能会重复执行以上的步骤。</p>\n<p>而且 js 文件会阻塞文档解析，css 文件会阻塞文档渲染（因为需要构建 CSSOM 树）。</p>\n<h1 id=\"扩展为什么提倡将css的引入放在head-js的引入放在body底部\"><a class=\"anchor\" href=\"#扩展为什么提倡将css的引入放在head-js的引入放在body底部\">#</a> 扩展：为什么提倡将 CSS 的引入放在 head、js 的引入放在 body 底部？</h1>\n<p>前面我们也说到，css 文件会阻塞浏览器的渲染，而 js 文件会阻塞对文档的解析。</p>\n<p>之所以会阻塞渲染，是因为加载 css 的时候，会等解析完毕生成 CSSOM 树才能够生成渲染树。</p>\n<p>js 文件加载、执行的过程中，这个时间一般是比较长的，而且可能文件本身比较大、一旦长期执行，就会一直阻塞 HTML 文档的解析，使得页面长时间白屏（性能指标的首屏时间），所以我们一般把 js 文件放在 body 底部。</p>\n<p>而 CSS 文件放的位置不同，产生的效果也不同。</p>\n<ol>\n<li>\n<p>如果把 CSS 文件放于 head 部分</p>\n<p>虽然在 head 标签引入时，会阻塞 HTML 的渲染，这个时候表现为短暂的白屏之后，出现带有完整样式的页面。这个过程只发生<strong>一次解析渲染</strong>：</p>\n<p>DOM 树、CSSOM 树并行解析 -&gt; 解析完毕合成渲染树 -&gt;reflow-&gt;paint</p>\n</li>\n<li>\n<p>如果把 CSS 文件放于 body 部分，他会阻塞 HTML 的解析，但不阻塞 HTML 的渲染（<strong>在 css 完成下载之前把引入标签之前的 HTML 先进行解析渲染，并展现，但没有样式</strong>），然后下载解析完成之后，页面重新解析渲染。这个过程表现为：更加短暂的白屏时间，但先出现没有样式的文档（或者说裸奔），然后再展现完整样式。</p>\n<p>而这个过程会导致在后面重新解析渲染的过程中，多一次的 reflow 和 paint，一般来说性能会相对较差，<strong>所以我们多把 CSS 引入放于 head 处。</strong></p>\n</li>\n</ol>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "http://zyczxq.com/2021/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/designPatterns/",
            "url": "http://zyczxq.com/2021/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/designPatterns/",
            "title": "设计模式笔记",
            "date_published": "2021-07-24T08:52:55.000Z",
            "content_html": "<p>设计模式是对软件设计中普遍存在，或者说反复出现的各种问题提出的解决方案。在学校的时候我通过软件体系结构和实际上参与项目的时候也了解过一下（我觉得设计模式的知识真的是编程思想的精粹之一，非常值得深入学习）。</p>\n<p>内容会持续更新，设计模式毕竟那么多，不可能一次全学完，暂时记录我学过的、或者使用过的</p>\n<p><span class=\"pink\">一天更新一种～最近比较忙，慢慢写，闲的时候就多更新一些</span></p>\n<hr />\n<p>7-24 号：编写单例模式</p>\n<p>7-25 号：外观模式</p>\n<p>7-30 号：简单工厂模式和工厂方法模式、抽象工厂</p>\n<h1 id=\"设计模式原则\"><a class=\"anchor\" href=\"#设计模式原则\">#</a> 设计模式原则</h1>\n<p>主要有以下几种原则</p>\n<h2 id=\"开闭原则\"><a class=\"anchor\" href=\"#开闭原则\">#</a> 开闭原则</h2>\n<p><strong>开闭原则指的是对扩展开放、对修改关闭</strong>。能够对系统的功能进行扩展，但是不修改已有的代码。</p>\n<h2 id=\"里氏替换原则\"><a class=\"anchor\" href=\"#里氏替换原则\">#</a> 里氏替换原则</h2>\n<p><strong>里氏替换原则其实是对开闭原则的补充，它要求任何基类可以发挥作用的地方，子类也可以发挥作用。</strong></p>\n<p>可能有点抽象，其实就是说派生类可以随时替换掉基类、且功能不被破坏，才是真的做到了继承。</p>\n<h2 id=\"依赖反转原则\"><a class=\"anchor\" href=\"#依赖反转原则\">#</a> 依赖反转原则</h2>\n<p><strong>依赖反转原则指的是高层次的模块不依赖低层次模块的实现细节</strong>。</p>\n<h2 id=\"接口隔离原则\"><a class=\"anchor\" href=\"#接口隔离原则\">#</a> 接口隔离原则</h2>\n<p>简单的说就是减少耦合。</p>\n<h2 id=\"最小知识原则迪米特法则\"><a class=\"anchor\" href=\"#最小知识原则迪米特法则\">#</a> 最小知识原则（迪米特法则）</h2>\n<p><strong>最小知识 / 最少知道是指，一个系统的功能模块应该最大限度的不知晓其他模块的出现，减少感知</strong>。模块之间应相对独立</p>\n<h2 id=\"合成复用原则\"><a class=\"anchor\" href=\"#合成复用原则\">#</a> 合成复用原则</h2>\n<p><strong>尽量使用合成 / 聚合的方式，而不是使用继承</strong></p>\n<h1 id=\"设计模式类型\"><a class=\"anchor\" href=\"#设计模式类型\">#</a> 设计模式类型</h1>\n<p>设计模式类型主要分为以下几种：</p>\n<ul>\n<li>创建型：包括简单工厂模式、工厂方法模式、抽象工厂模式、建造者模式、单例模式</li>\n<li>结构型：适配器模式、桥模式、组合模式、装饰器模式、外观模式、享元模式、代理模式</li>\n<li>行为模式：职责链模式、命令模式、迭代器模式、中介者模式、备忘录模式、观察者模式、访问者模式、策略模式、状态模式、模版方法模式、解释器模式</li>\n</ul>\n<h1 id=\"创建型\"><a class=\"anchor\" href=\"#创建型\">#</a> 创建型</h1>\n<p>创建型的设计模式提供了更加灵活的对象创建方法，同时可以隐藏创建的具体逻辑，更强的定制性和灵活性</p>\n<h2 id=\"单例模式\"><a class=\"anchor\" href=\"#单例模式\">#</a> 单例模式</h2>\n<p><strong>单例模式是指，一个类（当然如果是在 JavaScript 里面的话就是指原型）仅有唯一的一个实例。</strong></p>\n<h3 id=\"实现思路\"><a class=\"anchor\" href=\"#实现思路\">#</a> 实现思路</h3>\n<ol>\n<li>将构造方法设置为私有的，并且提供一个公开的获取实例的方法。</li>\n<li>获取实例方法内再进行判断，如果已有就返回已有对象，否则才生成。</li>\n</ol>\n<h3 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">SingleInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">Instance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Instance</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> getInstance<span class=\"token punctuation\">;</span><span class=\"token comment\">// 利用闭包返回访问器函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h3>\n<ol>\n<li>严格控制客户程序访问唯一的实例。</li>\n<li>可以简单的改成多例模式，适用于一些只允许客户创建一定数量的对象的场景。如某游戏每个账号只允许创建一个角色。</li>\n</ol>\n<h2 id=\"简单工厂模式\"><a class=\"anchor\" href=\"#简单工厂模式\">#</a> 简单工厂模式</h2>\n<p>简单工厂模式，就是使用一个类 / 函数来专门负责创建对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 根据 type 来创建不同的对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">case</span><span class=\"token string\">'car'</span><span class=\"token operator\">:</span>obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"核心思路\"><a class=\"anchor\" href=\"#核心思路\">#</a> 核心思路</h3>\n<p><strong>一系列不同的产品，使用一个工厂方法根据传入的类型不同创建不同的对象并返回。</strong></p>\n<h3 id=\"优点-2\"><a class=\"anchor\" href=\"#优点-2\">#</a> 优点</h3>\n<ol>\n<li>实行了责任分离。</li>\n<li>客户不直接创建产品类的对象，只作为对象的消费者，类似于 getter 方法的好处，可以减少操作失误的可能性</li>\n<li>因为客户类不负责创建对象，如果要扩展新对象，不必修改已有客户类代码</li>\n</ol>\n<h3 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ol>\n<li>\n<p><strong>不符合开闭原则</strong>，每当增加产品时，必须在简单工厂方法内部增加判断逻辑。</p>\n</li>\n<li>\n<p>工厂类的工厂方法是静态的，不能被继承，不能成为一个层次的类。</p>\n</li>\n</ol>\n<h2 id=\"工厂方法模式\"><a class=\"anchor\" href=\"#工厂方法模式\">#</a> 工厂方法模式</h2>\n<p>为了克服简单工厂方法的缺点（缺点第一条），改变了工厂类 / 方法的结构。</p>\n<h3 id=\"改进思路\"><a class=\"anchor\" href=\"#改进思路\">#</a> 改进思路</h3>\n<p>简单工厂模式中，每当有一个新的产品加入时，就必须在工厂方法中增加相应的条件语句。</p>\n<p>于是可以将工厂类改写成一个层次类来解决这个问题，如：</p>\n<p><img src=\"factory.png\" alt=\"factory\" /></p>\n<p><strong>弄一个抽象工厂类，然后每个产品对应一个实际的工厂类（该工厂类继承抽象工厂类），创建特定产品时需要调用特定的工厂类</strong></p>\n<h3 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h3>\n<ol>\n<li>创建某些类的对象逻辑比较复杂，可能存在很多判断</li>\n<li>一个类不能预先知道它必须创建一个层次类中哪个子类的对象。</li>\n<li>需要封装创建类的对象的逻辑。</li>\n</ol>\n<h3 id=\"优点-3\"><a class=\"anchor\" href=\"#优点-3\">#</a> 优点</h3>\n<ol>\n<li>工厂方法模式符合开闭原则。增加一个新产品，不用修改已有的类代码，只需要增加一个新的产品类和对应的工厂类（继承抽象工厂）即可。</li>\n<li>工厂方法模式将创建对象的逻辑和任务交给了工厂类。</li>\n</ol>\n<h2 id=\"抽象工厂模式\"><a class=\"anchor\" href=\"#抽象工厂模式\">#</a> 抽象工厂模式</h2>\n<p>它和工厂方法模式不同的就在于，如果有一组相同类别的产品，抽象工厂模式也是层次类的结构，但它负责创建一组同类别的产品。</p>\n<p><strong>每个实工厂类生产一组相关的产品类对象</strong></p>\n<p>应用场景：当客户要从一个相关的产品组中创建一个对象，而没有必要知道到底创建哪个对象时，就可以用抽象工厂模式。</p>\n<h1 id=\"结构型\"><a class=\"anchor\" href=\"#结构型\">#</a> 结构型</h1>\n<p>关注类和对象的组合</p>\n<h2 id=\"适配器模式\"><a class=\"anchor\" href=\"#适配器模式\">#</a> 适配器模式</h2>\n<h3 id=\"背景\"><a class=\"anchor\" href=\"#背景\">#</a> 背景</h3>\n<p>当现有的系统需要使用旧系统的类功能，但是旧系统的类功能又不符合现在的需要的时候，<strong>就要使用适配器，将旧系统的接口转换为客户类需要的格式</strong></p>\n<p>一个经典场景就是：两根口径不一样的水管，如何连接在一起呢？</p>\n<p><img src=\"adapter@2x.png\" alt=\"adapter@2x\" /></p>\n<h3 id=\"使用场景\"><a class=\"anchor\" href=\"#使用场景\">#</a> 使用场景</h3>\n<ol>\n<li>当系统想要使用现有的类，但是现有的类不符合系统的需要。</li>\n<li>需要通过一个可复用的类，使得本来接口不相容并且无关的类结合在一起时。</li>\n<li>在设计时需要改变多个子类接口，作用相同但名称不同的类或方法之间进行适配时。</li>\n</ol>\n<h3 id=\"实现方式\"><a class=\"anchor\" href=\"#实现方式\">#</a> 实现方式</h3>\n<h4 id=\"类适配器模式\"><a class=\"anchor\" href=\"#类适配器模式\">#</a> 类适配器模式</h4>\n<p>类适配器模式利用的是继承，有三个要素</p>\n<ul>\n<li>Target，用户所期望的接口</li>\n<li>Adaptee，旧接口的类</li>\n<li>Adapter，将 Adaptee 转化为增加了新功能的 Target 接口。</li>\n</ul>\n<h4 id=\"对象适配器模式\"><a class=\"anchor\" href=\"#对象适配器模式\">#</a> 对象适配器模式</h4>\n<p>对象适配器模式利用的是聚合</p>\n<ul>\n<li>Target，用户所期望的接口</li>\n<li>Adaptee，旧接口的类</li>\n<li>Adapter，新接口的类，但是不继承，涉及到需要转化的地方时调用 Adaptee。</li>\n</ul>\n<h4 id=\"类适配器or对象适配器\"><a class=\"anchor\" href=\"#类适配器or对象适配器\">#</a> 类适配器 or 对象适配器？</h4>\n<p>在 Java 内由于是单继承的，所以相对来说对象适配器可以把多种不同的源类都适配到同一个 Target 接口。</p>\n<ul>\n<li>若被适配的源类 Adaptee 有大量的方法，使用类适配器模式更为合适。</li>\n</ul>\n<h3 id=\"与外观模式的区别\"><a class=\"anchor\" href=\"#与外观模式的区别\">#</a> 与外观模式的区别</h3>\n<ul>\n<li>外观模式定义了新的接口，而适配器使用旧的接口</li>\n<li>适配器使得两种不一致的接口协同工作，而不是产生新的接口。</li>\n<li>外观模式本意是产生一个轻便的接口，适配器是把现有的接口转换一下。</li>\n<li>一个外观接口可能包装了多个现有系统的对象、也可能增加了一些新功能，而适配器只是包装一个对象</li>\n<li>多数情况下，外观是单实例的</li>\n</ul>\n<h2 id=\"组合模式\"><a class=\"anchor\" href=\"#组合模式\">#</a> 组合模式</h2>\n<h3 id=\"背景-2\"><a class=\"anchor\" href=\"#背景-2\">#</a> 背景</h3>\n<p>一个常见的背景就是我们可能经常遇到树形结构。处理树形结构的时候，如果要区分叶子结点和普通结点的操作会变得比较复杂，为了简化操作，我们可以一致的对待这些结点。</p>\n<h3 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h3>\n<p><img src=\"zuhe.png\" alt=\"zuhe\" /></p>\n<p><strong>组合模式又叫部分 —— 整体模式，模糊简单元素和复杂元素，在上面的 UML 图中，客户只需操作 Component，无需关心他是个叶子还是普通结点</strong>。</p>\n<h3 id=\"优点-4\"><a class=\"anchor\" href=\"#优点-4\">#</a> 优点</h3>\n<ol>\n<li>定义了包含基本对象和组合对象的类层次结构，基本对象可以被组合、组合对象也可以被组合。</li>\n<li>简化了客户代码，客户可以一致的使用组合结构和单个对象，而不管他是简单还是组合的。</li>\n<li>设计更通用。</li>\n</ol>\n<h2 id=\"装饰器模式\"><a class=\"anchor\" href=\"#装饰器模式\">#</a> 装饰器模式</h2>\n<p><strong>装饰器模式允许向一个现有的对象添加新的功能，同时不改变它的内部结构</strong>。其实就是对现有的类的包装。</p>\n<h3 id=\"应用场景-2\"><a class=\"anchor\" href=\"#应用场景-2\">#</a> 应用场景</h3>\n<p>当我们想要给一个对象额外的添加职责、功能的时候，就可以使用这个设计模式。</p>\n<h3 id=\"优点-5\"><a class=\"anchor\" href=\"#优点-5\">#</a> 优点</h3>\n<p>一般来说，为了扩展一个类的功能（且不修改源代码）我们常常会使用继承的方式来实现。随着功能的增多，子类会变得越来越 “臃肿 “，而使用装饰器模式的话，能够更加灵活的分配职责。</p>\n<p>而且很多情况下，装饰类和被装饰类是独立的，不会相互耦合，可以替代继承。</p>\n<h3 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h3>\n<p>前端中广泛应用装饰器模式的地方莫过于 React 的<strong>高阶组件（HOC）</strong>。</p>\n<p>高阶组件是干什么用的就不再赘述了，之前的笔记也说过。</p>\n<p>高阶组件可以提取组件中常用的行为逻辑（如从数据源获取数据）、或者添加一些方法等。</p>\n<pre><code class=\"language-react\">function withSubscription(WrappedComponent, selectData) &#123;\n  // ...并返回另一个组件...\n  return class extends React.Component &#123;\n    constructor(props) &#123;\n      super(props);\n      this.handleChange = this.handleChange.bind(this);\n      this.state = &#123;\n        data: selectData(DataSource, props)\n      &#125;;\n    &#125;\n\n    componentDidMount() &#123;\n      // ...负责订阅相关的操作...\n      DataSource.addChangeListener(this.handleChange);\n    &#125;\n\n    componentWillUnmount() &#123;\n      DataSource.removeChangeListener(this.handleChange);\n    &#125;\n\n    handleChange() &#123;\n      this.setState(&#123;\n        data: selectData(DataSource, this.props)\n      &#125;);\n    &#125;\n\n    render() &#123;\n      // ... 并使用新数据渲染被包装的组件!\n      // 请注意，我们可能还会传递其他属性\n      return &lt;WrappedComponent data=&#123;this.state.data&#125; &#123;...this.props&#125; /&gt;;\n    &#125;\n  &#125;;\n&#125;\n</code></pre>\n<p>就像这里，在原有的基础上增强了 Wrapped Component，又不改变内部结构。而且也还可以增加方法。</p>\n<h2 id=\"外观模式\"><a class=\"anchor\" href=\"#外观模式\">#</a> 外观模式</h2>\n<p><strong>现有系统的接口比较复杂，希望利用原有的功能重新定义新的接口</strong>。</p>\n<p><img src=\"facade1.png\" alt=\"facade1\" /></p>\n<p><img src=\"facade2.png\" alt=\"facade2\" /></p>\n<h3 id=\"应用场景-3\"><a class=\"anchor\" href=\"#应用场景-3\">#</a> 应用场景</h3>\n<p>比如说，有一家店的客户，他通过目录下订单，就像一个外观模式。客户只需要联系客服，就可以完成下订单、检查仓储、发货等一系列流程。</p>\n<h3 id=\"优点-6\"><a class=\"anchor\" href=\"#优点-6\">#</a> 优点</h3>\n<p>外观模式产生了一个新的、轻便的接口，它可能包装了多个接口和对象，<strong>可以简化复杂系统的使用</strong>。</p>\n<h1 id=\"行为型\"><a class=\"anchor\" href=\"#行为型\">#</a> 行为型</h1>\n<p>聚焦于对象和类之间的通信，大型应用必不可少的部分</p>\n<h2 id=\"观察者模式发布订阅模式\"><a class=\"anchor\" href=\"#观察者模式发布订阅模式\">#</a> 观察者模式（发布订阅模式）</h2>\n<p>观察者模式，又叫发布订阅模式，是前端中一个非常重要的概念，响应式框架中就利用了这个模式。</p>\n<h3 id=\"思路-2\"><a class=\"anchor\" href=\"#思路-2\">#</a> 思路</h3>\n<p>用于定义对象间的一对多的依赖关系，当一个对象发生变化并对外发布消息时，所有依赖它的对象都将得到通知并进行更新。</p>\n<h3 id=\"简单实现\"><a class=\"anchor\" href=\"#简单实现\">#</a> 简单实现</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Notify</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">handler</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subscribers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span> <span class=\"token operator\">=></span> <span class=\"token function\">subscriber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> notify <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>notify<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'emit here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>notify<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//emit here</span></pre></td></tr></table></figure><h2 id=\"策略模式\"><a class=\"anchor\" href=\"#策略模式\">#</a> 策略模式</h2>\n<h3 id=\"设计思想\"><a class=\"anchor\" href=\"#设计思想\">#</a> 设计思想</h3>\n<p>根据语境的不同，使用不同的算法。<strong>就是将对算法的选择和算法的实现相分离开来</strong></p>\n<p><img src=\"celue.png\" alt=\"celue\" /></p>\n<h3 id=\"应用场景-4\"><a class=\"anchor\" href=\"#应用场景-4\">#</a> 应用场景</h3>\n<p>将一组相关的算法封装，把实现隐藏起来，灵活扩展。</p>\n<p>我觉得 React 中的 render props 模式也有点策略模式的思想，render props 将数据的获取和渲染职责相分离，可以灵活替换、扩展渲染的组件</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n",
            "tags": [
                "计算机基础"
            ]
        }
    ]
}